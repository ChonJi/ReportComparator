<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190121 10:16:37.250" generator="Robot 3.0.2 (Python 3.5.3 on linux)">
<suite name="Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094" id="s1">
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/update-nad.robot" name="Update-Nad" id="s1-s1">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:16:45.153">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:16:45.156" starttime="20190121 10:16:45.149"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:16:45.167">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:16:45.169">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:16:47.295">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:16:47.297" starttime="20190121 10:16:45.159"></status>
</kw>
<status status="PASS" endtime="20190121 10:16:47.299" starttime="20190121 10:16:45.141"></status>
</kw>
<test name="SKTB-13351 FBUS test" id="s1-s1-t1">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:16:47.370" starttime="20190121 10:16:47.321"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:16:47.419" starttime="20190121 10:16:47.373"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:16:47.469" starttime="20190121 10:16:47.422"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:16:49.481">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:16:49.483" starttime="20190121 10:16:47.472"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:16:49.607" starttime="20190121 10:16:49.486"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:16:49.763" starttime="20190121 10:16:49.616"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>45s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:17:34.796">Slept 45 seconds</msg>
<status status="PASS" endtime="20190121 10:17:34.798" starttime="20190121 10:16:49.774"></status>
</kw>
<status status="PASS" endtime="20190121 10:17:34.800" starttime="20190121 10:16:47.315"></status>
</kw>
<kw name="Step_1">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get update'</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:17:34.814">Starting process:
ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get update'</msg>
<msg level="INFO" timestamp="20190121 10:17:34.839">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:17:39.283">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:17:39.287">${info} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:17:39.288" starttime="20190121 10:17:34.809"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info.stdout}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:39.299" starttime="20190121 10:17:39.291"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get upgrade -y'</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:17:39.306">Starting process:
ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get upgrade -y'</msg>
<msg level="INFO" timestamp="20190121 10:17:39.330">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:17:40.274">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:17:40.278">${info} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:17:40.279" starttime="20190121 10:17:39.302"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info.stdout}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:40.290" starttime="20190121 10:17:40.283"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get install -y can-utils'</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:17:40.297">Starting process:
ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get install -y can-utils'</msg>
<msg level="INFO" timestamp="20190121 10:17:40.321">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:17:41.143">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:17:41.147">${info} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:17:41.148" starttime="20190121 10:17:40.293"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info.stdout}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:41.163" starttime="20190121 10:17:41.152"></status>
</kw>
<status status="PASS" endtime="20190121 10:17:41.165" starttime="20190121 10:17:34.803"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:41.259" starttime="20190121 10:17:41.188"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:41.367" starttime="20190121 10:17:41.266"></status>
</kw>
<status status="PASS" endtime="20190121 10:17:41.376" starttime="20190121 10:17:41.177"></status>
</kw>
<doc>Implements Test Task SKTB-update-nad</doc>
<tags>
<tag>FBUS</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:17:41.377" starttime="20190121 10:16:47.301"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:17:43.075">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:17:43.103">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:17:43.110" starttime="20190121 10:17:41.643"></status>
</kw>
<status status="PASS" endtime="20190121 10:17:43.132" starttime="20190121 10:17:41.455"></status>
</kw>
<status status="PASS" endtime="20190121 10:17:43.134" starttime="20190121 10:17:41.430"></status>
</kw>
<doc>Chorus Fbus Testing</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:17:43.135" starttime="20190121 10:16:37.699"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/CI_update_chorus.robot" name="CI update chorus" id="s1-s2">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:17:43.643">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:17:43.653" starttime="20190121 10:17:43.636"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:17:43.670">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:17:43.672">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:17:45.773">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:17:45.775" starttime="20190121 10:17:43.657"></status>
</kw>
<status status="PASS" endtime="20190121 10:17:45.777" starttime="20190121 10:17:43.624"></status>
</kw>
<test name="Ci_update_chorus Chorus SW Flashing" id="s1-s2-t1">
<kw name="Test_precondition" type="setup">
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:45.945" starttime="20190121 10:17:45.825"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:46.068" starttime="20190121 10:17:45.948"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:46.170" starttime="20190121 10:17:46.071"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:17:48.186">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:17:48.188" starttime="20190121 10:17:46.174"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:48.237" starttime="20190121 10:17:48.191"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${250000}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:48.384" starttime="20190121 10:17:48.240"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:17:48.490" starttime="20190121 10:17:48.387"></status>
</kw>
<status status="PASS" endtime="20190121 10:17:48.492" starttime="20190121 10:17:45.807"></status>
</kw>
<kw name="Step_1">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:17:50.531">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:17:50.533" starttime="20190121 10:17:48.514"></status>
</kw>
<kw name="Chorus Flash Release" library="robot_framework_tnt.Client">
<arguments>
<arg>${FD_PATH}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:17.469">${RESULT} = Flashing sucessfully finished.</msg>
<status status="PASS" endtime="20190121 10:19:17.470" starttime="20190121 10:17:50.536"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${RESULT}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:17.477">Flashing sucessfully finished.</msg>
<status status="PASS" endtime="20190121 10:19:17.479" starttime="20190121 10:19:17.473"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT}</arg>
<arg>sucessfully</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:17.487" starttime="20190121 10:19:17.482"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:17.490" starttime="20190121 10:17:48.495"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:17.546" starttime="20190121 10:19:17.499"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:17.594" starttime="20190121 10:19:17.549"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:17.648" starttime="20190121 10:19:17.598"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:17.701" starttime="20190121 10:19:17.651"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:17.752" starttime="20190121 10:19:17.705"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:17.755" starttime="20190121 10:19:17.493"></status>
</kw>
<doc>Implements Test Task Ci_update_chorus</doc>
<tags>
<tag>Flashing</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:19:17.756" starttime="20190121 10:17:45.779"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:19:19.268">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:19:19.292">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:19:19.294" starttime="20190121 10:19:17.793"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:19.295" starttime="20190121 10:19:17.771"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:19.323" starttime="20190121 10:19:17.766"></status>
</kw>
<doc>Serial flashing test fof CI</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:19:19.323" starttime="20190121 10:17:43.280"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-31405.robot" name="SKTB-31405" id="s1-s3">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:19.914">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:19:19.960" starttime="20190121 10:19:19.902"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:19.985">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:19:19.986">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:19:22.090">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:19:22.092" starttime="20190121 10:19:19.963"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:22.100" starttime="20190121 10:19:19.896"></status>
</kw>
<test name="SKTB-31405 GpioAdc testroutine" id="s1-s3-t1">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:22.270" starttime="20190121 10:19:22.149"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:22.376" starttime="20190121 10:19:22.276"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:22.453" starttime="20190121 10:19:22.379"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:24.475">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:19:24.477" starttime="20190121 10:19:22.456"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:24.527" starttime="20190121 10:19:24.480"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:25.539">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:25.541" starttime="20190121 10:19:24.530"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:25.601" starttime="20190121 10:19:25.544"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:27.609">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:19:27.611" starttime="20190121 10:19:25.605"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:27.659" starttime="20190121 10:19:27.614"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:27.708" starttime="20190121 10:19:27.662"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:27.758" starttime="20190121 10:19:27.711"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:27.807" starttime="20190121 10:19:27.762"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:27.810" starttime="20190121 10:19:22.135"></status>
</kw>
<kw name="Step_alive">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:27.881">${res_dict} = {'status': True, 'result': '4153', 'data': '', 'request': '41'}</msg>
<status status="PASS" endtime="20190121 10:19:27.882" starttime="20190121 10:19:27.819"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:27.907">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:27.908" starttime="20190121 10:19:27.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${value}== ${FALSE}</arg>
<arg>change_baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:27.917" starttime="20190121 10:19:27.911"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:28.924">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:28.926" starttime="20190121 10:19:27.919"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:28.928" starttime="20190121 10:19:27.813"></status>
</kw>
<kw name="Step_alive_retry">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:28.996">${res_dict} = {'status': True, 'result': '4153', 'data': '', 'request': '41'}</msg>
<status status="PASS" endtime="20190121 10:19:28.998" starttime="20190121 10:19:28.936"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:29.024">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:29.025" starttime="20190121 10:19:29.000"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:29.032" starttime="20190121 10:19:29.027"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:30.039">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:30.041" starttime="20190121 10:19:29.034"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:30.043" starttime="20190121 10:19:28.930"></status>
</kw>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${ADC_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:30.063">Starting process:
find /home/debian/chorus_version/TestRoutineGpioAdc_OLU_*.bin</msg>
<msg level="INFO" timestamp="20190121 10:19:30.088">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:19:30.131">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:19:30.135">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:19:30.136" starttime="20190121 10:19:30.058"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:30.145">${stdout_path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:19:30.146" starttime="20190121 10:19:30.139"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:30.154">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:19:30.156">${temp} = ['/home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin']</msg>
<status status="PASS" endtime="20190121 10:19:30.157" starttime="20190121 10:19:30.148"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:30.164">${path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:19:30.165" starttime="20190121 10:19:30.159"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:30.173" starttime="20190121 10:19:30.168"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20190121 10:19:30.181">File '&lt;a href="file:///home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20190121 10:19:30.182" starttime="20190121 10:19:30.176"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:19:30.186">${matched_path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:19:30.187" starttime="20190121 10:19:30.050"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:30.332">${res_dict} = {'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': '0468781f'}</msg>
<status status="PASS" endtime="20190121 10:19:30.333" starttime="20190121 10:19:30.190"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:30.345">{'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': '0468781f'}</msg>
<status status="PASS" endtime="20190121 10:19:30.348" starttime="20190121 10:19:30.336"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:32.360">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:19:32.362" starttime="20190121 10:19:30.351"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:32.413">${value} = 5453</msg>
<status status="PASS" endtime="20190121 10:19:32.414" starttime="20190121 10:19:32.365"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:32.444" starttime="20190121 10:19:32.438"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:32.446" starttime="20190121 10:19:30.045"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:32.564">${res_dict} = {'status': True, 'result': '4953', 'data': '', 'request': '49'}</msg>
<status status="PASS" endtime="20190121 10:19:32.565" starttime="20190121 10:19:32.463"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:32.613">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:32.623" starttime="20190121 10:19:32.568"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:32.630" starttime="20190121 10:19:32.626"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:33.650">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:33.652" starttime="20190121 10:19:32.645"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:33.654" starttime="20190121 10:19:32.448"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:33.726">${res_dict} = {'status': True, 'result': '475653', 'data': '0201', 'request': '4756'}</msg>
<status status="PASS" endtime="20190121 10:19:33.727" starttime="20190121 10:19:33.663"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:34.740">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:34.743" starttime="20190121 10:19:33.731"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:34.745" starttime="20190121 10:19:33.657"></status>
</kw>
<kw name="Step_gpio_select">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${VCC3V3_SWITCH}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:34.862">${res_dict} = {'status': True, 'result': '534653', 'data': '', 'request': '53460000006d'}</msg>
<status status="PASS" endtime="20190121 10:19:34.863" starttime="20190121 10:19:34.765"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:34.934">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:34.935" starttime="20190121 10:19:34.866"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:34.942" starttime="20190121 10:19:34.938"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${GpioSelect}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:35.059">${res_dict} = {'status': True, 'result': '520153', 'data': '', 'request': '5201'}</msg>
<status status="PASS" endtime="20190121 10:19:35.061" starttime="20190121 10:19:34.955"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:35.112">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:35.113" starttime="20190121 10:19:35.071"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:35.125" starttime="20190121 10:19:35.116"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:36.132">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:36.134" starttime="20190121 10:19:35.127"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:36.137" starttime="20190121 10:19:34.747"></status>
</kw>
<kw name="Step_gpio_write">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${HIGH}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:36.206">${res_dict} = {'status': True, 'result': '534653', 'data': '', 'request': '534600000001'}</msg>
<status status="PASS" endtime="20190121 10:19:36.207" starttime="20190121 10:19:36.144"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:36.234">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:36.235" starttime="20190121 10:19:36.211"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:36.242" starttime="20190121 10:19:36.238"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${GpioWrite}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:36.305">${res_dict} = {'status': True, 'result': '520453', 'data': '', 'request': '5204'}</msg>
<status status="PASS" endtime="20190121 10:19:36.306" starttime="20190121 10:19:36.245"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:36.332">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:36.333" starttime="20190121 10:19:36.309"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:36.340" starttime="20190121 10:19:36.336"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:37.347">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:37.349" starttime="20190121 10:19:36.342"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:37.351" starttime="20190121 10:19:36.138"></status>
</kw>
<kw name="Step_adc_read_channel">
<kw name="check_analog_channel">
<arguments>
<arg>${CARBAT_V_SENSE}</arg>
</arguments>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${value_address}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:37.443">${res_dict} = {'status': False, 'result': '1efd54', 'data': '', 'request': '53460000004d'}</msg>
<status status="PASS" endtime="20190121 10:19:37.444" starttime="20190121 10:19:37.366"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:37.471">${value} = False</msg>
<status status="PASS" endtime="20190121 10:19:37.471" starttime="20190121 10:19:37.447"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:19:37.480">'False' should be true.</msg>
<status status="FAIL" endtime="20190121 10:19:37.481" starttime="20190121 10:19:37.474"></status>
</kw>
<status status="FAIL" endtime="20190121 10:19:37.484" starttime="20190121 10:19:37.358"></status>
</kw>
<status status="FAIL" endtime="20190121 10:19:37.487" starttime="20190121 10:19:37.353"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:37.546" starttime="20190121 10:19:37.497"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:37.599" starttime="20190121 10:19:37.549"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:37.715" starttime="20190121 10:19:37.605"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:39.739">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:19:39.741" starttime="20190121 10:19:37.718"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:39.790" starttime="20190121 10:19:39.744"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:39.792" starttime="20190121 10:19:37.491"></status>
</kw>
<doc>Implements Test Task SKTB-31405</doc>
<tags>
<tag>GpioAdc testroutine</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20190121 10:19:39.794" starttime="20190121 10:19:22.106">'False' should be true.</status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:19:41.287">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:19:41.323">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:19:41.325" starttime="20190121 10:19:39.835"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:41.326" starttime="20190121 10:19:39.810"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:41.329" starttime="20190121 10:19:39.804"></status>
</kw>
<doc>Chorus GpioAdc testing with testroutine</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="FAIL" endtime="20190121 10:19:41.330" starttime="20190121 10:19:19.445"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-33244.robot" name="SKTB-33244" id="s1-s4">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:42.021">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:19:42.034" starttime="20190121 10:19:42.004"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:42.043">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:19:42.051">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:19:44.167">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:19:44.169" starttime="20190121 10:19:42.037"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:44.183" starttime="20190121 10:19:41.998"></status>
</kw>
<test name="SKTB-33244 Test ADC channels" id="s1-s4-t1">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:44.388" starttime="20190121 10:19:44.254"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:44.527" starttime="20190121 10:19:44.391"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:44.694" starttime="20190121 10:19:44.530"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:46.727">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:19:46.729" starttime="20190121 10:19:44.701"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:46.779" starttime="20190121 10:19:46.732"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:47.787">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:47.789" starttime="20190121 10:19:46.782"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:47.841" starttime="20190121 10:19:47.792"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:49.848">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:19:49.850" starttime="20190121 10:19:47.844"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:49.899" starttime="20190121 10:19:49.853"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:49.948" starttime="20190121 10:19:49.902"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:49.997" starttime="20190121 10:19:49.951"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:50.047" starttime="20190121 10:19:50.000"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:50.050" starttime="20190121 10:19:44.213"></status>
</kw>
<kw name="Step_alive">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:50.118">${res_dict} = {'status': True, 'result': '4153', 'data': '', 'request': '41'}</msg>
<status status="PASS" endtime="20190121 10:19:50.119" starttime="20190121 10:19:50.058"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:50.156">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:50.157" starttime="20190121 10:19:50.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${value}== ${FALSE}</arg>
<arg>change_baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:50.169" starttime="20190121 10:19:50.163"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:51.176">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:51.178" starttime="20190121 10:19:50.172"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:51.181" starttime="20190121 10:19:50.052"></status>
</kw>
<kw name="Step_alive_retry">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:51.249">${res_dict} = {'status': True, 'result': '4153', 'data': '', 'request': '41'}</msg>
<status status="PASS" endtime="20190121 10:19:51.250" starttime="20190121 10:19:51.189"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:51.282">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:51.283" starttime="20190121 10:19:51.253"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:51.290" starttime="20190121 10:19:51.286"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:52.297">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:52.299" starttime="20190121 10:19:51.293"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:52.302" starttime="20190121 10:19:51.183"></status>
</kw>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${ADC_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:52.325">Starting process:
find /home/debian/chorus_version/TestRoutineGpioAdc_OLU_*.bin</msg>
<msg level="INFO" timestamp="20190121 10:19:52.350">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:19:52.385">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:19:52.391">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:19:52.392" starttime="20190121 10:19:52.319"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:52.409">${stdout_path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:19:52.410" starttime="20190121 10:19:52.395"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:52.418">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:19:52.421">${temp} = ['/home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin']</msg>
<status status="PASS" endtime="20190121 10:19:52.422" starttime="20190121 10:19:52.412"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:52.430">${path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:19:52.431" starttime="20190121 10:19:52.425"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:52.439" starttime="20190121 10:19:52.434"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20190121 10:19:52.447">File '&lt;a href="file:///home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20190121 10:19:52.448" starttime="20190121 10:19:52.442"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:19:52.452">${matched_path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:19:52.453" starttime="20190121 10:19:52.309"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:52.598">${res_dict} = {'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': '0468781f'}</msg>
<status status="PASS" endtime="20190121 10:19:52.599" starttime="20190121 10:19:52.456"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:54.612">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:19:54.614" starttime="20190121 10:19:52.607"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:54.647">${value} = 5453</msg>
<status status="PASS" endtime="20190121 10:19:54.648" starttime="20190121 10:19:54.617"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:54.656" starttime="20190121 10:19:54.651"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:54.659" starttime="20190121 10:19:52.304"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:54.728">${res_dict} = {'status': True, 'result': '4953', 'data': '', 'request': '49'}</msg>
<status status="PASS" endtime="20190121 10:19:54.729" starttime="20190121 10:19:54.667"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:54.762">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:54.763" starttime="20190121 10:19:54.733"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:54.770" starttime="20190121 10:19:54.766"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:55.777">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:55.780" starttime="20190121 10:19:54.773"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:55.782" starttime="20190121 10:19:54.661"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:55.854">${res_dict} = {'status': True, 'result': '475653', 'data': '0201', 'request': '4756'}</msg>
<status status="PASS" endtime="20190121 10:19:55.854" starttime="20190121 10:19:55.790"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:56.862">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:56.864" starttime="20190121 10:19:55.857"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:56.866" starttime="20190121 10:19:55.784"></status>
</kw>
<kw name="Step_gpio_select">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${VCC3V3_SWITCH}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:56.948">${res_dict} = {'status': True, 'result': '534653', 'data': '', 'request': '53460000006d'}</msg>
<status status="PASS" endtime="20190121 10:19:56.949" starttime="20190121 10:19:56.886"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:56.981">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:56.982" starttime="20190121 10:19:56.952"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:56.989" starttime="20190121 10:19:56.985"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${GpioSelect}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:57.054">${res_dict} = {'status': True, 'result': '520153', 'data': '', 'request': '5201'}</msg>
<status status="PASS" endtime="20190121 10:19:57.055" starttime="20190121 10:19:56.992"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:57.087">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:57.088" starttime="20190121 10:19:57.058"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:57.095" starttime="20190121 10:19:57.090"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:58.102">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:58.104" starttime="20190121 10:19:57.097"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:58.106" starttime="20190121 10:19:56.868"></status>
</kw>
<kw name="Step_gpio_write">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${HIGH}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:58.175">${res_dict} = {'status': True, 'result': '534653', 'data': '', 'request': '534600000001'}</msg>
<status status="PASS" endtime="20190121 10:19:58.177" starttime="20190121 10:19:58.115"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:58.212">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:58.213" starttime="20190121 10:19:58.180"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:58.220" starttime="20190121 10:19:58.216"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${GpioWrite}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:58.286">${res_dict} = {'status': True, 'result': '520453', 'data': '', 'request': '5204'}</msg>
<status status="PASS" endtime="20190121 10:19:58.287" starttime="20190121 10:19:58.223"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:58.321">${value} = True</msg>
<status status="PASS" endtime="20190121 10:19:58.322" starttime="20190121 10:19:58.290"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:58.329" starttime="20190121 10:19:58.324"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:19:59.337">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:19:59.343" starttime="20190121 10:19:58.331"></status>
</kw>
<status status="PASS" endtime="20190121 10:19:59.373" starttime="20190121 10:19:58.108"></status>
</kw>
<kw name="Step_adc_read_channel">
<kw name="check_analog_channel">
<arguments>
<arg>${CARBAT_V_SENSE}</arg>
</arguments>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${value_address}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:59.701">${res_dict} = {'status': False, 'result': '1efd54', 'data': '', 'request': '53460000004d'}</msg>
<status status="PASS" endtime="20190121 10:19:59.702" starttime="20190121 10:19:59.457"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:19:59.783">${value} = False</msg>
<status status="PASS" endtime="20190121 10:19:59.784" starttime="20190121 10:19:59.719"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:19:59.802">'False' should be true.</msg>
<status status="FAIL" endtime="20190121 10:19:59.804" starttime="20190121 10:19:59.786"></status>
</kw>
<status status="FAIL" endtime="20190121 10:19:59.827" starttime="20190121 10:19:59.408"></status>
</kw>
<status status="FAIL" endtime="20190121 10:19:59.830" starttime="20190121 10:19:59.375"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:19:59.929" starttime="20190121 10:19:59.849"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:00.030" starttime="20190121 10:19:59.932"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:00.135" starttime="20190121 10:20:00.033"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:02.152">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:20:02.155" starttime="20190121 10:20:00.138"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:02.202" starttime="20190121 10:20:02.157"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:02.207" starttime="20190121 10:19:59.834"></status>
</kw>
<doc>Implements Test Task SKTB-33244</doc>
<tags>
<tag>GpioAdc testroutine</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20190121 10:20:02.208" starttime="20190121 10:19:44.185">'False' should be true.</status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:20:03.713">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:20:03.741">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:20:03.743" starttime="20190121 10:20:02.256"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:03.744" starttime="20190121 10:20:02.224"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:03.757" starttime="20190121 10:20:02.219"></status>
</kw>
<doc>Chorus GpioAdc's test with testroutine</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="FAIL" endtime="20190121 10:20:03.758" starttime="20190121 10:19:41.532"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-13351.robot" name="SKTB-13351" id="s1-s5">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:04.345">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:20:04.352" starttime="20190121 10:20:04.326"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:04.380">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:20:04.382">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:20:06.541">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:20:06.559" starttime="20190121 10:20:04.354"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:06.561" starttime="20190121 10:20:04.321"></status>
</kw>
<test name="SKTB-13351 FBUS test" id="s1-s5-t1">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:06.701" starttime="20190121 10:20:06.619"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:06.832" starttime="20190121 10:20:06.728"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:06.923" starttime="20190121 10:20:06.835"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:08.945">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:20:08.947" starttime="20190121 10:20:06.926"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:08.998" starttime="20190121 10:20:08.950"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:09.048" starttime="20190121 10:20:09.001"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:09.115" starttime="20190121 10:20:09.051"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:09.167" starttime="20190121 10:20:09.118"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:09.221" starttime="20190121 10:20:09.170"></status>
</kw>
<kw name="Fbus Set State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${10000}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:09.275" starttime="20190121 10:20:09.224"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:11.283">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:20:11.285" starttime="20190121 10:20:09.278"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:11.287" starttime="20190121 10:20:06.597"></status>
</kw>
<kw name="Step_1">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${PN_POWER_APP}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:11.494">${info} = 1E 14 54 8D 00 08 00 0C 01 01 00 00 01 43 4A DF</msg>
<status status="PASS" endtime="20190121 10:20:11.495" starttime="20190121 10:20:11.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:11.503">1E 14 54 8D 00 08 00 0C 01 01 00 00 01 43 4A DF</msg>
<status status="PASS" endtime="20190121 10:20:11.505" starttime="20190121 10:20:11.498"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${PN_POWER_APP_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:11.514" starttime="20190121 10:20:11.508"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:11.517" starttime="20190121 10:20:11.290"></status>
</kw>
<kw name="Step_2">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${PN_DIAG_APP}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:11.722">${info} = 1E 14 54 8F 00 0A 00 0A 01 01 00 00 00 00 01 44 4A DE</msg>
<status status="PASS" endtime="20190121 10:20:11.722" starttime="20190121 10:20:11.525"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:11.733">1E 14 54 8F 00 0A 00 0A 01 01 00 00 00 00 01 44 4A DE</msg>
<status status="PASS" endtime="20190121 10:20:11.735" starttime="20190121 10:20:11.726"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${PN_DIAG_APP_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:11.745" starttime="20190121 10:20:11.738"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:11.747" starttime="20190121 10:20:11.519"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:11.804" starttime="20190121 10:20:11.757"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:11.885" starttime="20190121 10:20:11.807"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:11.934" starttime="20190121 10:20:11.887"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:13.941">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:20:13.944" starttime="20190121 10:20:11.937"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:13.993" starttime="20190121 10:20:13.947"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:14.043" starttime="20190121 10:20:13.996"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:14.046" starttime="20190121 10:20:11.750"></status>
</kw>
<doc>Implements Test Task SKTB-13351</doc>
<tags>
<tag>FBUS</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:20:14.047" starttime="20190121 10:20:06.563"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:20:15.524">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:20:15.547">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:20:15.548" starttime="20190121 10:20:14.085"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:15.549" starttime="20190121 10:20:14.062"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:15.568" starttime="20190121 10:20:14.057"></status>
</kw>
<doc>Chorus Fbus Testing</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:20:15.569" starttime="20190121 10:20:03.899"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-34994.robot" name="SKTB-34994" id="s1-s6">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:16.209">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:20:16.229" starttime="20190121 10:20:16.168"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:16.237">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:20:16.246">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:20:18.415">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:20:18.417" starttime="20190121 10:20:16.231"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:18.429" starttime="20190121 10:20:16.163"></status>
</kw>
<test name="SKTB-34994 CAN 3 testing" id="s1-s6-t1">
<kw name="Test_precondition" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Test_precondition"</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:18.519">"Test_precondition"</msg>
<status status="PASS" endtime="20190121 10:20:18.531" starttime="20190121 10:20:18.515"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:18.640" starttime="20190121 10:20:18.534"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:18.738" starttime="20190121 10:20:18.643"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:20.762">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:20:20.764" starttime="20190121 10:20:18.757"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:20.814" starttime="20190121 10:20:20.767"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:21.821">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:20:21.823" starttime="20190121 10:20:20.817"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:21.868" starttime="20190121 10:20:21.826"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:24.891">Slept 3 seconds</msg>
<status status="PASS" endtime="20190121 10:20:24.894" starttime="20190121 10:20:21.882"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>ping ${HOST_IP}</arg>
<arg>shell=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:24.902">Starting process:
ping 192.168.1.101</msg>
<status status="PASS" endtime="20190121 10:20:24.930" starttime="20190121 10:20:24.897"></status>
</kw>
<kw name="WAIT_UNTIL_DEVICE_IS_READY">
<doc>Waiting for device to be ready, up to 90 seconds</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Waiting for device to be ready, up to 90 seconds\n</arg>
<arg>console=true</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:24.959">Waiting for device to be ready, up to 90 seconds
</msg>
<status status="PASS" endtime="20190121 10:20:24.961" starttime="20190121 10:20:24.954"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait until keyword succeeds</arg>
<arg>90</arg>
<arg>120x</arg>
<arg>check_dut_ip_ready</arg>
</arguments>
<assign>
<var>${STATUS}</var>
</assign>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>90</arg>
<arg>120x</arg>
<arg>check_dut_ip_ready</arg>
</arguments>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:24.994">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:25.021">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.042">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.045">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:25.046" starttime="20190121 10:20:24.987"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:25.060">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:25.061" starttime="20190121 10:20:25.050"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:25.072">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:25.074" starttime="20190121 10:20:25.064"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:25.077" starttime="20190121 10:20:24.978"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:25.218">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:25.244">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.265">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.268">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:25.269" starttime="20190121 10:20:25.208"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:25.282">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:25.283" starttime="20190121 10:20:25.273"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:25.294">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:25.296" starttime="20190121 10:20:25.286"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:25.299" starttime="20190121 10:20:25.200"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:25.436">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:25.463">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.483">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.486">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:25.488" starttime="20190121 10:20:25.430"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:25.501">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:25.502" starttime="20190121 10:20:25.492"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:25.513">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:25.514" starttime="20190121 10:20:25.505"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:25.517" starttime="20190121 10:20:25.422"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:25.655">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:25.681">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.701">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.705">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:25.706" starttime="20190121 10:20:25.648"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:25.718">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:25.719" starttime="20190121 10:20:25.709"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:25.731">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:25.733" starttime="20190121 10:20:25.722"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:25.736" starttime="20190121 10:20:25.640"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:25.874">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:25.900">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.920">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:25.923">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:25.924" starttime="20190121 10:20:25.867"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:25.938">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:25.939" starttime="20190121 10:20:25.928"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:25.949">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:25.951" starttime="20190121 10:20:25.942"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:25.954" starttime="20190121 10:20:25.859"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:26.138">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:26.268">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:26.305">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:26.313">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:26.314" starttime="20190121 10:20:26.126"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:26.377">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:26.378" starttime="20190121 10:20:26.345"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:26.395">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:26.397" starttime="20190121 10:20:26.381"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:26.400" starttime="20190121 10:20:26.103"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:26.592">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:26.680">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:26.724">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:26.727">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:26.728" starttime="20190121 10:20:26.586"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:26.769">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:26.770" starttime="20190121 10:20:26.732"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:26.808">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:26.810" starttime="20190121 10:20:26.780"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:26.813" starttime="20190121 10:20:26.563"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:26.950">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:26.977">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:26.998">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:27.002">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:27.003" starttime="20190121 10:20:26.944"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:27.024">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:27.025" starttime="20190121 10:20:27.006"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:27.035">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:27.037" starttime="20190121 10:20:27.027"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:27.040" starttime="20190121 10:20:26.936"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:27.178">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:27.204">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:27.224">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:27.227">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:27.229" starttime="20190121 10:20:27.171"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:27.241">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:27.242" starttime="20190121 10:20:27.232"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:27.253">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:27.254" starttime="20190121 10:20:27.245"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:27.258" starttime="20190121 10:20:27.163"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:27.399">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:27.428">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:27.450">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:27.453">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:27.454" starttime="20190121 10:20:27.392"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:27.467">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:27.468" starttime="20190121 10:20:27.458"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:27.479">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:27.481" starttime="20190121 10:20:27.471"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:27.484" starttime="20190121 10:20:27.384"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:27.621">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:27.648">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:27.668">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:27.671">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:27.672" starttime="20190121 10:20:27.615"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:27.685">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:27.685" starttime="20190121 10:20:27.676"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:27.696">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:27.698" starttime="20190121 10:20:27.688"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:27.701" starttime="20190121 10:20:27.607"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:27.838">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:27.864">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:27.884">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:27.887">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:27.888" starttime="20190121 10:20:27.832"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:27.901">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:27.902" starttime="20190121 10:20:27.892"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:27.912">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:27.914" starttime="20190121 10:20:27.905"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:27.917" starttime="20190121 10:20:27.824"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.055">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:28.081">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.101">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.104">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:28.105" starttime="20190121 10:20:28.049"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.118">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:28.119" starttime="20190121 10:20:28.109"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:28.130">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:28.131" starttime="20190121 10:20:28.122"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:28.134" starttime="20190121 10:20:28.040"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.275">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:28.301">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.321">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.324">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:28.326" starttime="20190121 10:20:28.269"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.338">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:28.339" starttime="20190121 10:20:28.329"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:28.350">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:28.351" starttime="20190121 10:20:28.342"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:28.354" starttime="20190121 10:20:28.258"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.492">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:28.518">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.538">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.542">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:28.542" starttime="20190121 10:20:28.486"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.555">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:28.556" starttime="20190121 10:20:28.546"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:28.567">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:28.568" starttime="20190121 10:20:28.559"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:28.571" starttime="20190121 10:20:28.477"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.709">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:28.735">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.756">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.759">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:28.759" starttime="20190121 10:20:28.702"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.772">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:28.773" starttime="20190121 10:20:28.763"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:28.784">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:28.785" starttime="20190121 10:20:28.776"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:28.789" starttime="20190121 10:20:28.694"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.927">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:28.952">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.972">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:28.976">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:28.977" starttime="20190121 10:20:28.920"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:28.990">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:28.990" starttime="20190121 10:20:28.981"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:29.001">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:29.003" starttime="20190121 10:20:28.993"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:29.006" starttime="20190121 10:20:28.912"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:29.147">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:29.173">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:29.193">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:29.197">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:29.198" starttime="20190121 10:20:29.137"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:29.210">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:29.211" starttime="20190121 10:20:29.201"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:29.223">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:29.224" starttime="20190121 10:20:29.215"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:29.227" starttime="20190121 10:20:29.129"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:29.365">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:29.391">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:29.411">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:29.414">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:29.415" starttime="20190121 10:20:29.358"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:29.428">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:29.429" starttime="20190121 10:20:29.419"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:29.440">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:29.441" starttime="20190121 10:20:29.432"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:29.444" starttime="20190121 10:20:29.350"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:29.582">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:29.608">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:29.628">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:29.631">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:29.632" starttime="20190121 10:20:29.575"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:29.645">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:29.645" starttime="20190121 10:20:29.636"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:29.656">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:29.658" starttime="20190121 10:20:29.648"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:29.660" starttime="20190121 10:20:29.567"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:29.798">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:29.824">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:29.845">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:29.848">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:29.849" starttime="20190121 10:20:29.792"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:29.862">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:29.862" starttime="20190121 10:20:29.853"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:29.873">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:29.875" starttime="20190121 10:20:29.865"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:29.878" starttime="20190121 10:20:29.784"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.020">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:30.046">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.065">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.069">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:30.070" starttime="20190121 10:20:30.010"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.083">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:30.084" starttime="20190121 10:20:30.074"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:30.095">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:30.096" starttime="20190121 10:20:30.087"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:30.099" starttime="20190121 10:20:30.001"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.237">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:30.263">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.283">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.286">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:30.287" starttime="20190121 10:20:30.230"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.300">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:30.301" starttime="20190121 10:20:30.291"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:30.312">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:30.314" starttime="20190121 10:20:30.303"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:30.317" starttime="20190121 10:20:30.222"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.455">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:30.481">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.501">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.504">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:30.505" starttime="20190121 10:20:30.448"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.526">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:30.527" starttime="20190121 10:20:30.518"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:30.538">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:30.539" starttime="20190121 10:20:30.530"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:30.543" starttime="20190121 10:20:30.440"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.680">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:30.706">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.726">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.729">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:30.730" starttime="20190121 10:20:30.674"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.743">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:30.744" starttime="20190121 10:20:30.734"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:30.755">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:30.756" starttime="20190121 10:20:30.747"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:30.759" starttime="20190121 10:20:30.666"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.900">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:30.926">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.947">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:30.950">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:30.951" starttime="20190121 10:20:30.890"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:30.963">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:30.964" starttime="20190121 10:20:30.954"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:30.975">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:30.977" starttime="20190121 10:20:30.967"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:30.980" starttime="20190121 10:20:30.882"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:31.118">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:31.144">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:31.164">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:31.167">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:31.168" starttime="20190121 10:20:31.111"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:31.181">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:31.182" starttime="20190121 10:20:31.172"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:31.193">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:31.194" starttime="20190121 10:20:31.185"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:31.197" starttime="20190121 10:20:31.103"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:31.335">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:31.361">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:31.382">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:31.385">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:31.386" starttime="20190121 10:20:31.328"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:31.399">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:31.399" starttime="20190121 10:20:31.390"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:31.410">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:31.413" starttime="20190121 10:20:31.402"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:31.416" starttime="20190121 10:20:31.320"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:31.553">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:31.579">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:31.599">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:31.602">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:31.603" starttime="20190121 10:20:31.547"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:31.616">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:31.617" starttime="20190121 10:20:31.607"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:31.628">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:31.629" starttime="20190121 10:20:31.620"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:31.632" starttime="20190121 10:20:31.539"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:31.774">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:31.800">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:31.820">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:31.823">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:31.824" starttime="20190121 10:20:31.763"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:31.837">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:31.837" starttime="20190121 10:20:31.827"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:31.848">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:31.849" starttime="20190121 10:20:31.840"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:31.853" starttime="20190121 10:20:31.755"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:31.990">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:32.017">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.037">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.040">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:32.041" starttime="20190121 10:20:31.983"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:32.054">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:32.055" starttime="20190121 10:20:32.045"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:32.066">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:32.067" starttime="20190121 10:20:32.058"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:32.070" starttime="20190121 10:20:31.975"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:32.208">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:32.234">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.254">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.257">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:32.258" starttime="20190121 10:20:32.201"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:32.271">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:32.271" starttime="20190121 10:20:32.262"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:32.282">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:32.284" starttime="20190121 10:20:32.274"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:32.287" starttime="20190121 10:20:32.193"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:32.424">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:32.450">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.470">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.474">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:32.475" starttime="20190121 10:20:32.418"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:32.487">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:32.488" starttime="20190121 10:20:32.478"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:32.499">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:32.500" starttime="20190121 10:20:32.491"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:32.503" starttime="20190121 10:20:32.410"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:32.649">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:32.675">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.696">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.699">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:32.700" starttime="20190121 10:20:32.639"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:32.712">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:32.713" starttime="20190121 10:20:32.703"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:32.724">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:32.725" starttime="20190121 10:20:32.716"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:32.729" starttime="20190121 10:20:32.631"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:32.866">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:32.893">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.914">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:32.918">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:32.918" starttime="20190121 10:20:32.860"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:32.931">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:32.932" starttime="20190121 10:20:32.922"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:32.943">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:32.944" starttime="20190121 10:20:32.935"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:32.947" starttime="20190121 10:20:32.852"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:33.086">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:33.113">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:33.133">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:33.136">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:33.137" starttime="20190121 10:20:33.079"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:33.150">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:33.151" starttime="20190121 10:20:33.141"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:33.162">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:33.163" starttime="20190121 10:20:33.154"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:33.166" starttime="20190121 10:20:33.070"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:33.304">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:33.330">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:33.350">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:33.353">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:33.354" starttime="20190121 10:20:33.298"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:33.367">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:33.368" starttime="20190121 10:20:33.358"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:33.378">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:33.380" starttime="20190121 10:20:33.370"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:33.383" starttime="20190121 10:20:33.290"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:33.527">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:33.553">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:33.575">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:33.578">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:33.579" starttime="20190121 10:20:33.515"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:33.593">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:33.593" starttime="20190121 10:20:33.583"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:33.604">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:33.606" starttime="20190121 10:20:33.596"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:33.609" starttime="20190121 10:20:33.506"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:33.748">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:33.774">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:33.794">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:33.797">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:33.799" starttime="20190121 10:20:33.741"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:33.811">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:33.812" starttime="20190121 10:20:33.802"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:33.823">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:33.824" starttime="20190121 10:20:33.815"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:33.827" starttime="20190121 10:20:33.732"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:33.998">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:34.074">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.096">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.099">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:34.100" starttime="20190121 10:20:33.983"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:34.113">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:34.114" starttime="20190121 10:20:34.104"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:34.124">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:34.126" starttime="20190121 10:20:34.116"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:34.129" starttime="20190121 10:20:33.966"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:34.267">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:34.294">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.314">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.318">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:34.319" starttime="20190121 10:20:34.260"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:34.331">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:34.332" starttime="20190121 10:20:34.322"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:34.343">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:34.344" starttime="20190121 10:20:34.335"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:34.347" starttime="20190121 10:20:34.252"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:34.488">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:34.517">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.538">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.541">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:34.542" starttime="20190121 10:20:34.478"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:34.554">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:34.555" starttime="20190121 10:20:34.545"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:34.566">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:34.567" starttime="20190121 10:20:34.558"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:34.570" starttime="20190121 10:20:34.470"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:34.708">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:34.735">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.756">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.759">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:34.760" starttime="20190121 10:20:34.702"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:34.773">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:34.774" starttime="20190121 10:20:34.764"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:34.785">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:34.787" starttime="20190121 10:20:34.777"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:34.790" starttime="20190121 10:20:34.694"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:34.929">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:34.955">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.977">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:34.980">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:34.981" starttime="20190121 10:20:34.921"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:34.996">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:34.997" starttime="20190121 10:20:34.985"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:35.008">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:35.009" starttime="20190121 10:20:34.999"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:35.013" starttime="20190121 10:20:34.913"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:35.151">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:35.177">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:35.198">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:35.201">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:35.202" starttime="20190121 10:20:35.144"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:35.215">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:35.216" starttime="20190121 10:20:35.206"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:35.226">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:35.228" starttime="20190121 10:20:35.219"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:35.231" starttime="20190121 10:20:35.136"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:35.380">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:35.407">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:35.427">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:35.430">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:35.431" starttime="20190121 10:20:35.362"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:35.445">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:35.445" starttime="20190121 10:20:35.435"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:35.456">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:35.458" starttime="20190121 10:20:35.448"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:35.461" starttime="20190121 10:20:35.354"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:35.599">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:35.625">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:35.645">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:35.648">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:35.649" starttime="20190121 10:20:35.592"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:35.662">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:35.663" starttime="20190121 10:20:35.653"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:35.674">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:35.676" starttime="20190121 10:20:35.666"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:35.679" starttime="20190121 10:20:35.584"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:35.816">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:35.842">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:35.862">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:35.865">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:35.866" starttime="20190121 10:20:35.810"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:35.879">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:35.880" starttime="20190121 10:20:35.870"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:35.890">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:35.892" starttime="20190121 10:20:35.883"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:35.895" starttime="20190121 10:20:35.802"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:36.033">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:36.060">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:36.080">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:36.083">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:36.084" starttime="20190121 10:20:36.026"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:36.098">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:36.098" starttime="20190121 10:20:36.088"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:36.109">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:36.110" starttime="20190121 10:20:36.101"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:36.114" starttime="20190121 10:20:36.018"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:36.284">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:36.315">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:36.335">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:36.338">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:36.339" starttime="20190121 10:20:36.270"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:36.352">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:36.353" starttime="20190121 10:20:36.343"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:36.364">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:36.365" starttime="20190121 10:20:36.356"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:36.368" starttime="20190121 10:20:36.242"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:36.506">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:36.533">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:36.553">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:36.556">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:36.557" starttime="20190121 10:20:36.500"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:36.570">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:36.571" starttime="20190121 10:20:36.561"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:36.582">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:36.584" starttime="20190121 10:20:36.574"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:36.587" starttime="20190121 10:20:36.491"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:36.756">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:36.806">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:36.845">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:36.847">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:36.849" starttime="20190121 10:20:36.731"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:36.904">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:36.905" starttime="20190121 10:20:36.852"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:36.926">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:36.928" starttime="20190121 10:20:36.908"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:36.932" starttime="20190121 10:20:36.714"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:37.085">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:37.112">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:37.163">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:37.172">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:37.173" starttime="20190121 10:20:37.079"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:37.253">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:37.254" starttime="20190121 10:20:37.203"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:37.312">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:37.314" starttime="20190121 10:20:37.276"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:37.321" starttime="20190121 10:20:37.070"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:37.575">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:37.638">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:37.675">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:37.694">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:37.695" starttime="20190121 10:20:37.506"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:37.761">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:37.762" starttime="20190121 10:20:37.727"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:37.815">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:37.854" starttime="20190121 10:20:37.785"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:37.858" starttime="20190121 10:20:37.450"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:38.046">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:38.145">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:38.207">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:38.241">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:38.242" starttime="20190121 10:20:38.009"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:38.326">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:38.326" starttime="20190121 10:20:38.286"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:38.378">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:38.380" starttime="20190121 10:20:38.334"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:38.403" starttime="20190121 10:20:37.981"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:38.576">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:38.646">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:38.683">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:38.686">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:38.687" starttime="20190121 10:20:38.550"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:38.728">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:38.729" starttime="20190121 10:20:38.704"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:38.753">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:38.755" starttime="20190121 10:20:38.733"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:38.772" starttime="20190121 10:20:38.531"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:38.946">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:39.018">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:39.042">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:39.045">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:39.046" starttime="20190121 10:20:38.923"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:39.071">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:39.072" starttime="20190121 10:20:39.062"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:39.109">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:39.110" starttime="20190121 10:20:39.085"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:39.113" starttime="20190121 10:20:38.905"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:39.317">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:39.410">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:39.479">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:39.486">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:39.487" starttime="20190121 10:20:39.269"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:39.561">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:39.562" starttime="20190121 10:20:39.506"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:39.606">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:39.608" starttime="20190121 10:20:39.590"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:39.651" starttime="20190121 10:20:39.249"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:39.877">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:39.946">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:39.991">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:39.994">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:39.995" starttime="20190121 10:20:39.814"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:40.035">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:40.036" starttime="20190121 10:20:40.007"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:40.057">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:40.075" starttime="20190121 10:20:40.048"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:40.079" starttime="20190121 10:20:39.780"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:40.238">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:40.290">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:40.319">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:40.323">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:40.324" starttime="20190121 10:20:40.221"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:40.368">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:40.369" starttime="20190121 10:20:40.337"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:40.384">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:40.386" starttime="20190121 10:20:40.372"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:40.389" starttime="20190121 10:20:40.206"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:40.560">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:40.629">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:40.668">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:40.671">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:40.672" starttime="20190121 10:20:40.533"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:40.715">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:40.716" starttime="20190121 10:20:40.676"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:40.748">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:40.750" starttime="20190121 10:20:40.719"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:40.753" starttime="20190121 10:20:40.518"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:40.926">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:41.011">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:41.035">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:41.038">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:41.039" starttime="20190121 10:20:40.910"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:41.065">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:41.073" starttime="20190121 10:20:41.055"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:41.104">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:41.106" starttime="20190121 10:20:41.076"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:41.109" starttime="20190121 10:20:40.881"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:41.275">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:41.346">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:41.379">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:41.382">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:41.383" starttime="20190121 10:20:41.256"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:41.408">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:41.409" starttime="20190121 10:20:41.387"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:41.440">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:41.441" starttime="20190121 10:20:41.412"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:41.457" starttime="20190121 10:20:41.248"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:41.595">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:41.621">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:41.641">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:41.644">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:41.645" starttime="20190121 10:20:41.588"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:41.659">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:41.660" starttime="20190121 10:20:41.649"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:41.671">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:41.672" starttime="20190121 10:20:41.663"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:41.675" starttime="20190121 10:20:41.580"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:41.813">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:41.839">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:41.860">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:41.863">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:41.864" starttime="20190121 10:20:41.806"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:41.877">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:41.878" starttime="20190121 10:20:41.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:41.888">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:41.890" starttime="20190121 10:20:41.881"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:41.893" starttime="20190121 10:20:41.798"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:42.031">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:42.058">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.079">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.082">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:42.082" starttime="20190121 10:20:42.024"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:42.099">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:42.100" starttime="20190121 10:20:42.086"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:42.111">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:42.113" starttime="20190121 10:20:42.103"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:42.116" starttime="20190121 10:20:42.016"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:42.263">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:42.289">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.309">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.313">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:42.314" starttime="20190121 10:20:42.252"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:42.327">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:42.328" starttime="20190121 10:20:42.318"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:42.338">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:42.340" starttime="20190121 10:20:42.331"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:42.343" starttime="20190121 10:20:42.244"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:42.482">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:42.508">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.528">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.531">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:42.532" starttime="20190121 10:20:42.475"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:42.545">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:42.546" starttime="20190121 10:20:42.536"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:42.556">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:42.558" starttime="20190121 10:20:42.548"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:42.561" starttime="20190121 10:20:42.466"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:42.698">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:42.726">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.747">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.750">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:42.751" starttime="20190121 10:20:42.692"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:42.763">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:42.769" starttime="20190121 10:20:42.754"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:42.782">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:42.783" starttime="20190121 10:20:42.773"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:42.786" starttime="20190121 10:20:42.684"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:42.924">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:42.950">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.971">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:42.974">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:42.975" starttime="20190121 10:20:42.918"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:43.033">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:43.034" starttime="20190121 10:20:42.978"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:43.045">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:43.055" starttime="20190121 10:20:43.037"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:43.059" starttime="20190121 10:20:42.909"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:43.196">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:43.222">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:43.242">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:43.246">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:43.246" starttime="20190121 10:20:43.189"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:43.261">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:43.262" starttime="20190121 10:20:43.252"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:43.273">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:43.274" starttime="20190121 10:20:43.265"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:43.277" starttime="20190121 10:20:43.182"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:43.415">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:43.442">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:43.468">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:43.471">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:43.475" starttime="20190121 10:20:43.408"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:43.488">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:43.489" starttime="20190121 10:20:43.479"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:43.504">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:43.505" starttime="20190121 10:20:43.492"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:43.508" starttime="20190121 10:20:43.401"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:43.647">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:43.673">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:43.694">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:43.697">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:43.698" starttime="20190121 10:20:43.640"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:43.710">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:43.711" starttime="20190121 10:20:43.701"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:43.722">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:43.724" starttime="20190121 10:20:43.714"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:43.728" starttime="20190121 10:20:43.631"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:43.866">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:43.892">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:43.914">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:43.918">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:43.919" starttime="20190121 10:20:43.859"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:43.931">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:43.932" starttime="20190121 10:20:43.922"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:43.948">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:43.949" starttime="20190121 10:20:43.935"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:43.952" starttime="20190121 10:20:43.851"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:44.090">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:44.116">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:44.137">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:44.139">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:44.141" starttime="20190121 10:20:44.083"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:44.153">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:44.154" starttime="20190121 10:20:44.144"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:44.165">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:44.166" starttime="20190121 10:20:44.157"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:44.169" starttime="20190121 10:20:44.075"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:44.307">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:44.334">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:44.354">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:44.357">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:44.358" starttime="20190121 10:20:44.301"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:44.371">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:44.373" starttime="20190121 10:20:44.362"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:44.384">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:44.385" starttime="20190121 10:20:44.375"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:44.389" starttime="20190121 10:20:44.293"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:44.527">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:44.553">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:44.573">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:44.576">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:44.577" starttime="20190121 10:20:44.520"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:44.590">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:44.591" starttime="20190121 10:20:44.581"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:44.602">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:44.603" starttime="20190121 10:20:44.594"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:44.606" starttime="20190121 10:20:44.512"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:44.744">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:44.772">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:44.792">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:44.795">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:44.796" starttime="20190121 10:20:44.738"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:44.809">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:44.810" starttime="20190121 10:20:44.800"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:44.824">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:44.826" starttime="20190121 10:20:44.813"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:44.829" starttime="20190121 10:20:44.729"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:45.001">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:45.070">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:45.095">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:45.098">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:45.099" starttime="20190121 10:20:44.986"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:45.140">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:45.141" starttime="20190121 10:20:45.111"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:45.160">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:45.162" starttime="20190121 10:20:45.144"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:45.165" starttime="20190121 10:20:44.958"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:45.303">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:45.329">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:45.350">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:45.353">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:45.354" starttime="20190121 10:20:45.296"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:45.368">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:45.369" starttime="20190121 10:20:45.358"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:45.380">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:45.381" starttime="20190121 10:20:45.372"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:45.385" starttime="20190121 10:20:45.288"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:45.523">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:45.549">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:45.570">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:45.573">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:45.574" starttime="20190121 10:20:45.516"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:45.587">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:45.588" starttime="20190121 10:20:45.578"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:45.598">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:45.600" starttime="20190121 10:20:45.591"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:45.603" starttime="20190121 10:20:45.508"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:45.741">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:45.826">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:45.873">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:45.876">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:45.877" starttime="20190121 10:20:45.734"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:45.904">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:45.905" starttime="20190121 10:20:45.881"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:45.943">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:45.944" starttime="20190121 10:20:45.914"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:45.948" starttime="20190121 10:20:45.726"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:46.124">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:46.163">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:46.194">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:46.198">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:46.199" starttime="20190121 10:20:46.098"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:46.214">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:46.214" starttime="20190121 10:20:46.202"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:46.260">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:46.295" starttime="20190121 10:20:46.230"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:46.299" starttime="20190121 10:20:46.078"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:46.437">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:46.490">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:46.519">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:46.521">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:46.522" starttime="20190121 10:20:46.430"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:46.536">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:46.537" starttime="20190121 10:20:46.526"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:46.548">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:46.549" starttime="20190121 10:20:46.540"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:46.553" starttime="20190121 10:20:46.422"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:46.692">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:46.726">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:46.747">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:46.750">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:46.751" starttime="20190121 10:20:46.684"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:46.764">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:46.765" starttime="20190121 10:20:46.755"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:46.775">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:46.777" starttime="20190121 10:20:46.768"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:46.780" starttime="20190121 10:20:46.676"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:46.918">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:46.945">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:46.965">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:46.969">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:46.970" starttime="20190121 10:20:46.911"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:46.982">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:46.983" starttime="20190121 10:20:46.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:46.994">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:46.999" starttime="20190121 10:20:46.986"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:47.002" starttime="20190121 10:20:46.903"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:47.140">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:47.166">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:47.187">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:47.190">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:47.191" starttime="20190121 10:20:47.134"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:47.203">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:47.204" starttime="20190121 10:20:47.195"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:47.215">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:47.217" starttime="20190121 10:20:47.207"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:47.220" starttime="20190121 10:20:47.126"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:47.358">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:47.385">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:47.405">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:47.408">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:47.409" starttime="20190121 10:20:47.351"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:47.423">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:47.424" starttime="20190121 10:20:47.414"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:47.435">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:47.437" starttime="20190121 10:20:47.427"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:47.440" starttime="20190121 10:20:47.343"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:47.578">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:47.604">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:47.624">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:47.627">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:47.628" starttime="20190121 10:20:47.571"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:47.641">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:47.642" starttime="20190121 10:20:47.632"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:47.653">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:47.654" starttime="20190121 10:20:47.645"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:47.657" starttime="20190121 10:20:47.563"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:47.795">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:47.823">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:47.843">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:47.846">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:47.847" starttime="20190121 10:20:47.789"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:47.860">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:47.861" starttime="20190121 10:20:47.851"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:47.875">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:47.877" starttime="20190121 10:20:47.864"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:47.880" starttime="20190121 10:20:47.781"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.018">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:48.045">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.065">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.068">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:48.069" starttime="20190121 10:20:48.011"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.082">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:48.083" starttime="20190121 10:20:48.073"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:48.093">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:48.095" starttime="20190121 10:20:48.085"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:48.098" starttime="20190121 10:20:48.003"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.236">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:48.263">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.283">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.286">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:48.287" starttime="20190121 10:20:48.229"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.299">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:48.300" starttime="20190121 10:20:48.290"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:48.311">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:48.312" starttime="20190121 10:20:48.303"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:48.315" starttime="20190121 10:20:48.221"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.454">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:48.481">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.501">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.504">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:48.505" starttime="20190121 10:20:48.447"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.518">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:48.519" starttime="20190121 10:20:48.509"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:48.530">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:48.531" starttime="20190121 10:20:48.522"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:48.535" starttime="20190121 10:20:48.439"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.673">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:48.699">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.719">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.722">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:48.723" starttime="20190121 10:20:48.666"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.736">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:48.737" starttime="20190121 10:20:48.727"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:48.760">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:48.762" starttime="20190121 10:20:48.740"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:48.765" starttime="20190121 10:20:48.658"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.904">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:48.931">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.951">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:48.954">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:48.955" starttime="20190121 10:20:48.896"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:48.968">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:48.969" starttime="20190121 10:20:48.959"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:48.980">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:48.981" starttime="20190121 10:20:48.972"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:48.984" starttime="20190121 10:20:48.888"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:49.123">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:49.149">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:49.170">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:49.173">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:49.174" starttime="20190121 10:20:49.116"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:49.186">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:49.187" starttime="20190121 10:20:49.178"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:49.198">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:49.200" starttime="20190121 10:20:49.190"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:49.203" starttime="20190121 10:20:49.108"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:49.341">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:49.367">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:49.387">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:49.390">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:49.391" starttime="20190121 10:20:49.334"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:49.404">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:49.405" starttime="20190121 10:20:49.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:49.416">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:49.418" starttime="20190121 10:20:49.408"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:49.421" starttime="20190121 10:20:49.326"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:49.559">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:49.586">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:49.607">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:49.610">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:49.611" starttime="20190121 10:20:49.552"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:49.624">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:49.625" starttime="20190121 10:20:49.615"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:49.636">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:49.637" starttime="20190121 10:20:49.628"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:49.640" starttime="20190121 10:20:49.544"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:49.801">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:49.878">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:49.915">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:49.918">${ret} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:20:49.919" starttime="20190121 10:20:49.789"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:49.949">${resp} = </msg>
<status status="PASS" endtime="20190121 10:20:49.950" starttime="20190121 10:20:49.927"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:20:49.977">'' does not contain 'usb_max'</msg>
<status status="FAIL" endtime="20190121 10:20:49.979" starttime="20190121 10:20:49.960"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="FAIL" endtime="20190121 10:20:49.986" starttime="20190121 10:20:49.764"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:50.206">Starting process:
ip a | grep usb_max</msg>
<msg level="INFO" timestamp="20190121 10:20:50.506">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:50.579">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:50.587">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:20:50.588" starttime="20190121 10:20:50.167"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:50.647">${resp} = 272: usb_max: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    inet 192.168.1.100/24 brd 192.168.1.255 scope global usb_max</msg>
<status status="PASS" endtime="20190121 10:20:50.656" starttime="20190121 10:20:50.611"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:50.691" starttime="20190121 10:20:50.659"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="PASS" endtime="20190121 10:20:50.707" starttime="20190121 10:20:50.110"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:50.709" starttime="20190121 10:20:24.972"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:20:50.710">${STATUS} = True</msg>
<status status="PASS" endtime="20190121 10:20:50.711" starttime="20190121 10:20:24.965"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DUT ready status: ${STATUS}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:50.736" starttime="20190121 10:20:50.714"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3 seconds</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:53.746">Slept 3 seconds</msg>
<status status="PASS" endtime="20190121 10:20:53.748" starttime="20190121 10:20:50.740"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:20:53.752">${status} = True</msg>
<status status="PASS" endtime="20190121 10:20:53.753" starttime="20190121 10:20:24.937"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${status}</arg>
<arg>Device does not exist</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:53.760" starttime="20190121 10:20:53.756"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Setup ssh"</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:53.767">"Setup ssh"</msg>
<status status="PASS" endtime="20190121 10:20:53.769" starttime="20190121 10:20:53.763"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2 min</arg>
<arg>2x</arg>
<arg>open_ssh_connection</arg>
<arg>${DUT}</arg>
<arg>&amp;{SSH}</arg>
</arguments>
<kw name="Open Ssh Connection" library="lairdcvs.testlibrary.TestLibrary">
<doc>Connect to DUT</doc>
<arguments>
<arg>${DUT}</arg>
<arg>&amp;{SSH}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:53.786">Creating None ssh connection to root:toor@192.168.1.101:22</msg>
<status status="PASS" endtime="20190121 10:20:55.690" starttime="20190121 10:20:53.779"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:55.692" starttime="20190121 10:20:53.772"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Setup ssh done!"</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:55.702">"Setup ssh done!"</msg>
<status status="PASS" endtime="20190121 10:20:55.704" starttime="20190121 10:20:55.695"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:55.707" starttime="20190121 10:20:18.480"></status>
</kw>
<kw name="cansend_500k">
<doc>Can 3 send message test with baudrate 500k</doc>
<kw name="cansend_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${500000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Start test with ${CAN_CH} and bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:55.734">Start test with can2 and bitrate: 500000</msg>
<status status="PASS" endtime="20190121 10:20:55.737" starttime="20190121 10:20:55.727"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:55.757" starttime="20190121 10:20:55.749"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:55.766">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:20:55.796">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:55.871">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:55.874">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:20:55.875" starttime="20190121 10:20:55.760"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:55.888" starttime="20190121 10:20:55.879"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:55.899">Starting process:
sudo ip link set can2 type can bitrate 500000</msg>
<msg level="INFO" timestamp="20190121 10:20:55.928">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:56.059">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:56.063">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:20:56.064" starttime="20190121 10:20:55.891"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:56.111" starttime="20190121 10:20:56.079"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:56.144">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:20:56.180">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:20:56.266">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:20:56.269">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:20:56.270" starttime="20190121 10:20:56.115"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:56.283" starttime="20190121 10:20:56.274"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:20:56.286" starttime="20190121 10:20:55.739"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:56.305" starttime="20190121 10:20:56.299"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:56.315">Sending command to DUT ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:20:56.416">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:20:56.418">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:20:56.419" starttime="20190121 10:20:56.308"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:56.942">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:20:56.944" starttime="20190121 10:20:56.422"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:56.954">Sending command to DUT ip link set can2 type can bitrate 500000</msg>
<msg level="INFO" timestamp="20190121 10:20:57.009">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:20:57.012">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:20:57.013" starttime="20190121 10:20:56.946"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:57.524">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:20:57.526" starttime="20190121 10:20:57.016"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:57.535">Sending command to DUT ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:20:57.590">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:20:57.592">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:20:57.593" starttime="20190121 10:20:57.529"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:58.108">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:20:58.110" starttime="20190121 10:20:57.596"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="PASS" endtime="20190121 10:20:58.112" starttime="20190121 10:20:56.289"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:58.322" starttime="20190121 10:20:58.115"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:58.371" starttime="20190121 10:20:58.325"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Create socket .. done</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:58.381" starttime="20190121 10:20:58.375"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:58.432" starttime="20190121 10:20:58.384"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>start sniffing</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:58.453" starttime="20190121 10:20:58.439"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:58.965">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:20:58.967" starttime="20190121 10:20:58.456"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message: ${CAN_FULLMSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:58.985" starttime="20190121 10:20:58.974"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:59.003">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:20:59.082">Returning data (, )</msg>
<status status="PASS" endtime="20190121 10:20:59.093" starttime="20190121 10:20:58.992"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:59.123">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:20:59.189">Returning data (, )</msg>
<status status="PASS" endtime="20190121 10:20:59.191" starttime="20190121 10:20:59.096"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:59.226">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:20:59.320">Returning data (, )</msg>
<status status="PASS" endtime="20190121 10:20:59.330" starttime="20190121 10:20:59.203"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:59.851">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:20:59.853" starttime="20190121 10:20:59.333"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:59.914">${res_list} = [{'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:20:59.089885', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:20:59.196725', 'id': '0x1a'}, {'payload': '11...</msg>
<status status="PASS" endtime="20190121 10:20:59.915" starttime="20190121 10:20:59.856"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:20:59.923">[{'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:20:59.089885', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:20:59.196725', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:20:59.324759', 'id': '0x1a'}]</msg>
<status status="PASS" endtime="20190121 10:20:59.926" starttime="20190121 10:20:59.918"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:59.934">Length is 3</msg>
<msg level="INFO" timestamp="20190121 10:20:59.938">${MSG_LENGTH} = 3</msg>
<status status="PASS" endtime="20190121 10:20:59.938" starttime="20190121 10:20:59.929"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:59.956" starttime="20190121 10:20:59.950"></status>
</kw>
<status status="PASS" endtime="20190121 10:20:59.958" starttime="20190121 10:20:59.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: Expected CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:20:59.986">Length is 3</msg>
<msg level="INFO" timestamp="20190121 10:20:59.988">${count} = 3</msg>
<status status="PASS" endtime="20190121 10:20:59.989" starttime="20190121 10:20:59.980"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:20:59.998" starttime="20190121 10:20:59.991"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.007">${msgcount} = 0</msg>
<status status="PASS" endtime="20190121 10:21:00.008" starttime="20190121 10:21:00.001"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:20:59.089885', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.022">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:00.023" starttime="20190121 10:21:00.016"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.033">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:00.034" starttime="20190121 10:21:00.026"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.045">${msgcount} = 1</msg>
<status status="PASS" endtime="20190121 10:21:00.046" starttime="20190121 10:21:00.037"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:00.046" starttime="20190121 10:21:00.013"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:20:59.196725', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.057">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:00.058" starttime="20190121 10:21:00.051"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.068">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:00.069" starttime="20190121 10:21:00.061"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.079">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:00.080" starttime="20190121 10:21:00.072"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:00.081" starttime="20190121 10:21:00.048"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:20:59.324759', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.092">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:00.093" starttime="20190121 10:21:00.086"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.103">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:00.104" starttime="20190121 10:21:00.096"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.114">${msgcount} = 3</msg>
<status status="PASS" endtime="20190121 10:21:00.115" starttime="20190121 10:21:00.107"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:00.116" starttime="20190121 10:21:00.083"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:00.116" starttime="20190121 10:21:00.009"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:00.126" starttime="20190121 10:21:00.119"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:00.136" starttime="20190121 10:21:00.129"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:00.139" starttime="20190121 10:20:59.969"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:00.140" starttime="20190121 10:20:59.961"></status>
</kw>
<timeout value="10 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:00.143" starttime="20190121 10:20:55.717"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:00.145" starttime="20190121 10:20:55.712"></status>
</kw>
<kw name="can_loopback_500k">
<doc>Can 3 loopback test with baudrate 500k</doc>
<kw name="can_loopback_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${500000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Can channel loopback: ${CAN_CH} with bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:00.167">Can channel loopback: can2 with bitrate: 500000</msg>
<status status="PASS" endtime="20190121 10:21:00.170" starttime="20190121 10:21:00.161"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:00.189" starttime="20190121 10:21:00.181"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.198">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:00.227">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:00.303">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:00.306">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:00.307" starttime="20190121 10:21:00.192"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:00.320" starttime="20190121 10:21:00.311"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.330">Starting process:
sudo ip link set can2 type can bitrate 500000</msg>
<msg level="INFO" timestamp="20190121 10:21:00.360">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:00.418">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:00.421">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:00.422" starttime="20190121 10:21:00.323"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:00.435" starttime="20190121 10:21:00.426"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.445">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:00.474">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:00.566">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:00.569">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:00.571" starttime="20190121 10:21:00.438"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:00.584" starttime="20190121 10:21:00.575"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:00.586" starttime="20190121 10:21:00.172"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:00.623" starttime="20190121 10:21:00.599"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:00.632">Sending command to DUT ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:00.677">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:00.679">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:00.680" starttime="20190121 10:21:00.626"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:01.195">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:01.198" starttime="20190121 10:21:00.683"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:01.207">Sending command to DUT ip link set can2 type can bitrate 500000</msg>
<msg level="INFO" timestamp="20190121 10:21:01.262">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:01.265">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:01.265" starttime="20190121 10:21:01.201"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:01.781">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:01.783" starttime="20190121 10:21:01.268"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:01.792">Sending command to DUT ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:01.841">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:01.844">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:01.845" starttime="20190121 10:21:01.786"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:02.359">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:02.362" starttime="20190121 10:21:01.848"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:02.364" starttime="20190121 10:21:00.589"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:02.373">Starting process:
ip -details link show can2</msg>
<msg level="INFO" timestamp="20190121 10:21:02.402">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:02.415">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:02.418">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:02.419" starttime="20190121 10:21:02.367"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>TNTBOX Setting: \n${ret.stdout}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:02.431" starttime="20190121 10:21:02.422"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:02.441">Sending command to DUT ip -details link show can2</msg>
<msg level="INFO" timestamp="20190121 10:21:02.515">Returning data (5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  	  bitrate 500000 sample-point 0.875  	  tq 125 prop-seg 6 phase-seg1 7 phase-seg2 2 sjw 1 	  can-phonet: tseg1 4..16 tseg2 2..8 sjw 1..4 brp 1..256 brp-inc 1 	  clock 64000000numtxqueues 1 numrxqueues 1, )</msg>
<msg level="INFO" timestamp="20190121 10:21:02.517">${ret} = ('5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  \t  bitrate 500000 sample-poi...</msg>
<status status="PASS" endtime="20190121 10:21:02.519" starttime="20190121 10:21:02.434"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DEVICE Setting: \n${ret}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:02.534" starttime="20190121 10:21:02.522"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:02.541">Sending command to DUT pkill candump</msg>
<msg level="INFO" timestamp="20190121 10:21:02.653">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:02.655">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:02.656" starttime="20190121 10:21:02.537"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Cancel candump before start it again</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:02.670" starttime="20190121 10:21:02.659"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:03.678">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:21:03.680" starttime="20190121 10:21:02.673"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>nohup candump -t a -D -B ${CAN_CH} ${CAN_CH} &gt; ${CANDUMP_FILE} &amp;</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:03.690">Sending command to DUT nohup candump -t a -D -B can2 can2 &gt; /root/candump.txt &amp;</msg>
<msg level="INFO" timestamp="20190121 10:21:03.734">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:03.736">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:03.737" starttime="20190121 10:21:03.683"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Start candump on the NAD: ${ret}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:03.751" starttime="20190121 10:21:03.740"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:04.257">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:04.260" starttime="20190121 10:21:03.753"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:04.267">Sending command to DUT ps aux | grep candump</msg>
<msg level="INFO" timestamp="20190121 10:21:04.356">Returning data (521 root      0:00 candump -t a -D -B can2 can2   522 root      0:00 sh -c ps aux | grep candump   524 root      0:00 grep candump, )</msg>
<msg level="INFO" timestamp="20190121 10:21:04.359">${ret} = ('521 root      0:00 candump -t a -D -B can2 can2   522 root      0:00 sh -c ps aux | grep candump   524 root      0:00 grep candump', '')</msg>
<status status="PASS" endtime="20190121 10:21:04.360" starttime="20190121 10:21:04.263"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: \n${ret}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:04.397" starttime="20190121 10:21:04.368"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:04.669" starttime="20190121 10:21:04.400"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:04.749" starttime="20190121 10:21:04.676"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:04.825" starttime="20190121 10:21:04.752"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:05.340">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:05.342" starttime="20190121 10:21:04.836"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG_EXT}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:05.364">Starting process:
cansend can2 18EF7777#FFEEEEDDFFAA1122</msg>
<msg level="INFO" timestamp="20190121 10:21:05.445">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:05.478">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:05.486">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:05.487" starttime="20190121 10:21:05.350"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:05.537" starttime="20190121 10:21:05.499"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:05.563">Starting process:
cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:21:05.640">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:05.666">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:05.670">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:05.671" starttime="20190121 10:21:05.549"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:05.713" starttime="20190121 10:21:05.680"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cat ${CANDUMP_FILE}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:05.738">Sending command to DUT cat /root/candump.txt</msg>
<msg level="INFO" timestamp="20190121 10:21:05.814">Returning data ((1548065526.902193)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548065527.088224)  can2       01A   [8]  11 22 33 44 55 66 77 BB, )</msg>
<msg level="INFO" timestamp="20190121 10:21:05.821">${ret} = ('(1548065526.902193)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548065527.088224)  can2       01A   [8]  11 22 33 44 55 66 77 BB', '')</msg>
<status status="PASS" endtime="20190121 10:21:05.845" starttime="20190121 10:21:05.724"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get CANmsg list: \n${ret}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:05.930" starttime="20190121 10:21:05.857"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:06.477">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:06.479" starttime="20190121 10:21:05.949"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:06.653">${res_list} = [{'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:05.489236', 'id': '0x18ef7777'}, {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:05.508316', 'id': '0x18ef7777'}, {'p...</msg>
<status status="PASS" endtime="20190121 10:21:06.654" starttime="20190121 10:21:06.490"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:06.697">[{'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:05.489236', 'id': '0x18ef7777'}, {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:05.508316', 'id': '0x18ef7777'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:05.684995', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:05.697107', 'id': '0x1a'}]</msg>
<status status="PASS" endtime="20190121 10:21:06.715" starttime="20190121 10:21:06.689"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:06.765">Length is 4</msg>
<msg level="INFO" timestamp="20190121 10:21:06.767">${MSG_LENGTH} = 4</msg>
<status status="PASS" endtime="20190121 10:21:06.767" starttime="20190121 10:21:06.720"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:06.884" starttime="20190121 10:21:06.838"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:06.885" starttime="20190121 10:21:06.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.031">Length is 4</msg>
<msg level="INFO" timestamp="20190121 10:21:07.033">${count} = 4</msg>
<status status="PASS" endtime="20190121 10:21:07.034" starttime="20190121 10:21:07.009"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:07.058" starttime="20190121 10:21:07.037"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.077">${msgcount} = 0</msg>
<status status="PASS" endtime="20190121 10:21:07.084" starttime="20190121 10:21:07.061"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:05.489236', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.118">${payload} = FFEEEEDDFFAA1122</msg>
<status status="PASS" endtime="20190121 10:21:07.119" starttime="20190121 10:21:07.104"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.143">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:07.144" starttime="20190121 10:21:07.127"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.160">${msgcount} = 1</msg>
<status status="PASS" endtime="20190121 10:21:07.161" starttime="20190121 10:21:07.153"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:07.162" starttime="20190121 10:21:07.100"></status>
</kw>
<kw name="${item_dict} = {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:05.508316', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.181">${payload} = FFEEEEDDFFAA1122</msg>
<status status="PASS" endtime="20190121 10:21:07.182" starttime="20190121 10:21:07.166"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.204">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:07.205" starttime="20190121 10:21:07.189"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.222">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:07.223" starttime="20190121 10:21:07.208"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:07.224" starttime="20190121 10:21:07.163"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:05.684995', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.247">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:07.247" starttime="20190121 10:21:07.237"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.271">${count} = 0</msg>
<status status="PASS" endtime="20190121 10:21:07.271" starttime="20190121 10:21:07.254"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.297">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:07.298" starttime="20190121 10:21:07.278"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:07.298" starttime="20190121 10:21:07.229"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:05.697107', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.316">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:07.317" starttime="20190121 10:21:07.303"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.340">${count} = 0</msg>
<status status="PASS" endtime="20190121 10:21:07.342" starttime="20190121 10:21:07.328"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.359">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:07.360" starttime="20190121 10:21:07.346"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:07.361" starttime="20190121 10:21:07.300"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:07.361" starttime="20190121 10:21:07.085"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:07.369" starttime="20190121 10:21:07.364"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:07.378" starttime="20190121 10:21:07.372"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:07.382" starttime="20190121 10:21:06.958"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:07.383" starttime="20190121 10:21:06.917"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.390">Sending command to DUT ps aux | grep candump</msg>
<msg level="INFO" timestamp="20190121 10:21:07.446">Returning data (521 root      0:00 candump -t a -D -B can2 can2   535 root      0:00 sh -c ps aux | grep candump   537 root      0:00 grep candump, )</msg>
<msg level="INFO" timestamp="20190121 10:21:07.449">${ret} = ('521 root      0:00 candump -t a -D -B can2 can2   535 root      0:00 sh -c ps aux | grep candump   537 root      0:00 grep candump', '')</msg>
<status status="PASS" endtime="20190121 10:21:07.450" starttime="20190121 10:21:07.386"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: ${ret}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:07.465" starttime="20190121 10:21:07.453"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:07.472">Sending command to DUT pkill candump</msg>
<msg level="INFO" timestamp="20190121 10:21:07.557">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:07.560">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:07.561" starttime="20190121 10:21:07.468"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:08.574">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:21:08.577" starttime="20190121 10:21:07.563"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:08.585" starttime="20190121 10:21:00.153"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:08.592" starttime="20190121 10:21:00.147"></status>
</kw>
<kw name="cansend_250k">
<doc>Can 3 send message test with baudrate 250k</doc>
<kw name="cansend_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Start test with ${CAN_CH} and bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:08.640">Start test with can2 and bitrate: 250000</msg>
<status status="PASS" endtime="20190121 10:21:08.644" starttime="20190121 10:21:08.626"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:08.669" starttime="20190121 10:21:08.658"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:08.681">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:08.730">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:08.845">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:08.848">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:08.857" starttime="20190121 10:21:08.674"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:08.877" starttime="20190121 10:21:08.861"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:08.901">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg level="INFO" timestamp="20190121 10:21:08.962">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:09.052">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:09.056">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:09.059" starttime="20190121 10:21:08.884"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:09.072" starttime="20190121 10:21:09.063"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:09.082">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:09.111">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:09.194">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:09.197">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:09.198" starttime="20190121 10:21:09.075"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:09.211" starttime="20190121 10:21:09.202"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:09.214" starttime="20190121 10:21:08.646"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:09.232" starttime="20190121 10:21:09.226"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:09.242">Sending command to DUT ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:09.272">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:09.275">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:09.276" starttime="20190121 10:21:09.235"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:09.799">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:09.801" starttime="20190121 10:21:09.279"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:09.811">Sending command to DUT ip link set can2 type can bitrate 250000</msg>
<msg level="INFO" timestamp="20190121 10:21:09.862">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:09.864">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:09.865" starttime="20190121 10:21:09.804"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:10.380">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:10.382" starttime="20190121 10:21:09.868"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:10.391">Sending command to DUT ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:10.421">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:10.424">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:10.425" starttime="20190121 10:21:10.385"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:10.939">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:10.941" starttime="20190121 10:21:10.427"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:10.944" starttime="20190121 10:21:09.216"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:11.099" starttime="20190121 10:21:10.947"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:11.156" starttime="20190121 10:21:11.110"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Create socket .. done</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:11.165" starttime="20190121 10:21:11.159"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:11.216" starttime="20190121 10:21:11.168"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>start sniffing</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:11.233" starttime="20190121 10:21:11.223"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:11.749">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:11.751" starttime="20190121 10:21:11.236"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message: ${CAN_FULLMSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:11.769" starttime="20190121 10:21:11.758"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:11.791">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:21:11.833">Returning data (, )</msg>
<status status="PASS" endtime="20190121 10:21:11.835" starttime="20190121 10:21:11.776"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:11.870">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:21:11.989">Returning data (, )</msg>
<status status="PASS" endtime="20190121 10:21:11.991" starttime="20190121 10:21:11.846"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:12.032">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:21:12.097">Returning data (, )</msg>
<status status="PASS" endtime="20190121 10:21:12.099" starttime="20190121 10:21:12.006"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:12.629">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:12.631" starttime="20190121 10:21:12.110"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.699">${res_list} = [{'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:11.842436', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:11.998642', 'id': '0x1a'}, {'payload': '11...</msg>
<status status="PASS" endtime="20190121 10:21:12.700" starttime="20190121 10:21:12.637"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:12.709">[{'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:11.842436', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:11.998642', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:12.105398', 'id': '0x1a'}]</msg>
<status status="PASS" endtime="20190121 10:21:12.712" starttime="20190121 10:21:12.703"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.720">Length is 3</msg>
<msg level="INFO" timestamp="20190121 10:21:12.722">${MSG_LENGTH} = 3</msg>
<status status="PASS" endtime="20190121 10:21:12.723" starttime="20190121 10:21:12.715"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:12.738" starttime="20190121 10:21:12.731"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:12.739" starttime="20190121 10:21:12.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: Expected CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.767">Length is 3</msg>
<msg level="INFO" timestamp="20190121 10:21:12.769">${count} = 3</msg>
<status status="PASS" endtime="20190121 10:21:12.770" starttime="20190121 10:21:12.762"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:12.779" starttime="20190121 10:21:12.773"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.789">${msgcount} = 0</msg>
<status status="PASS" endtime="20190121 10:21:12.790" starttime="20190121 10:21:12.782"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:11.842436', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.803">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:12.804" starttime="20190121 10:21:12.797"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.814">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:12.815" starttime="20190121 10:21:12.807"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.839">${msgcount} = 1</msg>
<status status="PASS" endtime="20190121 10:21:12.840" starttime="20190121 10:21:12.818"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:12.840" starttime="20190121 10:21:12.794"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:11.998642', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.859">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:12.860" starttime="20190121 10:21:12.845"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.878">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:12.879" starttime="20190121 10:21:12.863"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.901">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:12.902" starttime="20190121 10:21:12.882"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:12.902" starttime="20190121 10:21:12.842"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:12.105398', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.917">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:12.918" starttime="20190121 10:21:12.911"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.929">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:12.930" starttime="20190121 10:21:12.921"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:12.940">${msgcount} = 3</msg>
<status status="PASS" endtime="20190121 10:21:12.941" starttime="20190121 10:21:12.932"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:12.941" starttime="20190121 10:21:12.904"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:12.943" starttime="20190121 10:21:12.791"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:12.954" starttime="20190121 10:21:12.946"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:12.983" starttime="20190121 10:21:12.967"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:12.987" starttime="20190121 10:21:12.750"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:12.988" starttime="20190121 10:21:12.742"></status>
</kw>
<timeout value="10 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:12.991" starttime="20190121 10:21:08.609"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:12.998" starttime="20190121 10:21:08.595"></status>
</kw>
<kw name="can_loopback_250k">
<doc>Can 3 loopback test with baudrate 250k</doc>
<kw name="can_loopback_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Can channel loopback: ${CAN_CH} with bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:13.032">Can channel loopback: can2 with bitrate: 250000</msg>
<status status="PASS" endtime="20190121 10:21:13.035" starttime="20190121 10:21:13.025"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:13.055" starttime="20190121 10:21:13.047"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:13.064">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:13.093">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:13.168">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:13.171">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:13.172" starttime="20190121 10:21:13.058"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:13.185" starttime="20190121 10:21:13.176"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:13.195">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg level="INFO" timestamp="20190121 10:21:13.223">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:13.293">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:13.296">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:13.297" starttime="20190121 10:21:13.188"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:13.335" starttime="20190121 10:21:13.301"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:13.369">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:13.404">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:13.504">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:13.507">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:13.508" starttime="20190121 10:21:13.339"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:13.520" starttime="20190121 10:21:13.512"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:13.523" starttime="20190121 10:21:13.037"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:13.541" starttime="20190121 10:21:13.535"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:13.556">Sending command to DUT ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:13.599">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:13.602">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:13.603" starttime="20190121 10:21:13.544"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:14.118">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:14.120" starttime="20190121 10:21:13.606"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:14.129">Sending command to DUT ip link set can2 type can bitrate 250000</msg>
<msg level="INFO" timestamp="20190121 10:21:14.178">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:14.182">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:14.182" starttime="20190121 10:21:14.123"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:14.697">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:14.699" starttime="20190121 10:21:14.185"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:14.708">Sending command to DUT ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:14.757">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:14.760">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:14.761" starttime="20190121 10:21:14.702"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:15.276">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:15.278" starttime="20190121 10:21:14.764"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:15.282" starttime="20190121 10:21:13.525"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:15.290">Starting process:
ip -details link show can2</msg>
<msg level="INFO" timestamp="20190121 10:21:15.319">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:15.332">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:15.335">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:15.335" starttime="20190121 10:21:15.285"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>TNTBOX Setting: \n${ret.stdout}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:15.348" starttime="20190121 10:21:15.339"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:15.356">Sending command to DUT ip -details link show can2</msg>
<msg level="INFO" timestamp="20190121 10:21:15.408">Returning data (5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  	  bitrate 250000 sample-point 0.875  	  tq 250 prop-seg 6 phase-seg1 7 phase-seg2 2 sjw 1 	  can-phonet: tseg1 4..16 tseg2 2..8 sjw 1..4 brp 1..256 brp-inc 1 	  clock 64000000numtxqueues 1 numrxqueues 1, )</msg>
<msg level="INFO" timestamp="20190121 10:21:15.411">${ret} = ('5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  \t  bitrate 250000 sample-poi...</msg>
<status status="PASS" endtime="20190121 10:21:15.412" starttime="20190121 10:21:15.351"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DEVICE Setting: \n${ret}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:15.429" starttime="20190121 10:21:15.415"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:15.435">Sending command to DUT pkill candump</msg>
<msg level="INFO" timestamp="20190121 10:21:15.541">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:15.544">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:15.545" starttime="20190121 10:21:15.431"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Cancel candump before start it again</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:15.557" starttime="20190121 10:21:15.548"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:16.564">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:21:16.566" starttime="20190121 10:21:15.560"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>nohup candump -t a -D -B ${CAN_CH} ${CAN_CH} &gt; ${CANDUMP_FILE} &amp;</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:16.575">Sending command to DUT nohup candump -t a -D -B can2 can2 &gt; /root/candump.txt &amp;</msg>
<msg level="INFO" timestamp="20190121 10:21:16.618">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:16.620">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:16.621" starttime="20190121 10:21:16.569"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Start candump on the NAD: ${ret}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:16.636" starttime="20190121 10:21:16.624"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:17.143">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:17.145" starttime="20190121 10:21:16.639"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:17.151">Sending command to DUT ps aux | grep candump</msg>
<msg level="INFO" timestamp="20190121 10:21:17.237">Returning data (572 root      0:00 candump -t a -D -B can2 can2   573 root      0:00 sh -c ps aux | grep candump   575 root      0:00 grep candump, )</msg>
<msg level="INFO" timestamp="20190121 10:21:17.240">${ret} = ('572 root      0:00 candump -t a -D -B can2 can2   573 root      0:00 sh -c ps aux | grep candump   575 root      0:00 grep candump', '')</msg>
<status status="PASS" endtime="20190121 10:21:17.241" starttime="20190121 10:21:17.148"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: \n${ret}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:17.256" starttime="20190121 10:21:17.243"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:17.417" starttime="20190121 10:21:17.259"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:17.465" starttime="20190121 10:21:17.420"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:17.515" starttime="20190121 10:21:17.468"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:18.031">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:18.033" starttime="20190121 10:21:17.522"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG_EXT}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:18.050">Starting process:
cansend can2 18EF7777#FFEEEEDDFFAA1122</msg>
<msg level="INFO" timestamp="20190121 10:21:18.104">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:18.128">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:18.131">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:18.132" starttime="20190121 10:21:18.036"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:18.161" starttime="20190121 10:21:18.140"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:18.185">Starting process:
cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:21:18.246">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:18.269">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:18.271">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:18.273" starttime="20190121 10:21:18.168"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:18.307" starttime="20190121 10:21:18.281"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cat ${CANDUMP_FILE}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:18.321">Sending command to DUT cat /root/candump.txt</msg>
<msg level="INFO" timestamp="20190121 10:21:18.379">Returning data ((1548066078.107615)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548066078.248401)  can2       01A   [8]  11 22 33 44 55 66 77 BB, )</msg>
<msg level="INFO" timestamp="20190121 10:21:18.386">${ret} = ('(1548066078.107615)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548066078.248401)  can2       01A   [8]  11 22 33 44 55 66 77 BB', '')</msg>
<status status="PASS" endtime="20190121 10:21:18.387" starttime="20190121 10:21:18.310"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get CANmsg list: \n${ret}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:18.421" starttime="20190121 10:21:18.394"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:18.932">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:18.934" starttime="20190121 10:21:18.428"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.019">${res_list} = [{'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:18.133648', 'id': '0x18ef7777'}, {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:18.144255', 'id': '0x18ef7777'}, {'p...</msg>
<status status="PASS" endtime="20190121 10:21:19.020" starttime="20190121 10:21:18.941"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:19.040">[{'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:18.133648', 'id': '0x18ef7777'}, {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:18.144255', 'id': '0x18ef7777'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:18.277429', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:18.288065', 'id': '0x1a'}]</msg>
<status status="PASS" endtime="20190121 10:21:19.054" starttime="20190121 10:21:19.023"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.062">Length is 4</msg>
<msg level="INFO" timestamp="20190121 10:21:19.075">${MSG_LENGTH} = 4</msg>
<status status="PASS" endtime="20190121 10:21:19.076" starttime="20190121 10:21:19.058"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:19.099" starttime="20190121 10:21:19.085"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:19.100" starttime="20190121 10:21:19.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.124">Length is 4</msg>
<msg level="INFO" timestamp="20190121 10:21:19.126">${count} = 4</msg>
<status status="PASS" endtime="20190121 10:21:19.127" starttime="20190121 10:21:19.120"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:19.135" starttime="20190121 10:21:19.130"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.143">${msgcount} = 0</msg>
<status status="PASS" endtime="20190121 10:21:19.144" starttime="20190121 10:21:19.138"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:18.133648', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.157">${payload} = FFEEEEDDFFAA1122</msg>
<status status="PASS" endtime="20190121 10:21:19.157" starttime="20190121 10:21:19.151"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.168">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:19.169" starttime="20190121 10:21:19.160"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.178">${msgcount} = 1</msg>
<status status="PASS" endtime="20190121 10:21:19.178" starttime="20190121 10:21:19.171"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:19.179" starttime="20190121 10:21:19.148"></status>
</kw>
<kw name="${item_dict} = {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:18.144255', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.189">${payload} = FFEEEEDDFFAA1122</msg>
<status status="PASS" endtime="20190121 10:21:19.190" starttime="20190121 10:21:19.184"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.201">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:19.202" starttime="20190121 10:21:19.193"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.211">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:19.212" starttime="20190121 10:21:19.205"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:19.213" starttime="20190121 10:21:19.181"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:18.277429', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.222">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:19.223" starttime="20190121 10:21:19.217"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.234">${count} = 0</msg>
<status status="PASS" endtime="20190121 10:21:19.236" starttime="20190121 10:21:19.226"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.248">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:19.249" starttime="20190121 10:21:19.241"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:19.249" starttime="20190121 10:21:19.214"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:18.288065', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.259">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:19.260" starttime="20190121 10:21:19.254"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.270">${count} = 0</msg>
<status status="PASS" endtime="20190121 10:21:19.271" starttime="20190121 10:21:19.263"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.280">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:19.281" starttime="20190121 10:21:19.274"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:19.282" starttime="20190121 10:21:19.251"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:19.282" starttime="20190121 10:21:19.145"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:19.290" starttime="20190121 10:21:19.285"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:19.311" starttime="20190121 10:21:19.294"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:19.314" starttime="20190121 10:21:19.111"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:19.316" starttime="20190121 10:21:19.103"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.334">Sending command to DUT ps aux | grep candump</msg>
<msg level="INFO" timestamp="20190121 10:21:19.445">Returning data (572 root      0:00 candump -t a -D -B can2 can2   579 root      0:00 sh -c ps aux | grep candump   581 root      0:00 grep candump, )</msg>
<msg level="INFO" timestamp="20190121 10:21:19.448">${ret} = ('572 root      0:00 candump -t a -D -B can2 can2   579 root      0:00 sh -c ps aux | grep candump   581 root      0:00 grep candump', '')</msg>
<status status="PASS" endtime="20190121 10:21:19.449" starttime="20190121 10:21:19.318"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: ${ret}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:19.472" starttime="20190121 10:21:19.452"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:19.478">Sending command to DUT pkill candump</msg>
<msg level="INFO" timestamp="20190121 10:21:19.588">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:19.591">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:19.591" starttime="20190121 10:21:19.475"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:20.605">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:21:20.607" starttime="20190121 10:21:19.594"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:20.609" starttime="20190121 10:21:13.006"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:20.612" starttime="20190121 10:21:13.000"></status>
</kw>
<kw name="cansend_125k">
<doc>Can 3 send message test with baudrate 125k</doc>
<kw name="cansend_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${125000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Start test with ${CAN_CH} and bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:20.636">Start test with can2 and bitrate: 125000</msg>
<status status="PASS" endtime="20190121 10:21:20.639" starttime="20190121 10:21:20.630"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:20.658" starttime="20190121 10:21:20.651"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:20.671">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:20.707">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:20.787">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:20.790">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:20.791" starttime="20190121 10:21:20.661"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:20.804" starttime="20190121 10:21:20.795"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:20.815">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg level="INFO" timestamp="20190121 10:21:20.843">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:20.900">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:20.903">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:20.905" starttime="20190121 10:21:20.807"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:20.917" starttime="20190121 10:21:20.908"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:20.927">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:20.956">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:21.042">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:21.045">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:21.046" starttime="20190121 10:21:20.920"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:21.059" starttime="20190121 10:21:21.050"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:21.062" starttime="20190121 10:21:20.641"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:21.082" starttime="20190121 10:21:21.076"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:21.092">Sending command to DUT ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:21.147">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:21.150">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:21.151" starttime="20190121 10:21:21.085"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:21.676">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:21.678" starttime="20190121 10:21:21.170"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:21.687">Sending command to DUT ip link set can2 type can bitrate 125000</msg>
<msg level="INFO" timestamp="20190121 10:21:21.737">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:21.740">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:21.741" starttime="20190121 10:21:21.681"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:22.255">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:22.258" starttime="20190121 10:21:21.744"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:22.267">Sending command to DUT ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:22.297">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:22.300">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:22.301" starttime="20190121 10:21:22.261"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:22.816">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:22.818" starttime="20190121 10:21:22.304"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:22.820" starttime="20190121 10:21:21.065"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:22.977" starttime="20190121 10:21:22.823"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:23.034" starttime="20190121 10:21:22.981"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Create socket .. done</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:23.044" starttime="20190121 10:21:23.038"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:23.094" starttime="20190121 10:21:23.047"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>start sniffing</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:23.113" starttime="20190121 10:21:23.102"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:23.628">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:23.630" starttime="20190121 10:21:23.122"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message: ${CAN_FULLMSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:23.653" starttime="20190121 10:21:23.637"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:23.667">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:21:23.719">Returning data (, )</msg>
<status status="PASS" endtime="20190121 10:21:23.726" starttime="20190121 10:21:23.656"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:23.763">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:21:23.822">Returning data (, )</msg>
<status status="PASS" endtime="20190121 10:21:23.824" starttime="20190121 10:21:23.747"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:23.865">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:21:23.937">Returning data (, )</msg>
<status status="PASS" endtime="20190121 10:21:23.939" starttime="20190121 10:21:23.833"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:24.468">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:24.470" starttime="20190121 10:21:23.947"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.535">${res_list} = [{'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:23.732764', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:23.836371', 'id': '0x1a'}, {'payload': '11...</msg>
<status status="PASS" endtime="20190121 10:21:24.537" starttime="20190121 10:21:24.477"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:24.545">[{'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:23.732764', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:23.836371', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:23.952649', 'id': '0x1a'}]</msg>
<status status="PASS" endtime="20190121 10:21:24.548" starttime="20190121 10:21:24.540"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.557">Length is 3</msg>
<msg level="INFO" timestamp="20190121 10:21:24.559">${MSG_LENGTH} = 3</msg>
<status status="PASS" endtime="20190121 10:21:24.560" starttime="20190121 10:21:24.551"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:24.575" starttime="20190121 10:21:24.568"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:24.576" starttime="20190121 10:21:24.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: Expected CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.605">Length is 3</msg>
<msg level="INFO" timestamp="20190121 10:21:24.607">${count} = 3</msg>
<status status="PASS" endtime="20190121 10:21:24.608" starttime="20190121 10:21:24.599"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:24.619" starttime="20190121 10:21:24.612"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.628">${msgcount} = 0</msg>
<status status="PASS" endtime="20190121 10:21:24.629" starttime="20190121 10:21:24.622"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:23.732764', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.645">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:24.646" starttime="20190121 10:21:24.637"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.657">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:24.658" starttime="20190121 10:21:24.649"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.671">${msgcount} = 1</msg>
<status status="PASS" endtime="20190121 10:21:24.672" starttime="20190121 10:21:24.661"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:24.673" starttime="20190121 10:21:24.634"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:23.836371', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.683">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:24.684" starttime="20190121 10:21:24.677"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.698">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:24.698" starttime="20190121 10:21:24.687"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.720">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:24.721" starttime="20190121 10:21:24.701"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:24.722" starttime="20190121 10:21:24.674"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:23.952649', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.743">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:24.752" starttime="20190121 10:21:24.736"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.768">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:24.769" starttime="20190121 10:21:24.755"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.779">${msgcount} = 3</msg>
<status status="PASS" endtime="20190121 10:21:24.780" starttime="20190121 10:21:24.772"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:24.781" starttime="20190121 10:21:24.724"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:24.781" starttime="20190121 10:21:24.630"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:24.790" starttime="20190121 10:21:24.784"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:24.801" starttime="20190121 10:21:24.794"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:24.805" starttime="20190121 10:21:24.587"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:24.806" starttime="20190121 10:21:24.579"></status>
</kw>
<timeout value="10 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:24.808" starttime="20190121 10:21:20.620"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:24.811" starttime="20190121 10:21:20.614"></status>
</kw>
<kw name="can_loopback_125k">
<doc>Can 3 loopback test with baudrate 125k</doc>
<kw name="can_loopback_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${125000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Can channel loopback: ${CAN_CH} with bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:24.832">Can channel loopback: can2 with bitrate: 125000</msg>
<status status="PASS" endtime="20190121 10:21:24.835" starttime="20190121 10:21:24.827"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:24.854" starttime="20190121 10:21:24.846"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.863">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:24.891">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:24.968">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:24.971">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:24.973" starttime="20190121 10:21:24.857"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:24.985" starttime="20190121 10:21:24.976"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:24.996">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg level="INFO" timestamp="20190121 10:21:25.027">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:25.084">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:25.087">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:25.089" starttime="20190121 10:21:24.988"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:25.101" starttime="20190121 10:21:25.092"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:25.110">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:25.139">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:25.224">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:25.227">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:25.227" starttime="20190121 10:21:25.104"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:25.240" starttime="20190121 10:21:25.231"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:25.243" starttime="20190121 10:21:24.837"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:25.261" starttime="20190121 10:21:25.255"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:25.270">Sending command to DUT ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:21:25.327">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:25.330">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:25.330" starttime="20190121 10:21:25.264"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:25.846">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:25.847" starttime="20190121 10:21:25.333"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:25.857">Sending command to DUT ip link set can2 type can bitrate 125000</msg>
<msg level="INFO" timestamp="20190121 10:21:25.916">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:25.927">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:25.928" starttime="20190121 10:21:25.850"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:26.438">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:26.440" starttime="20190121 10:21:25.932"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:26.449">Sending command to DUT ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:21:26.498">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:26.501">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:26.501" starttime="20190121 10:21:26.443"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:27.016">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:27.019" starttime="20190121 10:21:26.505"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:27.021" starttime="20190121 10:21:25.245"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:27.030">Starting process:
ip -details link show can2</msg>
<msg level="INFO" timestamp="20190121 10:21:27.059">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:27.072">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:27.075">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:27.076" starttime="20190121 10:21:27.025"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>TNTBOX Setting: \n${ret.stdout}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:27.088" starttime="20190121 10:21:27.080"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:27.096">Sending command to DUT ip -details link show can2</msg>
<msg level="INFO" timestamp="20190121 10:21:27.150">Returning data (5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  	  bitrate 125000 sample-point 0.875  	  tq 500 prop-seg 6 phase-seg1 7 phase-seg2 2 sjw 1 	  can-phonet: tseg1 4..16 tseg2 2..8 sjw 1..4 brp 1..256 brp-inc 1 	  clock 64000000numtxqueues 1 numrxqueues 1, )</msg>
<msg level="INFO" timestamp="20190121 10:21:27.153">${ret} = ('5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  \t  bitrate 125000 sample-poi...</msg>
<status status="PASS" endtime="20190121 10:21:27.154" starttime="20190121 10:21:27.091"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DEVICE Setting: \n${ret}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:27.170" starttime="20190121 10:21:27.157"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:27.177">Sending command to DUT pkill candump</msg>
<msg level="INFO" timestamp="20190121 10:21:27.284">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:27.286">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:27.287" starttime="20190121 10:21:27.173"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Cancel candump before start it again</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:27.299" starttime="20190121 10:21:27.290"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:28.309">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:21:28.311" starttime="20190121 10:21:27.302"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>nohup candump -t a -D -B ${CAN_CH} ${CAN_CH} &gt; ${CANDUMP_FILE} &amp;</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:28.321">Sending command to DUT nohup candump -t a -D -B can2 can2 &gt; /root/candump.txt &amp;</msg>
<msg level="INFO" timestamp="20190121 10:21:28.354">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:28.356">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:28.357" starttime="20190121 10:21:28.314"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Start candump on the NAD: ${ret}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:28.367" starttime="20190121 10:21:28.360"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:28.873">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:28.875" starttime="20190121 10:21:28.369"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:28.882">Sending command to DUT ps aux | grep candump</msg>
<msg level="INFO" timestamp="20190121 10:21:28.964">Returning data (595 root      0:00 candump -t a -D -B can2 can2   600 root      0:00 sh -c ps aux | grep candump   602 root      0:00 grep candump, )</msg>
<msg level="INFO" timestamp="20190121 10:21:28.966">${ret} = ('595 root      0:00 candump -t a -D -B can2 can2   600 root      0:00 sh -c ps aux | grep candump   602 root      0:00 grep candump', '')</msg>
<status status="PASS" endtime="20190121 10:21:28.967" starttime="20190121 10:21:28.878"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: \n${ret}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:28.983" starttime="20190121 10:21:28.970"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:29.145" starttime="20190121 10:21:28.986"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:29.193" starttime="20190121 10:21:29.148"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:29.243" starttime="20190121 10:21:29.196"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:29.759">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:29.761" starttime="20190121 10:21:29.250"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG_EXT}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:29.779">Starting process:
cansend can2 18EF7777#FFEEEEDDFFAA1122</msg>
<msg level="INFO" timestamp="20190121 10:21:29.833">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:29.858">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:29.862">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:29.863" starttime="20190121 10:21:29.768"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:29.895" starttime="20190121 10:21:29.877"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:29.917">Starting process:
cansend can2 01A#11223344556677BB</msg>
<msg level="INFO" timestamp="20190121 10:21:29.970">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:29.987">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:29.990">${ret} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:29.991" starttime="20190121 10:21:29.898"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:30.026" starttime="20190121 10:21:30.003"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cat ${CANDUMP_FILE}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.043">Sending command to DUT cat /root/candump.txt</msg>
<msg level="INFO" timestamp="20190121 10:21:30.102">Returning data ((1548066089.816456)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548066089.948464)  can2       01A   [8]  11 22 33 44 55 66 77 BB, )</msg>
<msg level="INFO" timestamp="20190121 10:21:30.105">${ret} = ('(1548066089.816456)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548066089.948464)  can2       01A   [8]  11 22 33 44 55 66 77 BB', '')</msg>
<status status="PASS" endtime="20190121 10:21:30.106" starttime="20190121 10:21:30.029"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get CANmsg list: \n${ret}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:30.143" starttime="20190121 10:21:30.126"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:30.654">Slept 500 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:30.656" starttime="20190121 10:21:30.146"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.717">${res_list} = [{'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:29.869099', 'id': '0x18ef7777'}, {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:29.881082', 'id': '0x18ef7777'}, {'p...</msg>
<status status="PASS" endtime="20190121 10:21:30.718" starttime="20190121 10:21:30.659"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:30.732">[{'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:29.869099', 'id': '0x18ef7777'}, {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:29.881082', 'id': '0x18ef7777'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:29.997542', 'id': '0x1a'}, {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:30.008398', 'id': '0x1a'}]</msg>
<status status="PASS" endtime="20190121 10:21:30.737" starttime="20190121 10:21:30.727"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.745">Length is 4</msg>
<msg level="INFO" timestamp="20190121 10:21:30.747">${MSG_LENGTH} = 4</msg>
<status status="PASS" endtime="20190121 10:21:30.747" starttime="20190121 10:21:30.741"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:30.766" starttime="20190121 10:21:30.757"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:30.767" starttime="20190121 10:21:30.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.791">Length is 4</msg>
<msg level="INFO" timestamp="20190121 10:21:30.793">${count} = 4</msg>
<status status="PASS" endtime="20190121 10:21:30.793" starttime="20190121 10:21:30.787"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:30.801" starttime="20190121 10:21:30.796"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.809">${msgcount} = 0</msg>
<status status="PASS" endtime="20190121 10:21:30.810" starttime="20190121 10:21:30.805"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:29.869099', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.823">${payload} = FFEEEEDDFFAA1122</msg>
<status status="PASS" endtime="20190121 10:21:30.823" starttime="20190121 10:21:30.818"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.835">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:30.836" starttime="20190121 10:21:30.827"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.845">${msgcount} = 1</msg>
<status status="PASS" endtime="20190121 10:21:30.846" starttime="20190121 10:21:30.839"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:30.847" starttime="20190121 10:21:30.814"></status>
</kw>
<kw name="${item_dict} = {'payload': 'FFEEEEDDFFAA1122', 'timestamp': '21-01-2019 - 10:21:29.881082', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.857">${payload} = FFEEEEDDFFAA1122</msg>
<status status="PASS" endtime="20190121 10:21:30.858" starttime="20190121 10:21:30.852"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.869">${count} = 1</msg>
<status status="PASS" endtime="20190121 10:21:30.870" starttime="20190121 10:21:30.861"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.878">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:30.879" starttime="20190121 10:21:30.872"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:30.880" starttime="20190121 10:21:30.848"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:29.997542', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.890">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:30.890" starttime="20190121 10:21:30.885"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.901">${count} = 0</msg>
<status status="PASS" endtime="20190121 10:21:30.902" starttime="20190121 10:21:30.893"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.911">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:30.912" starttime="20190121 10:21:30.905"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:30.912" starttime="20190121 10:21:30.882"></status>
</kw>
<kw name="${item_dict} = {'payload': '11223344556677BB', 'timestamp': '21-01-2019 - 10:21:30.008398', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.922">${payload} = 11223344556677BB</msg>
<status status="PASS" endtime="20190121 10:21:30.923" starttime="20190121 10:21:30.917"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.933">${count} = 0</msg>
<status status="PASS" endtime="20190121 10:21:30.934" starttime="20190121 10:21:30.926"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.943">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:21:30.944" starttime="20190121 10:21:30.937"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:30.945" starttime="20190121 10:21:30.914"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:30.946" starttime="20190121 10:21:30.811"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:30.953" starttime="20190121 10:21:30.948"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:30.962" starttime="20190121 10:21:30.956"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:30.966" starttime="20190121 10:21:30.778"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:30.967" starttime="20190121 10:21:30.770"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:30.974">Sending command to DUT ps aux | grep candump</msg>
<msg level="INFO" timestamp="20190121 10:21:31.051">Returning data (595 root      0:00 candump -t a -D -B can2 can2   604 root      0:00 sh -c ps aux | grep candump   606 root      0:00 grep candump, )</msg>
<msg level="INFO" timestamp="20190121 10:21:31.054">${ret} = ('595 root      0:00 candump -t a -D -B can2 can2   604 root      0:00 sh -c ps aux | grep candump   606 root      0:00 grep candump', '')</msg>
<status status="PASS" endtime="20190121 10:21:31.056" starttime="20190121 10:21:30.970"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: ${ret}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:31.067" starttime="20190121 10:21:31.059"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:31.074">Sending command to DUT pkill candump</msg>
<msg level="INFO" timestamp="20190121 10:21:31.172">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:31.175">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:31.175" starttime="20190121 10:21:31.070"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:32.189">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:21:32.191" starttime="20190121 10:21:31.178"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:32.193" starttime="20190121 10:21:24.819"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:32.196" starttime="20190121 10:21:24.813"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>pkill ping</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:32.213">Starting process:
pkill ping</msg>
<msg level="INFO" timestamp="20190121 10:21:32.241">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:32.274">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:32.277">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:32.278" starttime="20190121 10:21:32.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Test_Teardown_Action"</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:32.286">"Test_Teardown_Action"</msg>
<status status="PASS" endtime="20190121 10:21:32.289" starttime="20190121 10:21:32.282"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>systemctl poweroff</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:32.296">Sending command to DUT systemctl poweroff</msg>
<msg level="INFO" timestamp="20190121 10:21:32.393">Returning data (, )</msg>
<msg level="INFO" timestamp="20190121 10:21:32.395">${ret} = ('', '')</msg>
<status status="PASS" endtime="20190121 10:21:32.396" starttime="20190121 10:21:32.292"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${SHUTDOWN_TIME}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:47.410">Slept 15 seconds</msg>
<status status="PASS" endtime="20190121 10:21:47.413" starttime="20190121 10:21:32.399"></status>
</kw>
<kw name="Close Ssh Connection" library="lairdcvs.testlibrary.TestLibrary">
<doc>Disconnect the ssh connection</doc>
<msg level="INFO" timestamp="20190121 10:21:47.428">Closing SSH connection to 192.168.1.101</msg>
<status status="PASS" endtime="20190121 10:21:47.430" starttime="20190121 10:21:47.416"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:47.544" starttime="20190121 10:21:47.452"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:47.648" starttime="20190121 10:21:47.547"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:47.651" starttime="20190121 10:21:32.201"></status>
</kw>
<doc>Implements Test Task SKTB-34994</doc>
<tags>
<tag>CAN 3 test</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:21:47.653" starttime="20190121 10:20:18.431"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:21:49.254">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:21:49.312">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:21:49.334" starttime="20190121 10:21:47.794"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:49.336" starttime="20190121 10:21:47.710"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:49.338" starttime="20190121 10:21:47.703"></status>
</kw>
<doc>CAN 3 test</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:21:49.354" starttime="20190121 10:20:15.696"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-41635.robot" name="SKTB-41635" id="s1-s7">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:49.930">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:21:49.951" starttime="20190121 10:21:49.906"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:49.985">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:21:49.998">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:21:52.229">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:21:52.231" starttime="20190121 10:21:49.958"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:52.233" starttime="20190121 10:21:49.900"></status>
</kw>
<test name="can_diag_test" id="s1-s7-t1">
<kw name="Test_precondition" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Test_precondition"</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:52.303">"Test_precondition"</msg>
<status status="PASS" endtime="20190121 10:21:52.318" starttime="20190121 10:21:52.280"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:52.424" starttime="20190121 10:21:52.321"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:52.537" starttime="20190121 10:21:52.427"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:53.563">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:21:53.565" starttime="20190121 10:21:52.540"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:53.656" starttime="20190121 10:21:53.568"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:53.798">Slept 100 milliseconds</msg>
<status status="PASS" endtime="20190121 10:21:53.800" starttime="20190121 10:21:53.659"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:53.894" starttime="20190121 10:21:53.803"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:55.921">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:21:55.924" starttime="20190121 10:21:53.898"></status>
</kw>
<kw name="set_can_channels">
<doc>set bitrate for channels</doc>
<arguments>
<arg>${CAN_0}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:55.942">Starting process:
sudo ip link set can0 down</msg>
<msg level="INFO" timestamp="20190121 10:21:55.971">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:56.044">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:56.047">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:56.049" starttime="20190121 10:21:55.936"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:56.061">Starting process:
sudo ip link set can0 type can bitrate 250000</msg>
<msg level="INFO" timestamp="20190121 10:21:56.089">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:56.181">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:56.184">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:56.189" starttime="20190121 10:21:56.053"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:56.230">Starting process:
sudo ip link set can0 up</msg>
<msg level="INFO" timestamp="20190121 10:21:56.296">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:56.417">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:56.420">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:56.421" starttime="20190121 10:21:56.213"></status>
</kw>
<timeout value="10 seconds"></timeout>
<status status="PASS" endtime="20190121 10:21:56.424" starttime="20190121 10:21:55.926"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:56.427" starttime="20190121 10:21:52.274"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Start test</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:21:56.455">Start test</msg>
<status status="PASS" endtime="20190121 10:21:56.461" starttime="20190121 10:21:56.450"></status>
</kw>
<kw name="Req_1003">
<doc>Extended session</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Extended session</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:56.476" starttime="20190121 10:21:56.470"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:56.496">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg level="INFO" timestamp="20190121 10:21:56.527">${candump_ID} = 138</msg>
<status status="PASS" endtime="20190121 10:21:56.532" starttime="20190121 10:21:56.479"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>10 03</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:56.556">Starting process:
echo 10 03 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg level="INFO" timestamp="20190121 10:21:56.586">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:56.601">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:56.603">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:56.606" starttime="20190121 10:21:56.547"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:56.609" starttime="20190121 10:21:56.535"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:56.624">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:57.629">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:21:57.631">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:21:57.635">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:57.638">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:21:57.639" starttime="20190121 10:21:56.619"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:57.651">2 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:21:57.656">${temp} = [' (1548066116.598321)  can0  7F8   [8]  02 10 03 00 00 00 00 00', ' (1548066116.604123)  can0  7F7   [8]  06 50 03 00 14 00 C8 AA']</msg>
<status status="PASS" endtime="20190121 10:21:57.657" starttime="20190121 10:21:57.642"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:57.666">(1548066116.598321)  can0  7F8   [8]  02 10 03 00 00 00 00 00
 (1548066116.604123)  can0  7F7   [8]  06 50 03 00 14 00 C8 AA</msg>
<msg level="INFO" timestamp="20190121 10:21:57.668">${ret_list} = [{'payload': '0210030000000000', 'id': '7F8', 'timestamp': '1548066116.598321', 'channel': 'can0'}, {'payload': '065003001400C8AA', 'id': '7F7', 'timestamp': '1548066116.604123', 'channel': 'can0'}]</msg>
<status status="PASS" endtime="20190121 10:21:57.669" starttime="20190121 10:21:57.660"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:57.678" starttime="20190121 10:21:57.671"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:57.690">${data} = True</msg>
<status status="PASS" endtime="20190121 10:21:57.691" starttime="20190121 10:21:57.682"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:21:57.696">${res} = True</msg>
<status status="PASS" endtime="20190121 10:21:57.696" starttime="20190121 10:21:56.611"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:57.706" starttime="20190121 10:21:57.700"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:57.709" starttime="20190121 10:21:56.464"></status>
</kw>
<kw name="Req_F100">
<doc>Active_DiagnosticInformation</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Active_DiagnosticInformation</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:57.725" starttime="20190121 10:21:57.717"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:57.737">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg level="INFO" timestamp="20190121 10:21:57.976">${candump_ID} = 140</msg>
<status status="PASS" endtime="20190121 10:21:57.978" starttime="20190121 10:21:57.729"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>22 F1 00</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:57.997">Starting process:
echo 22 F1 00 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg level="INFO" timestamp="20190121 10:21:58.024">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:58.038">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:58.042">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:58.043" starttime="20190121 10:21:57.988"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:58.045" starttime="20190121 10:21:57.981"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:58.061">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:59.067">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:21:59.069">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:21:59.073">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:59.075">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:21:59.076" starttime="20190121 10:21:58.056"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:59.086">3 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:21:59.089">${temp} = [' (1548066118.036078)  can0  7F8   [8]  03 22 F1 00 00 00 00 00', ' (1548066118.053839)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA', ' (1548066118.063873)  can0  7F7   [8]  07 62 F1 00 00 01 01 03']</msg>
<status status="PASS" endtime="20190121 10:21:59.089" starttime="20190121 10:21:59.079"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:59.098">(1548066118.036078)  can0  7F8   [8]  03 22 F1 00 00 00 00 00
 (1548066118.053839)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA
 (1548066118.063873)  can0  7F7   [8]  07 62 F1 00 00 01 01 03</msg>
<msg level="INFO" timestamp="20190121 10:21:59.101">${ret_list} = [{'payload': '0322F10000000000', 'id': '7F8', 'timestamp': '1548066118.036078', 'channel': 'can0'}, {'payload': '037F2278AAAAAAAA', 'id': '7F7', 'timestamp': '1548066118.053839', 'channel': 'can0'}, {...</msg>
<status status="PASS" endtime="20190121 10:21:59.101" starttime="20190121 10:21:59.092"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:59.111" starttime="20190121 10:21:59.104"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:59.122">None</msg>
<msg level="INFO" timestamp="20190121 10:21:59.124">${data} = True</msg>
<status status="PASS" endtime="20190121 10:21:59.125" starttime="20190121 10:21:59.114"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:21:59.129">${res} = True</msg>
<status status="PASS" endtime="20190121 10:21:59.130" starttime="20190121 10:21:58.048"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:59.138" starttime="20190121 10:21:59.133"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:59.141" starttime="20190121 10:21:57.711"></status>
</kw>
<kw name="Req_F10D">
<doc>DDS Package Release</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DDS Package Release</arg>
</arguments>
<status status="PASS" endtime="20190121 10:21:59.155" starttime="20190121 10:21:59.149"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:59.166">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg level="INFO" timestamp="20190121 10:21:59.197">${candump_ID} = 142</msg>
<status status="PASS" endtime="20190121 10:21:59.198" starttime="20190121 10:21:59.158"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>22 F1 0D</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:59.225">Starting process:
echo 22 F1 0D | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg level="INFO" timestamp="20190121 10:21:59.252">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:21:59.265">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:21:59.269">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:21:59.270" starttime="20190121 10:21:59.216"></status>
</kw>
<status status="PASS" endtime="20190121 10:21:59.272" starttime="20190121 10:21:59.208"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:21:59.289">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:00.294">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:00.296">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:00.300">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:00.302">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:00.303" starttime="20190121 10:21:59.283"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:00.313">3 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:00.315">${temp} = [' (1548066119.263326)  can0  7F8   [8]  03 22 F1 0D 00 00 00 00', ' (1548066119.273885)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA', ' (1548066119.283893)  can0  7F7   [8]  03 7F 22 22 AA AA AA AA']</msg>
<status status="PASS" endtime="20190121 10:22:00.316" starttime="20190121 10:22:00.306"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:00.326">(1548066119.263326)  can0  7F8   [8]  03 22 F1 0D 00 00 00 00
 (1548066119.273885)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA
 (1548066119.283893)  can0  7F7   [8]  03 7F 22 22 AA AA AA AA</msg>
<msg level="INFO" timestamp="20190121 10:22:00.329">${ret_list} = [{'payload': '0322F10D00000000', 'id': '7F8', 'timestamp': '1548066119.263326', 'channel': 'can0'}, {'payload': '037F2278AAAAAAAA', 'id': '7F7', 'timestamp': '1548066119.273885', 'channel': 'can0'}, {...</msg>
<status status="PASS" endtime="20190121 10:22:00.329" starttime="20190121 10:22:00.319"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:00.342" starttime="20190121 10:22:00.332"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:00.353">${data} = True</msg>
<status status="PASS" endtime="20190121 10:22:00.354" starttime="20190121 10:22:00.345"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:00.357">${res} = True</msg>
<status status="PASS" endtime="20190121 10:22:00.358" starttime="20190121 10:21:59.275"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:00.367" starttime="20190121 10:22:00.361"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:00.369" starttime="20190121 10:21:59.143"></status>
</kw>
<kw name="Req_F103">
<doc>Vedoc Relevant Information</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Vedoc Relevant Information</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:00.384" starttime="20190121 10:22:00.378"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:00.395">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg level="INFO" timestamp="20190121 10:22:00.426">${candump_ID} = 144</msg>
<status status="PASS" endtime="20190121 10:22:00.427" starttime="20190121 10:22:00.387"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>isotprecv -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${isotprecv_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:00.447">Starting process:
isotprecv -s 7F8 -d 7F7 -p 00 can0</msg>
<msg level="INFO" timestamp="20190121 10:22:00.477">${isotprecv_ID} = 145</msg>
<status status="PASS" endtime="20190121 10:22:00.478" starttime="20190121 10:22:00.438"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>22 F1 03</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:00.505">Starting process:
echo 22 F1 03 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg level="INFO" timestamp="20190121 10:22:00.533">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:00.547">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:00.550">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:00.550" starttime="20190121 10:22:00.496"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:00.554" starttime="20190121 10:22:00.488"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:00.571">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:01.582">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:01.584">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:01.589">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:01.591">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:01.592" starttime="20190121 10:22:00.564"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:01.602">3 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:01.604">${temp} = [' (1548066120.544349)  can0  7F8   [8]  03 22 F1 03 00 00 00 00', ' (1548066120.563939)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA', ' (1548066120.573925)  can0  7F7   [8]  10 1C 62 F1 03 4C 61 69']</msg>
<status status="PASS" endtime="20190121 10:22:01.605" starttime="20190121 10:22:01.595"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:01.614">(1548066120.544349)  can0  7F8   [8]  03 22 F1 03 00 00 00 00
 (1548066120.563939)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA
 (1548066120.573925)  can0  7F7   [8]  10 1C 62 F1 03 4C 61 69</msg>
<msg level="INFO" timestamp="20190121 10:22:01.616">${ret_list} = [{'payload': '0322F10300000000', 'id': '7F8', 'timestamp': '1548066120.544349', 'channel': 'can0'}, {'payload': '037F2278AAAAAAAA', 'id': '7F7', 'timestamp': '1548066120.563939', 'channel': 'can0'}, {...</msg>
<status status="PASS" endtime="20190121 10:22:01.617" starttime="20190121 10:22:01.608"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:01.628" starttime="20190121 10:22:01.620"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:01.639">${data} = True</msg>
<status status="PASS" endtime="20190121 10:22:01.640" starttime="20190121 10:22:01.631"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:01.643">${res} = True</msg>
<status status="PASS" endtime="20190121 10:22:01.644" starttime="20190121 10:22:00.556"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:01.653" starttime="20190121 10:22:01.647"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:01.655" starttime="20190121 10:22:00.372"></status>
</kw>
<kw name="Req_F1A0">
<doc>VIN Current</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>VIN Current</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:01.669" starttime="20190121 10:22:01.664"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:01.683">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg level="INFO" timestamp="20190121 10:22:01.714">${candump_ID} = 147</msg>
<status status="PASS" endtime="20190121 10:22:01.716" starttime="20190121 10:22:01.673"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>isotprecv -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${isotprecv_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:01.736">Starting process:
isotprecv -s 7F8 -d 7F7 -p 00 can0</msg>
<msg level="INFO" timestamp="20190121 10:22:01.768">${isotprecv_ID} = 148</msg>
<status status="PASS" endtime="20190121 10:22:01.772" starttime="20190121 10:22:01.727"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>22 F1 A0</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:01.797">Starting process:
echo 22 F1 A0 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg level="INFO" timestamp="20190121 10:22:01.825">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:01.838">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:01.843">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:01.844" starttime="20190121 10:22:01.788"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:01.846" starttime="20190121 10:22:01.775"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:01.862">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:02.868">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:02.870">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:02.874">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:02.877">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:02.878" starttime="20190121 10:22:01.856"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:02.892">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:02.895">${temp} = [' (1548066121.835835)  can0  7F8   [8]  03 22 F1 A0 00 00 00 00']</msg>
<status status="PASS" endtime="20190121 10:22:02.896" starttime="20190121 10:22:02.881"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:02.905">(1548066121.835835)  can0  7F8   [8]  03 22 F1 A0 00 00 00 00</msg>
<msg level="INFO" timestamp="20190121 10:22:02.907">${ret_list} = [{'payload': '0322F1A000000000', 'id': '7F8', 'timestamp': '1548066121.835835', 'channel': 'can0'}]</msg>
<status status="PASS" endtime="20190121 10:22:02.907" starttime="20190121 10:22:02.899"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:02.919" starttime="20190121 10:22:02.911"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:02.930">${data} = True</msg>
<status status="PASS" endtime="20190121 10:22:02.931" starttime="20190121 10:22:02.922"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:02.935">${res} = True</msg>
<status status="PASS" endtime="20190121 10:22:02.936" starttime="20190121 10:22:01.849"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:02.944" starttime="20190121 10:22:02.939"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:02.947" starttime="20190121 10:22:01.657"></status>
</kw>
<kw name="Req_F1A0_WRITE">
<doc>VIN Current</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>VIN Current write</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:02.961" starttime="20190121 10:22:02.955"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:02.973">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg level="INFO" timestamp="20190121 10:22:03.003">${candump_ID} = 150</msg>
<status status="PASS" endtime="20190121 10:22:03.008" starttime="20190121 10:22:02.964"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>2E F1 A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:03.032">Starting process:
echo 2E F1 A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg level="INFO" timestamp="20190121 10:22:03.115">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:03.150">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:03.154">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:03.157" starttime="20190121 10:22:03.023"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:03.175" starttime="20190121 10:22:03.011"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:04.194">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:22:04.197" starttime="20190121 10:22:03.179"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:04.211">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:05.217">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:05.218">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:05.224">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:05.226">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:05.227" starttime="20190121 10:22:04.206"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:05.237">5 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:05.239">${temp} = [' (1548066123.123466)  can0  7F8   [8]  10 14 2E F1 A0 00 00 00', ' (1548066123.124113)  can0  7F7   [8]  30 08 0A AA AA AA AA AA', ' (1548066123.134675)  can0  7F8   [8]  21 00 00 00 00 00 00 00', '...</msg>
<status status="PASS" endtime="20190121 10:22:05.240" starttime="20190121 10:22:05.230"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:05.249">(1548066123.123466)  can0  7F8   [8]  10 14 2E F1 A0 00 00 00
 (1548066123.124113)  can0  7F7   [8]  30 08 0A AA AA AA AA AA
 (1548066123.134675)  can0  7F8   [8]  21 00 00 00 00 00 00 00
 (1548066123.144721)  can0  7F8   [8]  22 00 00 00 00 00 00 00
 (1548066123.154073)  can0  7F7   [8]  03 7F 2E 33 AA AA AA AA</msg>
<msg level="INFO" timestamp="20190121 10:22:05.251">${ret_list} = [{'payload': '10142EF1A0000000', 'id': '7F8', 'timestamp': '1548066123.123466', 'channel': 'can0'}, {'payload': '30080AAAAAAAAAAA', 'id': '7F7', 'timestamp': '1548066123.124113', 'channel': 'can0'}, {...</msg>
<status status="PASS" endtime="20190121 10:22:05.252" starttime="20190121 10:22:05.243"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:05.262" starttime="20190121 10:22:05.255"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:05.273">None</msg>
<msg level="INFO" timestamp="20190121 10:22:05.276">${data} = False</msg>
<status status="PASS" endtime="20190121 10:22:05.277" starttime="20190121 10:22:05.265"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:05.280">${res} = False</msg>
<status status="PASS" endtime="20190121 10:22:05.281" starttime="20190121 10:22:04.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:05.289">False</msg>
<status status="PASS" endtime="20190121 10:22:05.292" starttime="20190121 10:22:05.284"></status>
</kw>
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:05.301" starttime="20190121 10:22:05.295"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:05.303" starttime="20190121 10:22:02.949"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>pkill candump</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${rm_res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:05.318">Starting process:
pkill candump</msg>
<msg level="INFO" timestamp="20190121 10:22:05.348">${rm_res} = 152</msg>
<status status="PASS" endtime="20190121 10:22:05.353" starttime="20190121 10:22:05.314"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:05.433" starttime="20190121 10:22:05.361"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:05.486" starttime="20190121 10:22:05.439"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:05.489" starttime="20190121 10:22:05.307"></status>
</kw>
<doc>Can diagnose test</doc>
<tags>
<tag>CAN 1 diagnose test</tag>
</tags>
<timeout value="50 seconds"></timeout>
<status status="PASS" critical="yes" endtime="20190121 10:22:05.491" starttime="20190121 10:21:52.235"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:22:06.978">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:22:07.037">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:22:07.039" starttime="20190121 10:22:05.532"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:07.040" starttime="20190121 10:22:05.508"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:07.042" starttime="20190121 10:22:05.502"></status>
</kw>
<doc>CAN 1 diagnose test</doc>
<status status="PASS" endtime="20190121 10:22:07.043" starttime="20190121 10:21:49.473"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-46886.robot" name="SKTB-46886" id="s1-s8">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:07.733">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:22:07.751" starttime="20190121 10:22:07.728"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:07.765">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:22:07.771">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:22:09.868">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:22:09.882" starttime="20190121 10:22:07.754"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:09.884" starttime="20190121 10:22:07.711"></status>
</kw>
<test name="SKTB-GPIO FBUS test" id="s1-s8-t1">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:10.071" starttime="20190121 10:22:09.957"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:10.208" starttime="20190121 10:22:10.074"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:10.301" starttime="20190121 10:22:10.211"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:12.323">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:22:12.325" starttime="20190121 10:22:10.304"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:12.374" starttime="20190121 10:22:12.328"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:12.425" starttime="20190121 10:22:12.378"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:12.475" starttime="20190121 10:22:12.430"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:12.525" starttime="20190121 10:22:12.478"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:12.574" starttime="20190121 10:22:12.528"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:12.625" starttime="20190121 10:22:12.578"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:14.633">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:22:14.635" starttime="20190121 10:22:12.628"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:14.638" starttime="20190121 10:22:09.915"></status>
</kw>
<kw name="Test_GPIO_00">
<doc>Test HI SIDE SWITCH 01</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test hi side switch 01</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:14.651" starttime="20190121 10:22:14.647"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_1}${ENABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:14.855">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 00 01 43 3D F5</msg>
<status status="PASS" endtime="20190121 10:22:14.857" starttime="20190121 10:22:14.654"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:14.864">1E 14 54 8E 00 08 01 0D 77 29 00 00 01 43 3D F5</msg>
<status status="PASS" endtime="20190121 10:22:14.867" starttime="20190121 10:22:14.860"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_1}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:15.075">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 00 00 01 01 44 3D FE</msg>
<status status="PASS" endtime="20190121 10:22:15.077" starttime="20190121 10:22:14.870"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:15.085">1E 14 54 8E 00 0A 01 0D 77 26 00 00 00 01 01 44 3D FE</msg>
<status status="PASS" endtime="20190121 10:22:15.088" starttime="20190121 10:22:15.080"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_1} ${MODE_STATIC} ${ENABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:15.100" starttime="20190121 10:22:15.091"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_1}${DISABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:15.303">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 00 01 45 3D F3</msg>
<status status="PASS" endtime="20190121 10:22:15.305" starttime="20190121 10:22:15.103"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:15.312">1E 14 54 8E 00 08 01 0D 77 29 00 00 01 45 3D F3</msg>
<status status="PASS" endtime="20190121 10:22:15.314" starttime="20190121 10:22:15.307"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_1}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:15.518">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 00 00 00 01 46 3D FD</msg>
<status status="PASS" endtime="20190121 10:22:15.519" starttime="20190121 10:22:15.318"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:15.527">1E 14 54 8E 00 0A 01 0D 77 26 00 00 00 00 01 46 3D FD</msg>
<status status="PASS" endtime="20190121 10:22:15.529" starttime="20190121 10:22:15.522"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_1} ${MODE_STATIC} ${DISABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:15.540" starttime="20190121 10:22:15.532"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:15.543" starttime="20190121 10:22:14.641"></status>
</kw>
<kw name="Test_GPIO_01">
<doc>Test HI SIDE SWITCH 02</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test hi side switch 02</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:15.556" starttime="20190121 10:22:15.551"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_2}${ENABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:15.762">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 01 01 41 3D F6</msg>
<status status="PASS" endtime="20190121 10:22:15.763" starttime="20190121 10:22:15.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:15.771">1E 14 54 8E 00 08 01 0D 77 29 00 01 01 41 3D F6</msg>
<status status="PASS" endtime="20190121 10:22:15.773" starttime="20190121 10:22:15.766"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_2}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:15.981">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 01 00 01 01 42 3D F9</msg>
<status status="PASS" endtime="20190121 10:22:15.982" starttime="20190121 10:22:15.776"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:15.989">1E 14 54 8E 00 0A 01 0D 77 26 00 01 00 01 01 42 3D F9</msg>
<status status="PASS" endtime="20190121 10:22:15.991" starttime="20190121 10:22:15.985"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_2} ${MODE_STATIC} ${ENABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:16.005" starttime="20190121 10:22:15.994"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_2}${DISABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:16.211">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 01 01 43 3D F4</msg>
<status status="PASS" endtime="20190121 10:22:16.211" starttime="20190121 10:22:16.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:16.219">1E 14 54 8E 00 08 01 0D 77 29 00 01 01 43 3D F4</msg>
<status status="PASS" endtime="20190121 10:22:16.222" starttime="20190121 10:22:16.215"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_2}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:16.426">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 01 00 00 01 44 3D FE</msg>
<status status="PASS" endtime="20190121 10:22:16.427" starttime="20190121 10:22:16.225"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:16.434">1E 14 54 8E 00 0A 01 0D 77 26 00 01 00 00 01 44 3D FE</msg>
<status status="PASS" endtime="20190121 10:22:16.437" starttime="20190121 10:22:16.430"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_2} ${MODE_STATIC} ${DISABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:16.448" starttime="20190121 10:22:16.440"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:16.450" starttime="20190121 10:22:15.545"></status>
</kw>
<kw name="Test_GPIO_02">
<doc>Test HI SIDE SWITCH 03</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test hi side switch 03</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:16.463" starttime="20190121 10:22:16.459"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_3}${ENABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:16.806">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 02 01 47 3D F3</msg>
<status status="PASS" endtime="20190121 10:22:16.807" starttime="20190121 10:22:16.466"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:16.839">1E 14 54 8E 00 08 01 0D 77 29 00 02 01 47 3D F3</msg>
<status status="PASS" endtime="20190121 10:22:16.876" starttime="20190121 10:22:16.818"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_3}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:17.313">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 02 00 01 01 40 3D F8</msg>
<status status="PASS" endtime="20190121 10:22:17.315" starttime="20190121 10:22:16.899"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:17.331">1E 14 54 8E 00 0A 01 0D 77 26 00 02 00 01 01 40 3D F8</msg>
<status status="PASS" endtime="20190121 10:22:17.343" starttime="20190121 10:22:17.327"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_3} ${MODE_STATIC} ${ENABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:17.366" starttime="20190121 10:22:17.346"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_3}${DISABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:17.635">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 02 01 41 3D F5</msg>
<status status="PASS" endtime="20190121 10:22:17.636" starttime="20190121 10:22:17.369"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:17.659">1E 14 54 8E 00 08 01 0D 77 29 00 02 01 41 3D F5</msg>
<status status="PASS" endtime="20190121 10:22:17.665" starttime="20190121 10:22:17.639"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_3}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:17.955">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 02 00 00 01 42 3D FB</msg>
<status status="PASS" endtime="20190121 10:22:17.956" starttime="20190121 10:22:17.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:17.963">1E 14 54 8E 00 0A 01 0D 77 26 00 02 00 00 01 42 3D FB</msg>
<status status="PASS" endtime="20190121 10:22:17.975" starttime="20190121 10:22:17.959"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_3} ${MODE_STATIC} ${DISABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:17.993" starttime="20190121 10:22:17.978"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:17.995" starttime="20190121 10:22:16.452"></status>
</kw>
<kw name="Test_GPIO_03">
<doc>Test HI SIDE SWITCH 03</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test hi side switch 03</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:18.043" starttime="20190121 10:22:18.025"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_4}${ENABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:18.297">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 03 01 43 3D F6</msg>
<status status="PASS" endtime="20190121 10:22:18.298" starttime="20190121 10:22:18.046"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:18.317">1E 14 54 8E 00 08 01 0D 77 29 00 03 01 43 3D F6</msg>
<status status="PASS" endtime="20190121 10:22:18.330" starttime="20190121 10:22:18.301"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_4}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:18.565">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 03 00 01 01 44 3D FD</msg>
<status status="PASS" endtime="20190121 10:22:18.566" starttime="20190121 10:22:18.334"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:18.575">1E 14 54 8E 00 0A 01 0D 77 26 00 03 00 01 01 44 3D FD</msg>
<status status="PASS" endtime="20190121 10:22:18.578" starttime="20190121 10:22:18.570"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_4} ${MODE_STATIC} ${ENABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:18.589" starttime="20190121 10:22:18.581"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_4}${DISABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:18.793">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 03 01 45 3D F0</msg>
<status status="PASS" endtime="20190121 10:22:18.794" starttime="20190121 10:22:18.592"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:18.801">1E 14 54 8E 00 08 01 0D 77 29 00 03 01 45 3D F0</msg>
<status status="PASS" endtime="20190121 10:22:18.804" starttime="20190121 10:22:18.797"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_4}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:19.009">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 03 00 00 01 46 3D FE</msg>
<status status="PASS" endtime="20190121 10:22:19.010" starttime="20190121 10:22:18.807"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:19.021">1E 14 54 8E 00 0A 01 0D 77 26 00 03 00 00 01 46 3D FE</msg>
<status status="PASS" endtime="20190121 10:22:19.023" starttime="20190121 10:22:19.014"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_4} ${MODE_STATIC} ${DISABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:19.034" starttime="20190121 10:22:19.026"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:19.037" starttime="20190121 10:22:17.998"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:19.094" starttime="20190121 10:22:19.047"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:19.143" starttime="20190121 10:22:19.097"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:19.192" starttime="20190121 10:22:19.147"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:21.200">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:22:21.202" starttime="20190121 10:22:19.195"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:21.251" starttime="20190121 10:22:21.205"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:21.298" starttime="20190121 10:22:21.254"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:21.301" starttime="20190121 10:22:19.040"></status>
</kw>
<doc>Implements Test Task SKTB-46886</doc>
<tags>
<tag>FBUS</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:22:21.303" starttime="20190121 10:22:09.890"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:22:22.783">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:22:22.819">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:22:22.821" starttime="20190121 10:22:21.349"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:22.832" starttime="20190121 10:22:21.318"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:22.835" starttime="20190121 10:22:21.312"></status>
</kw>
<doc>Chorus Fbus GPIO Testing</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:22:22.835" starttime="20190121 10:22:07.135"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-47669.robot" name="SKTB-47669" id="s1-s9">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:23.539">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:22:23.554" starttime="20190121 10:22:23.535"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:23.576">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:22:23.578">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:22:25.688">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:22:25.702" starttime="20190121 10:22:23.557"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:25.704" starttime="20190121 10:22:23.515"></status>
</kw>
<test name="SKTB-47669" id="s1-s9-t1">
<kw name="Test_precondition" type="setup">
<doc>Precondition, Switch power on and set Serial configuration</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Precondition, Switch power on and set Serial configuration</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:25.769" starttime="20190121 10:22:25.757"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:25.895" starttime="20190121 10:22:25.772"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:25.992" starttime="20190121 10:22:25.902"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:26.092" starttime="20190121 10:22:25.995"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${912600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:26.193" starttime="20190121 10:22:26.095"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:26.298" starttime="20190121 10:22:26.196"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:26.460" starttime="20190121 10:22:26.302"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:28.496">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:22:28.499" starttime="20190121 10:22:26.463"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:28.547" starttime="20190121 10:22:28.501"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:28.597" starttime="20190121 10:22:28.550"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${4}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:32.605">Slept 4 seconds</msg>
<status status="PASS" endtime="20190121 10:22:32.607" starttime="20190121 10:22:28.600"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:32.610" starttime="20190121 10:22:25.735"></status>
</kw>
<kw name="cansend_500k">
<doc>Trigger to send can message on can with bitrate 500000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with bitrate 500000</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:32.623" starttime="20190121 10:22:32.619"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${500000}</arg>
<arg>${500_KBAUD}</arg>
<arg>${MSG_ID}</arg>
<arg>${MSG_ID_ISI}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:32.655" starttime="20190121 10:22:32.648"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:32.665">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:22:32.693">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:32.767">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:32.770">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:32.771" starttime="20190121 10:22:32.658"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:32.783" starttime="20190121 10:22:32.774"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:32.793">Starting process:
sudo ip link set can2 type can bitrate 500000</msg>
<msg level="INFO" timestamp="20190121 10:22:32.821">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:32.878">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:32.881">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:32.882" starttime="20190121 10:22:32.786"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:32.895" starttime="20190121 10:22:32.886"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:32.906">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:22:32.935">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:33.018">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:33.021">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:33.022" starttime="20190121 10:22:32.898"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:33.035" starttime="20190121 10:22:33.026"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:22:33.038" starttime="20190121 10:22:32.638"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:33.048">Starting process:
candump -t a can2,1FF:1FF</msg>
<msg level="INFO" timestamp="20190121 10:22:33.078">${candump_ID} = 156</msg>
<status status="PASS" endtime="20190121 10:22:33.079" starttime="20190121 10:22:33.041"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:33.111" starttime="20190121 10:22:33.106"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:33.121">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 02</msg>
<status status="PASS" endtime="20190121 10:22:33.122" starttime="20190121 10:22:33.114"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:33.139" starttime="20190121 10:22:33.125"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:33.366">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 47 E1 C1</msg>
<status status="PASS" endtime="20190121 10:22:33.367" starttime="20190121 10:22:33.143"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:33.374">1E 10 54 93 00 08 00 0E AA 03 00 00 01 47 E1 C1</msg>
<status status="PASS" endtime="20190121 10:22:33.377" starttime="20190121 10:22:33.370"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:33.388" starttime="20190121 10:22:33.380"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:33.391" starttime="20190121 10:22:33.089"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:33.406" starttime="20190121 10:22:33.401"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:33.418">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status status="PASS" endtime="20190121 10:22:33.419" starttime="20190121 10:22:33.409"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:33.432" starttime="20190121 10:22:33.422"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:33.641">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 40 E3 C0</msg>
<status status="PASS" endtime="20190121 10:22:33.642" starttime="20190121 10:22:33.435"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:33.650">1E 10 54 93 00 08 00 0E AA 05 02 00 01 40 E3 C0</msg>
<status status="PASS" endtime="20190121 10:22:33.653" starttime="20190121 10:22:33.646"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:33.667" starttime="20190121 10:22:33.655"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:33.670" starttime="20190121 10:22:33.393"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:33.678" starttime="20190121 10:22:33.673"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:33.697">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 00 00 01 FF 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:33.698" starttime="20190121 10:22:33.689"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:33.707" starttime="20190121 10:22:33.701"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:33.900">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:33.901" starttime="20190121 10:22:33.710"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:33.903" starttime="20190121 10:22:33.680"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:33.917">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:34.922">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:34.925">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:34.929">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:34.931">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:34.932" starttime="20190121 10:22:33.913"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:34.942">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:34.944">${temp} = [' (1548066153.759560)  can2  1FF   [8]  11 22 33 44 55 66 77 88']</msg>
<status status="PASS" endtime="20190121 10:22:34.945" starttime="20190121 10:22:34.936"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:34.953">(1548066153.759560)  can2  1FF   [8]  11 22 33 44 55 66 77 88</msg>
<msg level="INFO" timestamp="20190121 10:22:34.956">${ret_list} = [{'payload': '1122334455667788', 'id': '1FF', 'timestamp': '1548066153.759560', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:34.957" starttime="20190121 10:22:34.949"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:34.966" starttime="20190121 10:22:34.960"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:34.970">${resp_list} = [{'payload': '1122334455667788', 'id': '1FF', 'timestamp': '1548066153.759560', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:34.971" starttime="20190121 10:22:33.906"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:34.981">${res_dict} = {'status': True, 'count': 1}</msg>
<status status="PASS" endtime="20190121 10:22:34.982" starttime="20190121 10:22:34.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:34.991" starttime="20190121 10:22:34.985"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:35.027">${value} = True</msg>
<status status="PASS" endtime="20190121 10:22:35.028" starttime="20190121 10:22:34.994"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.036" starttime="20190121 10:22:35.032"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:35.040">${resp} = True</msg>
<status status="PASS" endtime="20190121 10:22:35.041" starttime="20190121 10:22:32.626"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.048" starttime="20190121 10:22:35.044"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:35.050" starttime="20190121 10:22:32.613"></status>
</kw>
<kw name="cansend_500k_ex">
<doc>Trigger to send can message on can with 29 bit ID and bitrate 500000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with 29 bit ID and bitrate 500000</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.063" starttime="20190121 10:22:35.059"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${500000}</arg>
<arg>${500_KBAUD}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.094" starttime="20190121 10:22:35.086"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:35.103">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:22:35.133">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:35.205">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:35.207">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:35.209" starttime="20190121 10:22:35.097"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.221" starttime="20190121 10:22:35.213"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:35.232">Starting process:
sudo ip link set can2 type can bitrate 500000</msg>
<msg level="INFO" timestamp="20190121 10:22:35.261">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:35.323">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:35.326">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:35.327" starttime="20190121 10:22:35.224"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.339" starttime="20190121 10:22:35.331"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:35.349">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:22:35.378">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:35.462">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:35.465">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:35.466" starttime="20190121 10:22:35.342"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.494" starttime="20190121 10:22:35.470"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:22:35.497" starttime="20190121 10:22:35.077"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:35.507">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg level="INFO" timestamp="20190121 10:22:35.538">${candump_ID} = 160</msg>
<status status="PASS" endtime="20190121 10:22:35.539" starttime="20190121 10:22:35.500"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.571" starttime="20190121 10:22:35.566"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:35.581">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 02</msg>
<status status="PASS" endtime="20190121 10:22:35.582" starttime="20190121 10:22:35.574"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.591" starttime="20190121 10:22:35.585"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:35.794">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 43 E1 C5</msg>
<status status="PASS" endtime="20190121 10:22:35.795" starttime="20190121 10:22:35.594"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:35.803">1E 10 54 93 00 08 00 0E AA 03 00 00 01 43 E1 C5</msg>
<status status="PASS" endtime="20190121 10:22:35.806" starttime="20190121 10:22:35.799"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.816" starttime="20190121 10:22:35.809"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:35.819" starttime="20190121 10:22:35.556"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.834" starttime="20190121 10:22:35.829"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:35.845">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status status="PASS" endtime="20190121 10:22:35.846" starttime="20190121 10:22:35.838"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:35.854" starttime="20190121 10:22:35.849"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:36.085">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 42 E3 C2</msg>
<status status="PASS" endtime="20190121 10:22:36.086" starttime="20190121 10:22:35.857"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:36.094">1E 10 54 93 00 08 00 0E AA 05 02 00 01 42 E3 C2</msg>
<status status="PASS" endtime="20190121 10:22:36.096" starttime="20190121 10:22:36.089"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:36.108" starttime="20190121 10:22:36.099"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:36.110" starttime="20190121 10:22:35.821"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:36.118" starttime="20190121 10:22:36.113"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:36.138">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:36.139" starttime="20190121 10:22:36.130"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:36.147" starttime="20190121 10:22:36.142"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:36.383">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:36.384" starttime="20190121 10:22:36.150"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:36.387" starttime="20190121 10:22:36.121"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:36.417">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:37.432">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:37.433">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:37.438">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:37.440">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:37.441" starttime="20190121 10:22:36.412"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:37.449">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:37.451">${temp} = [' (1548066156.199819)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88']</msg>
<status status="PASS" endtime="20190121 10:22:37.452" starttime="20190121 10:22:37.444"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:37.460">(1548066156.199819)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88</msg>
<msg level="INFO" timestamp="20190121 10:22:37.462">${ret_list} = [{'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066156.199819', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:37.462" starttime="20190121 10:22:37.455"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:37.471" starttime="20190121 10:22:37.465"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:37.475">${resp_list} = [{'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066156.199819', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:37.476" starttime="20190121 10:22:36.389"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:37.486">${res_dict} = {'status': True, 'count': 1}</msg>
<status status="PASS" endtime="20190121 10:22:37.486" starttime="20190121 10:22:37.479"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:37.495" starttime="20190121 10:22:37.489"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:37.534">${value} = True</msg>
<status status="PASS" endtime="20190121 10:22:37.534" starttime="20190121 10:22:37.498"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:37.544" starttime="20190121 10:22:37.540"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:37.549">${resp} = True</msg>
<status status="PASS" endtime="20190121 10:22:37.550" starttime="20190121 10:22:35.066"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:37.557" starttime="20190121 10:22:37.553"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:37.559" starttime="20190121 10:22:35.053"></status>
</kw>
<kw name="cansend_250k">
<doc>Trigger to send can message on can with bitrate 250000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with bitrate 250000</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:37.573" starttime="20190121 10:22:37.569"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${250000}</arg>
<arg>${250_KBAUD}</arg>
<arg>${MSG_ID}</arg>
<arg>${MSG_ID_ISI}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:37.603" starttime="20190121 10:22:37.595"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:37.612">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:22:37.642">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:37.718">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:37.722">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:37.723" starttime="20190121 10:22:37.606"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:37.741" starttime="20190121 10:22:37.728"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:37.752">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg level="INFO" timestamp="20190121 10:22:37.841">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:37.937">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:37.945">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:37.946" starttime="20190121 10:22:37.744"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:37.992" starttime="20190121 10:22:37.971"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:38.029">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:22:38.092">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:38.220">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:38.223">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:38.225" starttime="20190121 10:22:37.995"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:38.258" starttime="20190121 10:22:38.228"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:22:38.261" starttime="20190121 10:22:37.585"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:38.290">Starting process:
candump -t a can2,1FF:1FF</msg>
<msg level="INFO" timestamp="20190121 10:22:38.333">${candump_ID} = 164</msg>
<status status="PASS" endtime="20190121 10:22:38.334" starttime="20190121 10:22:38.265"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:38.361" starttime="20190121 10:22:38.355"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:38.370">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 01</msg>
<status status="PASS" endtime="20190121 10:22:38.371" starttime="20190121 10:22:38.364"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:38.380" starttime="20190121 10:22:38.374"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:38.602">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 43 E1 C5</msg>
<status status="PASS" endtime="20190121 10:22:38.603" starttime="20190121 10:22:38.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:38.611">1E 10 54 93 00 08 00 0E AA 03 00 00 01 43 E1 C5</msg>
<status status="PASS" endtime="20190121 10:22:38.614" starttime="20190121 10:22:38.607"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:38.624" starttime="20190121 10:22:38.617"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:38.626" starttime="20190121 10:22:38.344"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:38.642" starttime="20190121 10:22:38.637"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:38.652">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status status="PASS" endtime="20190121 10:22:38.652" starttime="20190121 10:22:38.645"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:38.661" starttime="20190121 10:22:38.655"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:38.870">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 44 E3 C4</msg>
<status status="PASS" endtime="20190121 10:22:38.871" starttime="20190121 10:22:38.665"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:38.879">1E 10 54 93 00 08 00 0E AA 05 02 00 01 44 E3 C4</msg>
<status status="PASS" endtime="20190121 10:22:38.881" starttime="20190121 10:22:38.874"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:38.892" starttime="20190121 10:22:38.885"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:38.895" starttime="20190121 10:22:38.629"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:38.903" starttime="20190121 10:22:38.898"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:38.922">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 00 00 01 FF 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:38.923" starttime="20190121 10:22:38.914"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:38.932" starttime="20190121 10:22:38.926"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:39.123">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:39.123" starttime="20190121 10:22:38.935"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:39.126" starttime="20190121 10:22:38.905"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:39.139">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.145">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.147">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.151">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.153">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:40.154" starttime="20190121 10:22:39.135"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:40.162">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:40.165">${temp} = [' (1548066158.984958)  can2  1FF   [8]  11 22 33 44 55 66 77 88']</msg>
<status status="PASS" endtime="20190121 10:22:40.165" starttime="20190121 10:22:40.157"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:40.173">(1548066158.984958)  can2  1FF   [8]  11 22 33 44 55 66 77 88</msg>
<msg level="INFO" timestamp="20190121 10:22:40.175">${ret_list} = [{'payload': '1122334455667788', 'id': '1FF', 'timestamp': '1548066158.984958', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:40.176" starttime="20190121 10:22:40.168"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.184" starttime="20190121 10:22:40.179"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:40.188">${resp_list} = [{'payload': '1122334455667788', 'id': '1FF', 'timestamp': '1548066158.984958', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:40.189" starttime="20190121 10:22:39.129"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:40.201">${res_dict} = {'status': True, 'count': 1}</msg>
<status status="PASS" endtime="20190121 10:22:40.202" starttime="20190121 10:22:40.195"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.213" starttime="20190121 10:22:40.205"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:40.254">${value} = True</msg>
<status status="PASS" endtime="20190121 10:22:40.255" starttime="20190121 10:22:40.215"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.279" starttime="20190121 10:22:40.275"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:40.289">${resp} = True</msg>
<status status="PASS" endtime="20190121 10:22:40.290" starttime="20190121 10:22:37.576"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.321" starttime="20190121 10:22:40.293"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:40.323" starttime="20190121 10:22:37.562"></status>
</kw>
<kw name="cansend_250k_ex">
<doc>Trigger to send can message on can with 29 bit ID and bitrate 250000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with 29 bit ID and bitrate 250000</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.393" starttime="20190121 10:22:40.360"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${250000}</arg>
<arg>${250_KBAUD}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.487" starttime="20190121 10:22:40.456"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:40.503">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:22:40.546">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.618">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.621">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:40.622" starttime="20190121 10:22:40.490"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.634" starttime="20190121 10:22:40.626"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:40.645">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg level="INFO" timestamp="20190121 10:22:40.673">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.731">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.734">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:40.735" starttime="20190121 10:22:40.638"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.752" starttime="20190121 10:22:40.739"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:40.766">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:22:40.795">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.881">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:40.884">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:40.885" starttime="20190121 10:22:40.755"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.898" starttime="20190121 10:22:40.889"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:22:40.901" starttime="20190121 10:22:40.427"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:40.911">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg level="INFO" timestamp="20190121 10:22:40.942">${candump_ID} = 168</msg>
<status status="PASS" endtime="20190121 10:22:40.943" starttime="20190121 10:22:40.904"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.976" starttime="20190121 10:22:40.971"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:40.986">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 01</msg>
<status status="PASS" endtime="20190121 10:22:40.987" starttime="20190121 10:22:40.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:40.996" starttime="20190121 10:22:40.990"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:41.203">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 47 E1 C1</msg>
<status status="PASS" endtime="20190121 10:22:41.203" starttime="20190121 10:22:40.999"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:41.211">1E 10 54 93 00 08 00 0E AA 03 00 00 01 47 E1 C1</msg>
<status status="PASS" endtime="20190121 10:22:41.214" starttime="20190121 10:22:41.207"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:41.224" starttime="20190121 10:22:41.217"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:41.227" starttime="20190121 10:22:40.953"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:41.243" starttime="20190121 10:22:41.238"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:41.253">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status status="PASS" endtime="20190121 10:22:41.254" starttime="20190121 10:22:41.246"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:41.262" starttime="20190121 10:22:41.256"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:41.466">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 40 E3 C0</msg>
<status status="PASS" endtime="20190121 10:22:41.467" starttime="20190121 10:22:41.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:41.476">1E 10 54 93 00 08 00 0E AA 05 02 00 01 40 E3 C0</msg>
<status status="PASS" endtime="20190121 10:22:41.479" starttime="20190121 10:22:41.471"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:41.490" starttime="20190121 10:22:41.483"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:41.493" starttime="20190121 10:22:41.229"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:41.502" starttime="20190121 10:22:41.496"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:41.521">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:41.522" starttime="20190121 10:22:41.513"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:41.531" starttime="20190121 10:22:41.525"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:41.723">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:41.724" starttime="20190121 10:22:41.534"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:41.727" starttime="20190121 10:22:41.504"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:41.740">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:42.792">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:42.795">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:42.803">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:42.810">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:42.810" starttime="20190121 10:22:41.736"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:42.843">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:42.865">${temp} = [' (1548066161.585290)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88']</msg>
<status status="PASS" endtime="20190121 10:22:42.866" starttime="20190121 10:22:42.833"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:42.891">(1548066161.585290)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88</msg>
<msg level="INFO" timestamp="20190121 10:22:42.893">${ret_list} = [{'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066161.585290', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:42.894" starttime="20190121 10:22:42.886"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:42.931" starttime="20190121 10:22:42.911"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:42.936">${resp_list} = [{'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066161.585290', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:42.937" starttime="20190121 10:22:41.729"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:42.959">${res_dict} = {'status': True, 'count': 1}</msg>
<status status="PASS" endtime="20190121 10:22:42.960" starttime="20190121 10:22:42.939"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:43.003" starttime="20190121 10:22:42.963"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:43.073">${value} = True</msg>
<status status="PASS" endtime="20190121 10:22:43.074" starttime="20190121 10:22:43.007"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:43.095" starttime="20190121 10:22:43.089"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:43.110">${resp} = True</msg>
<status status="PASS" endtime="20190121 10:22:43.111" starttime="20190121 10:22:40.395"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:43.118" starttime="20190121 10:22:43.114"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:43.120" starttime="20190121 10:22:40.353"></status>
</kw>
<kw name="cansend_125k">
<doc>Trigger to send can message on can with bitrate 125000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with bitrate 125000</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:43.172" starttime="20190121 10:22:43.140"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${125000}</arg>
<arg>${125_KBAUD}</arg>
<arg>${MSG_ID}</arg>
<arg>${MSG_ID_ISI}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:43.234" starttime="20190121 10:22:43.217"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:43.256">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:22:43.663">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:43.783">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:43.786">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:43.787" starttime="20190121 10:22:43.237"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:43.818" starttime="20190121 10:22:43.791"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:43.843">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg level="INFO" timestamp="20190121 10:22:43.901">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:44.007">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:44.011">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:44.012" starttime="20190121 10:22:43.821"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.042" starttime="20190121 10:22:44.016"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:44.072">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:22:44.138">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:44.270">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:44.273">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:44.274" starttime="20190121 10:22:44.046"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.292" starttime="20190121 10:22:44.278"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:22:44.295" starttime="20190121 10:22:43.196"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:44.305">Starting process:
candump -t a can2,1FF:1FF</msg>
<msg level="INFO" timestamp="20190121 10:22:44.340">${candump_ID} = 172</msg>
<status status="PASS" endtime="20190121 10:22:44.348" starttime="20190121 10:22:44.298"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.371" starttime="20190121 10:22:44.366"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:44.381">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 00</msg>
<status status="PASS" endtime="20190121 10:22:44.382" starttime="20190121 10:22:44.374"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.390" starttime="20190121 10:22:44.384"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:44.595">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 41 E1 C7</msg>
<status status="PASS" endtime="20190121 10:22:44.596" starttime="20190121 10:22:44.393"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:44.604">1E 10 54 93 00 08 00 0E AA 03 00 00 01 41 E1 C7</msg>
<status status="PASS" endtime="20190121 10:22:44.607" starttime="20190121 10:22:44.599"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.617" starttime="20190121 10:22:44.610"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:44.619" starttime="20190121 10:22:44.351"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.640" starttime="20190121 10:22:44.631"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:44.649">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status status="PASS" endtime="20190121 10:22:44.650" starttime="20190121 10:22:44.643"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.660" starttime="20190121 10:22:44.654"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:44.893">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 42 E3 C2</msg>
<status status="PASS" endtime="20190121 10:22:44.894" starttime="20190121 10:22:44.663"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:44.913">1E 10 54 93 00 08 00 0E AA 05 02 00 01 42 E3 C2</msg>
<status status="PASS" endtime="20190121 10:22:44.918" starttime="20190121 10:22:44.897"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.941" starttime="20190121 10:22:44.921"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:44.943" starttime="20190121 10:22:44.621"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.959" starttime="20190121 10:22:44.951"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:44.980">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 00 00 01 FF 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:44.981" starttime="20190121 10:22:44.971"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:44.990" starttime="20190121 10:22:44.984"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:45.182">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:45.183" starttime="20190121 10:22:44.993"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:45.185" starttime="20190121 10:22:44.962"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:45.199">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:46.226">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:46.230">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:46.244">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:46.248">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:46.249" starttime="20190121 10:22:45.194"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:46.275">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:46.277">${temp} = [' (1548066165.044171)  can2  1FF   [8]  11 22 33 44 55 66 77 88']</msg>
<status status="PASS" endtime="20190121 10:22:46.289" starttime="20190121 10:22:46.252"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:46.297">(1548066165.044171)  can2  1FF   [8]  11 22 33 44 55 66 77 88</msg>
<msg level="INFO" timestamp="20190121 10:22:46.315">${ret_list} = [{'payload': '1122334455667788', 'id': '1FF', 'timestamp': '1548066165.044171', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:46.315" starttime="20190121 10:22:46.292"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:46.344" starttime="20190121 10:22:46.319"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:46.351">${resp_list} = [{'payload': '1122334455667788', 'id': '1FF', 'timestamp': '1548066165.044171', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:46.352" starttime="20190121 10:22:45.187"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:46.372">${res_dict} = {'status': True, 'count': 1}</msg>
<status status="PASS" endtime="20190121 10:22:46.373" starttime="20190121 10:22:46.355"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:46.394" starttime="20190121 10:22:46.376"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:46.445">${value} = True</msg>
<status status="PASS" endtime="20190121 10:22:46.446" starttime="20190121 10:22:46.397"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:46.454" starttime="20190121 10:22:46.449"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:46.457">${resp} = True</msg>
<status status="PASS" endtime="20190121 10:22:46.458" starttime="20190121 10:22:43.174"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:46.465" starttime="20190121 10:22:46.461"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:46.468" starttime="20190121 10:22:43.133"></status>
</kw>
<kw name="cansend_125k_ex">
<doc>Trigger to send can message on can with 29 ID and bitrate 125000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with 29 ID and bitrate 125000</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:46.481" starttime="20190121 10:22:46.476"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${125000}</arg>
<arg>${125_KBAUD}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:46.514" starttime="20190121 10:22:46.507"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:46.524">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:22:46.608">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:46.781">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:46.788">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:46.789" starttime="20190121 10:22:46.517"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:46.882" starttime="20190121 10:22:46.822"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:46.906">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg level="INFO" timestamp="20190121 10:22:46.970">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:47.066">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:47.070">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:47.071" starttime="20190121 10:22:46.886"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:47.133" starttime="20190121 10:22:47.100"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:47.155">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:22:47.206">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:47.354">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:47.357">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:47.358" starttime="20190121 10:22:47.136"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:47.395" starttime="20190121 10:22:47.375"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:22:47.397" starttime="20190121 10:22:46.493"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:47.420">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg level="INFO" timestamp="20190121 10:22:47.490">${candump_ID} = 176</msg>
<status status="PASS" endtime="20190121 10:22:47.492" starttime="20190121 10:22:47.401"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:47.536" starttime="20190121 10:22:47.519"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:47.570">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 00</msg>
<status status="PASS" endtime="20190121 10:22:47.571" starttime="20190121 10:22:47.539"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:47.631" starttime="20190121 10:22:47.582"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:47.942">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 43 E1 C5</msg>
<status status="PASS" endtime="20190121 10:22:47.943" starttime="20190121 10:22:47.634"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:47.958">1E 10 54 93 00 08 00 0E AA 03 00 00 01 43 E1 C5</msg>
<status status="PASS" endtime="20190121 10:22:47.982" starttime="20190121 10:22:47.946"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:48.006" starttime="20190121 10:22:47.985"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:48.008" starttime="20190121 10:22:47.495"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:48.064" starttime="20190121 10:22:48.047"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:48.084">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status status="PASS" endtime="20190121 10:22:48.085" starttime="20190121 10:22:48.067"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:48.103" starttime="20190121 10:22:48.088"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:48.339">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 44 E3 C4</msg>
<status status="PASS" endtime="20190121 10:22:48.341" starttime="20190121 10:22:48.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:48.348">1E 10 54 93 00 08 00 0E AA 05 02 00 01 44 E3 C4</msg>
<status status="PASS" endtime="20190121 10:22:48.351" starttime="20190121 10:22:48.344"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:48.362" starttime="20190121 10:22:48.354"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:48.364" starttime="20190121 10:22:48.020"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:48.373" starttime="20190121 10:22:48.367"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:48.393">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:48.394" starttime="20190121 10:22:48.383"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:48.403" starttime="20190121 10:22:48.397"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:48.594">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:48.594" starttime="20190121 10:22:48.406"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:48.597" starttime="20190121 10:22:48.375"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:48.610">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:49.641">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:49.643">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:49.669">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:49.680">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:49.704" starttime="20190121 10:22:48.606"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:49.737">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:49.739">${temp} = [' (1548066168.456872)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88']</msg>
<status status="PASS" endtime="20190121 10:22:49.745" starttime="20190121 10:22:49.707"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:49.777">(1548066168.456872)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88</msg>
<msg level="INFO" timestamp="20190121 10:22:49.779">${ret_list} = [{'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066168.456872', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:49.780" starttime="20190121 10:22:49.748"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:49.848" starttime="20190121 10:22:49.799"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:49.852">${resp_list} = [{'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066168.456872', 'channel': 'can2'}]</msg>
<status status="PASS" endtime="20190121 10:22:49.853" starttime="20190121 10:22:48.599"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:49.875">${res_dict} = {'status': True, 'count': 1}</msg>
<status status="PASS" endtime="20190121 10:22:49.876" starttime="20190121 10:22:49.856"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:49.916" starttime="20190121 10:22:49.879"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:49.993">${value} = True</msg>
<status status="PASS" endtime="20190121 10:22:49.993" starttime="20190121 10:22:49.919"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.015" starttime="20190121 10:22:50.010"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:50.019">${resp} = True</msg>
<status status="PASS" endtime="20190121 10:22:50.020" starttime="20190121 10:22:46.483"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.041" starttime="20190121 10:22:50.035"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:50.054" starttime="20190121 10:22:46.470"></status>
</kw>
<kw name="can_setup_bitrate_1000k_negativtest">
<doc>Can setup channel and not supported bitrate 1000k negativtest</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and not supported bitrate 1000k negativtest</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.098" starttime="20190121 10:22:50.084"></status>
</kw>
<kw name="can_setup_bitrate_negativtest">
<doc>Can setup channel and bitrate negativtest</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${1000_KBAUD}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate negativtest</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.148" starttime="20190121 10:22:50.121"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:50.167">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 03</msg>
<status status="PASS" endtime="20190121 10:22:50.168" starttime="20190121 10:22:50.151"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.186" starttime="20190121 10:22:50.170"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:50.457">${info} = 1E 10 54 93 00 08 00 0E AA 03 04 00 01 45 E5 C3</msg>
<status status="PASS" endtime="20190121 10:22:50.458" starttime="20190121 10:22:50.189"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:50.480">1E 10 54 93 00 08 00 0E AA 03 04 00 01 45 E5 C3</msg>
<status status="PASS" endtime="20190121 10:22:50.495" starttime="20190121 10:22:50.461"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.505" starttime="20190121 10:22:50.498"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:50.513" starttime="20190121 10:22:50.100"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:50.515" starttime="20190121 10:22:50.057"></status>
</kw>
<kw name="trigger_can_message_125k">
<doc>Trigger to send 5 can messages on specified can channel without change any settings</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send 5 can messages on specified can channel without change any settings</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.528" starttime="20190121 10:22:50.523"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${125000}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.548" starttime="20190121 10:22:50.540"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:50.567">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:22:50.595">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:50.668">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:50.671">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:50.672" starttime="20190121 10:22:50.552"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.685" starttime="20190121 10:22:50.676"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:50.695">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg level="INFO" timestamp="20190121 10:22:50.724">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:50.781">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:50.785">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:50.786" starttime="20190121 10:22:50.688"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.798" starttime="20190121 10:22:50.789"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:50.808">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:22:50.836">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:50.921">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:50.924">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:50.925" starttime="20190121 10:22:50.801"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:50.938" starttime="20190121 10:22:50.929"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:22:50.940" starttime="20190121 10:22:50.530"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${MSG_ID_EX}:${MSG_ID_EX}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:50.955">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg level="INFO" timestamp="20190121 10:22:50.985">${candump_ID} = 180</msg>
<status status="PASS" endtime="20190121 10:22:50.987" starttime="20190121 10:22:50.944"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>5 times</arg>
<arg>trigger_to_send_can_msg</arg>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:51.011">Repeating keyword, round 1/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:51.037">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:51.038" starttime="20190121 10:22:51.028"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:51.046" starttime="20190121 10:22:51.041"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:51.238">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:51.239" starttime="20190121 10:22:51.050"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:51.242" starttime="20190121 10:22:51.014"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:51.243">Repeating keyword, round 2/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:51.262">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:51.263" starttime="20190121 10:22:51.254"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:51.272" starttime="20190121 10:22:51.266"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:51.461">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:51.462" starttime="20190121 10:22:51.275"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:51.466" starttime="20190121 10:22:51.246"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:51.467">Repeating keyword, round 3/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:51.488">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:51.489" starttime="20190121 10:22:51.480"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:51.498" starttime="20190121 10:22:51.492"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:51.687">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:51.689" starttime="20190121 10:22:51.500"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:51.691" starttime="20190121 10:22:51.470"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:51.692">Repeating keyword, round 4/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:51.712">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:51.713" starttime="20190121 10:22:51.703"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:51.722" starttime="20190121 10:22:51.716"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:51.915">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:51.916" starttime="20190121 10:22:51.725"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:51.918" starttime="20190121 10:22:51.695"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:51.919">Repeating keyword, round 5/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:51.939">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:51.940" starttime="20190121 10:22:51.931"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:51.949" starttime="20190121 10:22:51.943"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:52.139">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:52.141" starttime="20190121 10:22:51.952"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:52.144" starttime="20190121 10:22:51.922"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:52.145" starttime="20190121 10:22:50.995"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:52.158">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:53.186">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:53.188">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:53.192">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:53.195">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:53.195" starttime="20190121 10:22:52.154"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:53.204">5 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:53.206">${temp} = [' (1548066171.101047)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88', ' (1548066171.325430)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88', ' (1548066171.551513)  can2  18EF1B05   [8]  11 22 33 44 ...</msg>
<status status="PASS" endtime="20190121 10:22:53.207" starttime="20190121 10:22:53.199"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:53.215">(1548066171.101047)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88
 (1548066171.325430)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88
 (1548066171.551513)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88
 (1548066171.777995)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88
 (1548066172.002217)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88</msg>
<msg level="INFO" timestamp="20190121 10:22:53.218">${ret_list} = [{'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066171.101047', 'channel': 'can2'}, {'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066171.325430', 'channel': ...</msg>
<status status="PASS" endtime="20190121 10:22:53.219" starttime="20190121 10:22:53.210"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.229" starttime="20190121 10:22:53.223"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:53.234">${resp_list} = [{'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066171.101047', 'channel': 'can2'}, {'payload': '1122334455667788', 'id': '18EF1B05', 'timestamp': '1548066171.325430', 'channel': ...</msg>
<status status="PASS" endtime="20190121 10:22:53.234" starttime="20190121 10:22:52.148"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:53.244">${res_dict} = {'status': True, 'count': 5}</msg>
<status status="PASS" endtime="20190121 10:22:53.245" starttime="20190121 10:22:53.237"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.258" starttime="20190121 10:22:53.249"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:53.293">${value} = True</msg>
<status status="PASS" endtime="20190121 10:22:53.293" starttime="20190121 10:22:53.261"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.301" starttime="20190121 10:22:53.296"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("count")</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:53.334">${count} = 5</msg>
<status status="PASS" endtime="20190121 10:22:53.335" starttime="20190121 10:22:53.304"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${5}</arg>
<arg>${count}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.344" starttime="20190121 10:22:53.338"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:53.346" starttime="20190121 10:22:50.517"></status>
</kw>
<kw name="set_controller_off">
<doc>Test controller switching off</doc>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_OFF}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.367" starttime="20190121 10:22:53.362"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:53.377">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 00</msg>
<status status="PASS" endtime="20190121 10:22:53.378" starttime="20190121 10:22:53.370"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.386" starttime="20190121 10:22:53.380"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:53.591">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 46 E3 C6</msg>
<status status="PASS" endtime="20190121 10:22:53.593" starttime="20190121 10:22:53.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:53.600">1E 10 54 93 00 08 00 0E AA 05 02 00 01 46 E3 C6</msg>
<status status="PASS" endtime="20190121 10:22:53.603" starttime="20190121 10:22:53.596"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.613" starttime="20190121 10:22:53.606"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:53.616" starttime="20190121 10:22:53.354"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:53.618" starttime="20190121 10:22:53.349"></status>
</kw>
<kw name="channel_off_trigger_can_message_125k_negativtest">
<doc>Set the channel off and trigger to send 5 can messages on specified can channel</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the channel off and trigger to send 5 can messages on specified can channel</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.631" starttime="20190121 10:22:53.626"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${125000}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.651" starttime="20190121 10:22:53.644"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:53.661">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:22:53.689">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:53.767">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:53.770">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:53.771" starttime="20190121 10:22:53.654"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:53.817" starttime="20190121 10:22:53.783"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:53.906">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg level="INFO" timestamp="20190121 10:22:53.965">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:54.016">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:54.019">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:54.020" starttime="20190121 10:22:53.872"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:54.033" starttime="20190121 10:22:54.024"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:54.042">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:22:54.071">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:54.162">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:54.165">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:22:54.166" starttime="20190121 10:22:54.036"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:54.210" starttime="20190121 10:22:54.170"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:22:54.246" starttime="20190121 10:22:53.634"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${MSG_ID_EX}:${MSG_ID_EX}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:54.292">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg level="INFO" timestamp="20190121 10:22:54.367">${candump_ID} = 184</msg>
<status status="PASS" endtime="20190121 10:22:54.368" starttime="20190121 10:22:54.250"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>5 times</arg>
<arg>trigger_to_send_can_msg</arg>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:54.424">Repeating keyword, round 1/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:54.497">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:54.499" starttime="20190121 10:22:54.465"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:54.518" starttime="20190121 10:22:54.502"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:54.714">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:54.714" starttime="20190121 10:22:54.522"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:54.718" starttime="20190121 10:22:54.435"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:54.718">Repeating keyword, round 2/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:54.739">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:54.740" starttime="20190121 10:22:54.731"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:54.749" starttime="20190121 10:22:54.743"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:54.938">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:54.939" starttime="20190121 10:22:54.752"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:54.942" starttime="20190121 10:22:54.721"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:54.943">Repeating keyword, round 3/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:54.963">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:54.964" starttime="20190121 10:22:54.954"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:54.973" starttime="20190121 10:22:54.966"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:55.167">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:55.169" starttime="20190121 10:22:54.976"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:55.171" starttime="20190121 10:22:54.946"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:55.172">Repeating keyword, round 4/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:55.191">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:55.192" starttime="20190121 10:22:55.183"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:55.201" starttime="20190121 10:22:55.195"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:55.390">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:55.391" starttime="20190121 10:22:55.204"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:55.394" starttime="20190121 10:22:55.175"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:55.395">Repeating keyword, round 5/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:55.415">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status status="PASS" endtime="20190121 10:22:55.415" starttime="20190121 10:22:55.406"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:55.426" starttime="20190121 10:22:55.418"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:55.615">${info} = </msg>
<status status="PASS" endtime="20190121 10:22:55.617" starttime="20190121 10:22:55.429"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:55.619" starttime="20190121 10:22:55.397"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:55.620" starttime="20190121 10:22:54.419"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:55.634">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:22:56.700">Process did not complete in 1 second.</msg>
<msg level="INFO" timestamp="20190121 10:22:56.701">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:22:56.733">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:22:56.736">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:22:56.741" starttime="20190121 10:22:55.630"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:56.772">0 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:22:56.774">${temp} = []</msg>
<status status="PASS" endtime="20190121 10:22:56.775" starttime="20190121 10:22:56.744"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:56.804">${ret_list} = []</msg>
<status status="PASS" endtime="20190121 10:22:56.805" starttime="20190121 10:22:56.799"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:56.837" starttime="20190121 10:22:56.817"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:22:56.841">${resp_list} = []</msg>
<status status="PASS" endtime="20190121 10:22:56.842" starttime="20190121 10:22:55.623"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:56.866">${res_dict} = {'status': False, 'count': 0}</msg>
<status status="PASS" endtime="20190121 10:22:56.867" starttime="20190121 10:22:56.845"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:56.907" starttime="20190121 10:22:56.888"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:56.986">${value} = False</msg>
<status status="PASS" endtime="20190121 10:22:56.987" starttime="20190121 10:22:56.910"></status>
</kw>
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:57.007" starttime="20190121 10:22:57.002"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("count")</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:57.085">${count} = 0</msg>
<status status="PASS" endtime="20190121 10:22:57.086" starttime="20190121 10:22:57.010"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${0}</arg>
<arg>${count}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:57.102" starttime="20190121 10:22:57.096"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:57.105" starttime="20190121 10:22:53.620"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<doc>Teardown, Switch power off and close the Serial port, Switch off the CanController</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Teardown call</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:57.125" starttime="20190121 10:22:57.118"></status>
</kw>
<kw name="set_controller_off">
<doc>Test controller switching off</doc>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_OFF}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:57.148" starttime="20190121 10:22:57.144"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:57.158">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 00</msg>
<status status="PASS" endtime="20190121 10:22:57.159" starttime="20190121 10:22:57.151"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:57.167" starttime="20190121 10:22:57.162"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:22:57.395">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 45 E3 C5</msg>
<status status="PASS" endtime="20190121 10:22:57.396" starttime="20190121 10:22:57.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:57.403">1E 10 54 93 00 08 00 0E AA 05 02 00 01 45 E3 C5</msg>
<status status="PASS" endtime="20190121 10:22:57.406" starttime="20190121 10:22:57.399"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:57.417" starttime="20190121 10:22:57.409"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:57.419" starttime="20190121 10:22:57.134"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:57.421" starttime="20190121 10:22:57.127"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:57.471" starttime="20190121 10:22:57.424"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:57.533" starttime="20190121 10:22:57.475"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:22:57.581" starttime="20190121 10:22:57.537"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:57.584" starttime="20190121 10:22:57.109"></status>
</kw>
<doc>Implements Test Task SKTB-47669 for can3 channel</doc>
<tags>
<tag>CAN 3 test TX</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:22:57.585" starttime="20190121 10:22:25.706"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:22:59.085">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:22:59.110">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:22:59.111" starttime="20190121 10:22:57.636"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:59.129" starttime="20190121 10:22:57.605"></status>
</kw>
<status status="PASS" endtime="20190121 10:22:59.131" starttime="20190121 10:22:57.599"></status>
</kw>
<doc>CAN 3 test TX with FBUS</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:22:59.132" starttime="20190121 10:22:22.961"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-48413.robot" name="SKTB-48413" id="s1-s10">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:59.873">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:22:59.882" starttime="20190121 10:22:59.857"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:22:59.891">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:22:59.915">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:23:02.269">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:23:02.271" starttime="20190121 10:22:59.885"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:02.274" starttime="20190121 10:22:59.851"></status>
</kw>
<test name="SKTB-48413 FBUS test" id="s1-s10-t1">
<kw name="Test_precondition" type="setup">
<doc>switch kl15 and kl 30 and prodmod off and on after defined time</doc>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:02.463" starttime="20190121 10:23:02.335"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:02.558" starttime="20190121 10:23:02.485"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:02.658" starttime="20190121 10:23:02.561"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:04.666">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:23:04.668" starttime="20190121 10:23:02.661"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:04.719" starttime="20190121 10:23:04.671"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:04.770" starttime="20190121 10:23:04.722"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:04.817" starttime="20190121 10:23:04.773"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:04.869" starttime="20190121 10:23:04.821"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:04.917" starttime="20190121 10:23:04.872"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:04.967" starttime="20190121 10:23:04.921"></status>
</kw>
<kw name="Fbus Set State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${15000}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:05.023" starttime="20190121 10:23:04.971"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:07.032">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:23:07.035" starttime="20190121 10:23:05.027"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:07.037" starttime="20190121 10:23:02.321"></status>
</kw>
<kw name="digit_out_led1_freq">
<doc>Toggle digital output led 1 with the supported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle digital output led 1 with the supported frequency</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.052" starttime="20190121 10:23:07.048"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${FREQ_SUPPORTED}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:07.074">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 04 01 01</msg>
<status status="PASS" endtime="20190121 10:23:07.075" starttime="20190121 10:23:07.067"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.083" starttime="20190121 10:23:07.078"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:07.287">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 00 04 01 43 3D F5</msg>
<status status="PASS" endtime="20190121 10:23:07.288" starttime="20190121 10:23:07.086"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.297" starttime="20190121 10:23:07.291"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.309" starttime="20190121 10:23:07.300"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:07.311" starttime="20190121 10:23:07.055"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.318" starttime="20190121 10:23:07.314"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:07.336">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 04</msg>
<status status="PASS" endtime="20190121 10:23:07.337" starttime="20190121 10:23:07.330"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.345" starttime="20190121 10:23:07.340"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:07.552">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 04 02 00 01 44 3E FB</msg>
<status status="PASS" endtime="20190121 10:23:07.553" starttime="20190121 10:23:07.348"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.562" starttime="20190121 10:23:07.556"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.573" starttime="20190121 10:23:07.565"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:07.581">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '04', '02', '00', '01', '44', '3E', 'FB']</msg>
<status status="PASS" endtime="20190121 10:23:07.582" starttime="20190121 10:23:07.576"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:07.591">${value} = 00</msg>
<status status="PASS" endtime="20190121 10:23:07.591" starttime="20190121 10:23:07.585"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:07.595" starttime="20190121 10:23:07.321"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:07.597" starttime="20190121 10:23:07.040"></status>
</kw>
<kw name="digit_out_led1_freq_negativtest">
<doc>Toggle the digital output led 1 with the notsupported frequency negativ test</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output led 1 with the notsupported frequency negativtest</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.612" starttime="20190121 10:23:07.607"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${FREQ_NOT_SUPPORTED}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:07.631">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 04 01 0B</msg>
<status status="PASS" endtime="20190121 10:23:07.632" starttime="20190121 10:23:07.624"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.641" starttime="20190121 10:23:07.635"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:07.842">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 01 04 01 45 3C F3</msg>
<status status="PASS" endtime="20190121 10:23:07.843" starttime="20190121 10:23:07.643"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.852" starttime="20190121 10:23:07.846"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.863" starttime="20190121 10:23:07.855"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:07.866" starttime="20190121 10:23:07.614"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.874" starttime="20190121 10:23:07.868"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:07.891">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 04</msg>
<status status="PASS" endtime="20190121 10:23:07.892" starttime="20190121 10:23:07.886"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:07.901" starttime="20190121 10:23:07.895"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.107">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 04 02 00 01 40 3E FF</msg>
<status status="PASS" endtime="20190121 10:23:08.107" starttime="20190121 10:23:07.904"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.117" starttime="20190121 10:23:08.111"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.129" starttime="20190121 10:23:08.120"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.137">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '04', '02', '00', '01', '40', '3E', 'FF']</msg>
<status status="PASS" endtime="20190121 10:23:08.138" starttime="20190121 10:23:08.132"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.147">${value} = 00</msg>
<status status="PASS" endtime="20190121 10:23:08.147" starttime="20190121 10:23:08.141"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:08.151" starttime="20190121 10:23:07.876"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:08.175" starttime="20190121 10:23:07.601"></status>
</kw>
<kw name="digit_out_led1_high">
<doc>Set the digital output led 1 high and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output led 1 high and test it</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.201" starttime="20190121 10:23:08.184"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${IO_HIGH}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.243">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 04 01</msg>
<status status="PASS" endtime="20190121 10:23:08.244" starttime="20190121 10:23:08.224"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.254" starttime="20190121 10:23:08.247"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.457">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 04 01 41 3D F3</msg>
<status status="PASS" endtime="20190121 10:23:08.458" starttime="20190121 10:23:08.257"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.467" starttime="20190121 10:23:08.462"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.478" starttime="20190121 10:23:08.470"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:08.480" starttime="20190121 10:23:08.203"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.497">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 04</msg>
<status status="PASS" endtime="20190121 10:23:08.498" starttime="20190121 10:23:08.492"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.507" starttime="20190121 10:23:08.501"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.709">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 04 00 01 01 42 3D FC</msg>
<status status="PASS" endtime="20190121 10:23:08.710" starttime="20190121 10:23:08.510"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.719" starttime="20190121 10:23:08.713"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.730" starttime="20190121 10:23:08.722"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.737">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '04', '00', '01', '01', '42', '3D', 'FC']</msg>
<status status="PASS" endtime="20190121 10:23:08.738" starttime="20190121 10:23:08.733"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.750">${value} = 01</msg>
<status status="PASS" endtime="20190121 10:23:08.751" starttime="20190121 10:23:08.743"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:08.755">${res} = 01</msg>
<status status="PASS" endtime="20190121 10:23:08.756" starttime="20190121 10:23:08.482"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.764" starttime="20190121 10:23:08.758"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:08.766" starttime="20190121 10:23:08.177"></status>
</kw>
<kw name="digit_out_led1_low">
<doc>Set the digital output led 1 low and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output led 1 low and test it</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.779" starttime="20190121 10:23:08.775"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${IO_LOW}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:08.799">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 04 00</msg>
<status status="PASS" endtime="20190121 10:23:08.800" starttime="20190121 10:23:08.792"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:08.810" starttime="20190121 10:23:08.804"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:09.015">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 04 01 45 3D F7</msg>
<status status="PASS" endtime="20190121 10:23:09.015" starttime="20190121 10:23:08.813"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.043" starttime="20190121 10:23:09.019"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.066" starttime="20190121 10:23:09.046"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:09.068" starttime="20190121 10:23:08.782"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:09.098">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 04</msg>
<status status="PASS" endtime="20190121 10:23:09.099" starttime="20190121 10:23:09.092"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.129" starttime="20190121 10:23:09.108"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:09.371">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 04 00 00 01 46 3D F9</msg>
<status status="PASS" endtime="20190121 10:23:09.372" starttime="20190121 10:23:09.132"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.387" starttime="20190121 10:23:09.375"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.398" starttime="20190121 10:23:09.390"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:09.406">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '04', '00', '00', '01', '46', '3D', 'F9']</msg>
<status status="PASS" endtime="20190121 10:23:09.407" starttime="20190121 10:23:09.401"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:09.416">${value} = 00</msg>
<status status="PASS" endtime="20190121 10:23:09.416" starttime="20190121 10:23:09.410"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:09.420">${res} = 00</msg>
<status status="PASS" endtime="20190121 10:23:09.421" starttime="20190121 10:23:09.070"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_LOW}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.429" starttime="20190121 10:23:09.424"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:09.431" starttime="20190121 10:23:08.768"></status>
</kw>
<kw name="digit_out_led2_freq">
<doc>Toggle the digital output led 2 with the supported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output led 2</arg>
<arg>with the supported frequency</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.445" starttime="20190121 10:23:09.440"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${FREQ_SUPPORTED}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:09.482">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 05 01 01</msg>
<status status="PASS" endtime="20190121 10:23:09.483" starttime="20190121 10:23:09.456"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.503" starttime="20190121 10:23:09.487"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:09.751">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 00 05 01 47 3D F0</msg>
<status status="PASS" endtime="20190121 10:23:09.753" starttime="20190121 10:23:09.506"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.761" starttime="20190121 10:23:09.756"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.773" starttime="20190121 10:23:09.764"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:09.775" starttime="20190121 10:23:09.447"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.782" starttime="20190121 10:23:09.778"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:09.801">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 05</msg>
<status status="PASS" endtime="20190121 10:23:09.802" starttime="20190121 10:23:09.795"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:09.812" starttime="20190121 10:23:09.806"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.015">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 05 02 00 01 40 3E FE</msg>
<status status="PASS" endtime="20190121 10:23:10.017" starttime="20190121 10:23:09.815"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.025" starttime="20190121 10:23:10.020"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.036" starttime="20190121 10:23:10.028"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.051">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '05', '02', '00', '01', '40', '3E', 'FE']</msg>
<status status="PASS" endtime="20190121 10:23:10.054" starttime="20190121 10:23:10.039"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.063">${value} = 00</msg>
<status status="PASS" endtime="20190121 10:23:10.064" starttime="20190121 10:23:10.057"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:10.067" starttime="20190121 10:23:09.785"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:10.069" starttime="20190121 10:23:09.433"></status>
</kw>
<kw name="digit_out_led2_freq_negativtest">
<doc>Toggle the digital output led 2 with the notsupported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output led 2 with the notsupported frequency</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.083" starttime="20190121 10:23:10.078"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${FREQ_NOT_SUPPORTED}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.102">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 05 01 0B</msg>
<status status="PASS" endtime="20190121 10:23:10.102" starttime="20190121 10:23:10.095"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.111" starttime="20190121 10:23:10.105"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.316">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 01 05 01 41 3C F6</msg>
<status status="PASS" endtime="20190121 10:23:10.317" starttime="20190121 10:23:10.114"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.326" starttime="20190121 10:23:10.320"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.336" starttime="20190121 10:23:10.329"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:10.338" starttime="20190121 10:23:10.085"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.346" starttime="20190121 10:23:10.341"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.363">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 05</msg>
<status status="PASS" endtime="20190121 10:23:10.364" starttime="20190121 10:23:10.358"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.373" starttime="20190121 10:23:10.367"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.586">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 05 02 00 01 42 3E FC</msg>
<status status="PASS" endtime="20190121 10:23:10.587" starttime="20190121 10:23:10.376"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.596" starttime="20190121 10:23:10.591"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.607" starttime="20190121 10:23:10.599"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.615">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '05', '02', '00', '01', '42', '3E', 'FC']</msg>
<status status="PASS" endtime="20190121 10:23:10.616" starttime="20190121 10:23:10.610"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.624">${value} = 00</msg>
<status status="PASS" endtime="20190121 10:23:10.625" starttime="20190121 10:23:10.619"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:10.628" starttime="20190121 10:23:10.348"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:10.631" starttime="20190121 10:23:10.072"></status>
</kw>
<kw name="digit_out_led2_high">
<doc>Set the digital output led 2 high and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output led 2 high and test it</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.645" starttime="20190121 10:23:10.640"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${IO_HIGH}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.664">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 05 01</msg>
<status status="PASS" endtime="20190121 10:23:10.665" starttime="20190121 10:23:10.657"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.674" starttime="20190121 10:23:10.668"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.877">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 05 01 43 3D F0</msg>
<status status="PASS" endtime="20190121 10:23:10.878" starttime="20190121 10:23:10.677"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.888" starttime="20190121 10:23:10.882"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.898" starttime="20190121 10:23:10.891"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:10.901" starttime="20190121 10:23:10.647"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:10.922">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 05</msg>
<status status="PASS" endtime="20190121 10:23:10.923" starttime="20190121 10:23:10.916"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:10.931" starttime="20190121 10:23:10.926"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.134">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 05 00 01 01 44 3D FB</msg>
<status status="PASS" endtime="20190121 10:23:11.135" starttime="20190121 10:23:10.934"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.144" starttime="20190121 10:23:11.139"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.155" starttime="20190121 10:23:11.147"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.163">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '05', '00', '01', '01', '44', '3D', 'FB']</msg>
<status status="PASS" endtime="20190121 10:23:11.164" starttime="20190121 10:23:11.158"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.173">${value} = 01</msg>
<status status="PASS" endtime="20190121 10:23:11.173" starttime="20190121 10:23:11.167"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:11.177">${res} = 01</msg>
<status status="PASS" endtime="20190121 10:23:11.178" starttime="20190121 10:23:10.903"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.186" starttime="20190121 10:23:11.181"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:11.188" starttime="20190121 10:23:10.633"></status>
</kw>
<kw name="digit_out_led2_low">
<doc>Set the digital output led 2 low and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output led 2 low and test it</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.201" starttime="20190121 10:23:11.197"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${IO_LOW}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.221">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 05 00</msg>
<status status="PASS" endtime="20190121 10:23:11.222" starttime="20190121 10:23:11.214"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.230" starttime="20190121 10:23:11.224"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.430">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 05 01 45 3D F6</msg>
<status status="PASS" endtime="20190121 10:23:11.430" starttime="20190121 10:23:11.233"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.440" starttime="20190121 10:23:11.434"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.450" starttime="20190121 10:23:11.443"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:11.452" starttime="20190121 10:23:11.204"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.472">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 05</msg>
<status status="PASS" endtime="20190121 10:23:11.473" starttime="20190121 10:23:11.465"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.481" starttime="20190121 10:23:11.476"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.682">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 05 00 00 01 46 3D F8</msg>
<status status="PASS" endtime="20190121 10:23:11.683" starttime="20190121 10:23:11.484"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.692" starttime="20190121 10:23:11.687"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.703" starttime="20190121 10:23:11.695"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.711">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '05', '00', '00', '01', '46', '3D', 'F8']</msg>
<status status="PASS" endtime="20190121 10:23:11.712" starttime="20190121 10:23:11.706"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.721">${value} = 00</msg>
<status status="PASS" endtime="20190121 10:23:11.722" starttime="20190121 10:23:11.715"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:11.725">${res} = 00</msg>
<status status="PASS" endtime="20190121 10:23:11.726" starttime="20190121 10:23:11.455"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_LOW}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.734" starttime="20190121 10:23:11.729"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:11.736" starttime="20190121 10:23:11.190"></status>
</kw>
<kw name="digit_out_crm_freq">
<doc>Toggle the digital output CRM with the supported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output CRM with the supported frequency</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.749" starttime="20190121 10:23:11.744"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${FREQ_SUPPORTED}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.772">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 06 01 01</msg>
<status status="PASS" endtime="20190121 10:23:11.773" starttime="20190121 10:23:11.765"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.781" starttime="20190121 10:23:11.776"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:11.982">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 00 06 01 47 3D F3</msg>
<status status="PASS" endtime="20190121 10:23:11.983" starttime="20190121 10:23:11.784"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:11.992" starttime="20190121 10:23:11.986"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.003" starttime="20190121 10:23:11.995"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:12.005" starttime="20190121 10:23:11.751"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.013" starttime="20190121 10:23:12.008"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:12.030">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 06</msg>
<status status="PASS" endtime="20190121 10:23:12.031" starttime="20190121 10:23:12.025"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.040" starttime="20190121 10:23:12.034"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:12.362">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 06 02 00 01 46 3E FB</msg>
<status status="PASS" endtime="20190121 10:23:12.363" starttime="20190121 10:23:12.043"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.382" starttime="20190121 10:23:12.366"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.396" starttime="20190121 10:23:12.388"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:12.438">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '06', '02', '00', '01', '46', '3E', 'FB']</msg>
<status status="PASS" endtime="20190121 10:23:12.439" starttime="20190121 10:23:12.413"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:12.472">${value} = 00</msg>
<status status="PASS" endtime="20190121 10:23:12.473" starttime="20190121 10:23:12.442"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:12.487" starttime="20190121 10:23:12.015"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:12.489" starttime="20190121 10:23:11.738"></status>
</kw>
<kw name="digit_out_crm_freq_negativtest">
<doc>Toggle the digital output led 2 with the notsupported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output led 2 with the notsupported frequency</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.538" starttime="20190121 10:23:12.518"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${FREQ_NOT_SUPPORTED}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:12.582">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 06 01 0B</msg>
<status status="PASS" endtime="20190121 10:23:12.583" starttime="20190121 10:23:12.575"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.614" starttime="20190121 10:23:12.598"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:12.833">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 01 06 01 47 3C F3</msg>
<status status="PASS" endtime="20190121 10:23:12.834" starttime="20190121 10:23:12.617"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.843" starttime="20190121 10:23:12.837"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.853" starttime="20190121 10:23:12.846"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:12.856" starttime="20190121 10:23:12.541"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.863" starttime="20190121 10:23:12.859"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:12.881">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 06</msg>
<status status="PASS" endtime="20190121 10:23:12.882" starttime="20190121 10:23:12.875"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:12.893" starttime="20190121 10:23:12.885"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:13.101">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 06 02 00 01 40 3E FD</msg>
<status status="PASS" endtime="20190121 10:23:13.102" starttime="20190121 10:23:12.896"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.111" starttime="20190121 10:23:13.105"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.122" starttime="20190121 10:23:13.114"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:13.129">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '06', '02', '00', '01', '40', '3E', 'FD']</msg>
<status status="PASS" endtime="20190121 10:23:13.130" starttime="20190121 10:23:13.125"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:13.139">${value} = 00</msg>
<status status="PASS" endtime="20190121 10:23:13.140" starttime="20190121 10:23:13.133"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:13.143" starttime="20190121 10:23:12.865"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:13.145" starttime="20190121 10:23:12.491"></status>
</kw>
<kw name="digit_out_crm_high">
<doc>Set the digital output crm high and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output crm high and test it</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.159" starttime="20190121 10:23:13.154"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${IO_HIGH}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:13.178">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 06 01</msg>
<status status="PASS" endtime="20190121 10:23:13.179" starttime="20190121 10:23:13.171"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.187" starttime="20190121 10:23:13.182"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:13.390">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 06 01 41 3D F1</msg>
<status status="PASS" endtime="20190121 10:23:13.391" starttime="20190121 10:23:13.190"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.400" starttime="20190121 10:23:13.395"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.420" starttime="20190121 10:23:13.403"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:13.423" starttime="20190121 10:23:13.161"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:13.450">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 06</msg>
<status status="PASS" endtime="20190121 10:23:13.451" starttime="20190121 10:23:13.440"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.459" starttime="20190121 10:23:13.454"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:13.681">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 06 00 01 01 42 3D FE</msg>
<status status="PASS" endtime="20190121 10:23:13.682" starttime="20190121 10:23:13.462"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.739" starttime="20190121 10:23:13.705"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.816" starttime="20190121 10:23:13.743"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:13.866">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '06', '00', '01', '01', '42', '3D', 'FE']</msg>
<status status="PASS" endtime="20190121 10:23:13.867" starttime="20190121 10:23:13.820"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:13.912">${value} = 01</msg>
<status status="PASS" endtime="20190121 10:23:13.917" starttime="20190121 10:23:13.874"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:13.953">${res} = 01</msg>
<status status="PASS" endtime="20190121 10:23:13.954" starttime="20190121 10:23:13.425"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:13.994" starttime="20190121 10:23:13.963"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:14.000" starttime="20190121 10:23:13.147"></status>
</kw>
<kw name="digit_out_crm_low">
<doc>Set the digital output crm low and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output crm low and test it</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:14.093" starttime="20190121 10:23:14.034"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${IO_LOW}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:14.148">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 06 00</msg>
<status status="PASS" endtime="20190121 10:23:14.149" starttime="20190121 10:23:14.142"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:14.202" starttime="20190121 10:23:14.152"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:14.449">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 06 01 43 3D F3</msg>
<status status="PASS" endtime="20190121 10:23:14.450" starttime="20190121 10:23:14.206"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:14.488" starttime="20190121 10:23:14.453"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:14.503" starttime="20190121 10:23:14.491"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:14.505" starttime="20190121 10:23:14.095"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:14.558">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 06</msg>
<status status="PASS" endtime="20190121 10:23:14.558" starttime="20190121 10:23:14.539"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:14.592" starttime="20190121 10:23:14.561"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:14.857">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 06 00 00 01 44 3D F9</msg>
<status status="PASS" endtime="20190121 10:23:14.858" starttime="20190121 10:23:14.595"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:14.887" starttime="20190121 10:23:14.873"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:14.911" starttime="20190121 10:23:14.891"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:14.921">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '06', '00', '00', '01', '44', '3D', 'F9']</msg>
<status status="PASS" endtime="20190121 10:23:14.939" starttime="20190121 10:23:14.914"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:14.963">${value} = 00</msg>
<status status="PASS" endtime="20190121 10:23:14.964" starttime="20190121 10:23:14.943"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:14.967">${res} = 00</msg>
<status status="PASS" endtime="20190121 10:23:14.968" starttime="20190121 10:23:14.508"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_LOW}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:14.985" starttime="20190121 10:23:14.980"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:15.007" starttime="20190121 10:23:14.003"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:15.107" starttime="20190121 10:23:15.026"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:15.171" starttime="20190121 10:23:15.110"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:15.227" starttime="20190121 10:23:15.175"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:17.242">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:23:17.245" starttime="20190121 10:23:15.230"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:17.294" starttime="20190121 10:23:17.247"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:17.447" starttime="20190121 10:23:17.297"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:17.449" starttime="20190121 10:23:15.011"></status>
</kw>
<doc>Implements Test Task SKTB-48413 toggle Digital Output Leds</doc>
<tags>
<tag>GPIO Test</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:23:17.451" starttime="20190121 10:23:02.275"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:23:18.991">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:23:19.011">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:23:19.013" starttime="20190121 10:23:17.537"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:19.014" starttime="20190121 10:23:17.491"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:19.042" starttime="20190121 10:23:17.469"></status>
</kw>
<doc>Chorus GPIO LED1, LED2, CRM test</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:23:19.043" starttime="20190121 10:22:59.298"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-49038.robot" name="SKTB-49038" id="s1-s11">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:19.779">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:23:19.790" starttime="20190121 10:23:19.769"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:19.799">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:23:19.813">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:23:22.027">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:23:22.029" starttime="20190121 10:23:19.793"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:22.061" starttime="20190121 10:23:19.764"></status>
</kw>
<test name="SKTB-GPIO FBUS test" id="s1-s11-t1">
<kw name="Test_precondition" type="setup">
<doc>switch kl15 and kl 30 and prodmod off and on after defined time</doc>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:22.176" starttime="20190121 10:23:22.089"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:22.261" starttime="20190121 10:23:22.178"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:22.362" starttime="20190121 10:23:22.280"></status>
</kw>
<kw name="Bidir Wake Up" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:22.942" starttime="20190121 10:23:22.365"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:24.949">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:23:24.952" starttime="20190121 10:23:22.945"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:25.005" starttime="20190121 10:23:24.954"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:25.054" starttime="20190121 10:23:25.008"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:25.103" starttime="20190121 10:23:25.058"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:25.153" starttime="20190121 10:23:25.106"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:25.203" starttime="20190121 10:23:25.157"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:25.253" starttime="20190121 10:23:25.207"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:27.261">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:23:27.263" starttime="20190121 10:23:25.256"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:27.265" starttime="20190121 10:23:22.083"></status>
</kw>
<kw name="digit_input_1">
<doc>Get digital input 1</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get digital input 1</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.279" starttime="20190121 10:23:27.275"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${MCU_DIGIN_1_BUTTON_1}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:27.308">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 0A</msg>
<status status="PASS" endtime="20190121 10:23:27.309" starttime="20190121 10:23:27.303"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg (GET_ REQ): ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.318" starttime="20190121 10:23:27.312"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:27.521">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 0A 00 01 01 43 3D F3</msg>
<status status="PASS" endtime="20190121 10:23:27.522" starttime="20190121 10:23:27.321"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.530" starttime="20190121 10:23:27.525"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.541" starttime="20190121 10:23:27.533"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:27.549">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '0A', '00', '01', '01', '43', '3D', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:27.550" starttime="20190121 10:23:27.544"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:27.558">${value} = 01</msg>
<status status="PASS" endtime="20190121 10:23:27.559" starttime="20190121 10:23:27.553"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:27.563">${res} = 01</msg>
<status status="PASS" endtime="20190121 10:23:27.564" starttime="20190121 10:23:27.282"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.571" starttime="20190121 10:23:27.567"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:27.574" starttime="20190121 10:23:27.268"></status>
</kw>
<kw name="digit_input_2">
<doc>Get digital input 2</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get digital input 2</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.587" starttime="20190121 10:23:27.583"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${MCU_DIGIN_2_BUTTON_2}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:27.639">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 0B</msg>
<status status="PASS" endtime="20190121 10:23:27.640" starttime="20190121 10:23:27.621"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg (GET_ REQ): ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.658" starttime="20190121 10:23:27.643"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:27.893">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 0B 00 01 01 44 3D F5</msg>
<status status="PASS" endtime="20190121 10:23:27.894" starttime="20190121 10:23:27.661"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.902" starttime="20190121 10:23:27.897"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.914" starttime="20190121 10:23:27.905"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:27.921">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '0B', '00', '01', '01', '44', '3D', 'F5']</msg>
<status status="PASS" endtime="20190121 10:23:27.922" starttime="20190121 10:23:27.917"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:27.931">${value} = 01</msg>
<status status="PASS" endtime="20190121 10:23:27.932" starttime="20190121 10:23:27.925"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:27.936">${res} = 01</msg>
<status status="PASS" endtime="20190121 10:23:27.936" starttime="20190121 10:23:27.596"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.945" starttime="20190121 10:23:27.939"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:27.947" starttime="20190121 10:23:27.576"></status>
</kw>
<kw name="digit_input_3">
<doc>Get digital input 3</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get digital input 3</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.960" starttime="20190121 10:23:27.956"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${MCU_DIGIN_3_AIRB_PWM}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:27.979">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 0C</msg>
<status status="PASS" endtime="20190121 10:23:27.980" starttime="20190121 10:23:27.973"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg (GET_ REQ): ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:27.988" starttime="20190121 10:23:27.983"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:28.191">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 0C 00 01 01 45 3D F3</msg>
<status status="PASS" endtime="20190121 10:23:28.192" starttime="20190121 10:23:27.991"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.201" starttime="20190121 10:23:28.195"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.212" starttime="20190121 10:23:28.203"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:28.224">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '0C', '00', '01', '01', '45', '3D', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:28.225" starttime="20190121 10:23:28.215"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:28.233">${value} = 01</msg>
<status status="PASS" endtime="20190121 10:23:28.234" starttime="20190121 10:23:28.228"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:28.238">${res} = 01</msg>
<status status="PASS" endtime="20190121 10:23:28.239" starttime="20190121 10:23:27.962"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.248" starttime="20190121 10:23:28.242"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:28.251" starttime="20190121 10:23:27.950"></status>
</kw>
<kw name="digit_input_bid">
<doc>Get digital input BIDR WUL</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get digital input BIDR WUL</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.264" starttime="20190121 10:23:28.259"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${BIDIR_WUL_IN}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:28.281">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 0E</msg>
<status status="PASS" endtime="20190121 10:23:28.282" starttime="20190121 10:23:28.275"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg (GET_ REQ): ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.291" starttime="20190121 10:23:28.285"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:28.494">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 0E 00 01 01 40 3D F4</msg>
<status status="PASS" endtime="20190121 10:23:28.495" starttime="20190121 10:23:28.294"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.504" starttime="20190121 10:23:28.499"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.518" starttime="20190121 10:23:28.509"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:28.528">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '0E', '00', '01', '01', '40', '3D', 'F4']</msg>
<status status="PASS" endtime="20190121 10:23:28.529" starttime="20190121 10:23:28.521"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:28.537">${value} = 01</msg>
<status status="PASS" endtime="20190121 10:23:28.538" starttime="20190121 10:23:28.532"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:28.542">${res} = 01</msg>
<status status="PASS" endtime="20190121 10:23:28.543" starttime="20190121 10:23:28.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_LOW}</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:23:28.552">'01' does not contain '00'</msg>
<status status="FAIL" endtime="20190121 10:23:28.553" starttime="20190121 10:23:28.546"></status>
</kw>
<status status="FAIL" endtime="20190121 10:23:28.556" starttime="20190121 10:23:28.253"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.616" starttime="20190121 10:23:28.567"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.666" starttime="20190121 10:23:28.618"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:28.745" starttime="20190121 10:23:28.669"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:30.754">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:23:30.757" starttime="20190121 10:23:28.750"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:30.806" starttime="20190121 10:23:30.759"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:30.855" starttime="20190121 10:23:30.810"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:30.858" starttime="20190121 10:23:28.560"></status>
</kw>
<doc>Implements Test Task SKTB-49038</doc>
<tags>
<tag>GPIO Test</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20190121 10:23:30.859" starttime="20190121 10:23:22.064">'01' does not contain '00'</status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:23:32.367">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:23:32.405">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:23:32.433" starttime="20190121 10:23:30.914"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:32.435" starttime="20190121 10:23:30.875"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:32.442" starttime="20190121 10:23:30.869"></status>
</kw>
<doc>Chorus GPIO input 1,2,3 BID_wul test</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="FAIL" endtime="20190121 10:23:32.442" starttime="20190121 10:23:19.222"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-49357.robot" name="SKTB-49357" id="s1-s12">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:33.194">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:23:33.217" starttime="20190121 10:23:33.177"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:33.236">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:23:33.238">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:23:35.710">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:23:35.718" starttime="20190121 10:23:33.220"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:35.721" starttime="20190121 10:23:33.171"></status>
</kw>
<test name="SKTB-49357 Gpio pwm test" id="s1-s12-t1">
<kw name="Test_precondition" type="setup">
<doc>switch kl15 and kl 30 and prodmod off and on after defined time</doc>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:35.978" starttime="20190121 10:23:35.807"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:36.118" starttime="20190121 10:23:35.987"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:36.283" starttime="20190121 10:23:36.122"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:38.329">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:23:38.331" starttime="20190121 10:23:36.292"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:38.414" starttime="20190121 10:23:38.334"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:38.509" starttime="20190121 10:23:38.417"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:38.613" starttime="20190121 10:23:38.513"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:38.711" starttime="20190121 10:23:38.616"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:38.794" starttime="20190121 10:23:38.714"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:38.881" starttime="20190121 10:23:38.798"></status>
</kw>
<kw name="Fbus Set State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${15000}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:38.980" starttime="20190121 10:23:38.884"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:23:40.004">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:23:40.006" starttime="20190121 10:23:38.983"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:40.009" starttime="20190121 10:23:35.776"></status>
</kw>
<kw name="digit_out_hs_1">
<doc>Set pwm for the digital output hs 1</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output hs 1</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.077" starttime="20190121 10:23:40.034"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${HI_SIDE_SW_1}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.105" starttime="20190121 10:23:40.093"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.151">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0020 20</msg>
<status status="PASS" endtime="20190121 10:23:40.164" starttime="20190121 10:23:40.136"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.180" starttime="20190121 10:23:40.167"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.468">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 00 01 43 3D F7</msg>
<status status="PASS" endtime="20190121 10:23:40.469" starttime="20190121 10:23:40.183"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.481" starttime="20190121 10:23:40.471"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.490" starttime="20190121 10:23:40.484"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.498">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '00', '01', '43', '3D', 'F7']</msg>
<status status="PASS" endtime="20190121 10:23:40.498" starttime="20190121 10:23:40.493"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.507">${gpio_id} = 00</msg>
<status status="PASS" endtime="20190121 10:23:40.508" starttime="20190121 10:23:40.501"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.516" starttime="20190121 10:23:40.510"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.525">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:40.525" starttime="20190121 10:23:40.519"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:40.530">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:40.531" starttime="20190121 10:23:40.107"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.539" starttime="20190121 10:23:40.534"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.548" starttime="20190121 10:23:40.543"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.575">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0064 64</msg>
<status status="PASS" endtime="20190121 10:23:40.595" starttime="20190121 10:23:40.561"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.618" starttime="20190121 10:23:40.599"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.869">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 00 01 44 3D F0</msg>
<status status="PASS" endtime="20190121 10:23:40.870" starttime="20190121 10:23:40.621"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.879" starttime="20190121 10:23:40.874"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.889" starttime="20190121 10:23:40.883"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.897">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '00', '01', '44', '3D', 'F0']</msg>
<status status="PASS" endtime="20190121 10:23:40.898" starttime="20190121 10:23:40.892"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.906">${gpio_id} = 00</msg>
<status status="PASS" endtime="20190121 10:23:40.907" starttime="20190121 10:23:40.901"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.916" starttime="20190121 10:23:40.910"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:40.924">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:40.925" starttime="20190121 10:23:40.919"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:40.929">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:40.929" starttime="20190121 10:23:40.550"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.938" starttime="20190121 10:23:40.932"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:40.945" starttime="20190121 10:23:40.941"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.054">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0001 01</msg>
<status status="PASS" endtime="20190121 10:23:41.055" starttime="20190121 10:23:41.044"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.066" starttime="20190121 10:23:41.059"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.295">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 00 01 45 3D F1</msg>
<status status="PASS" endtime="20190121 10:23:41.297" starttime="20190121 10:23:41.071"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.305" starttime="20190121 10:23:41.300"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.314" starttime="20190121 10:23:41.308"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.322">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '00', '01', '45', '3D', 'F1']</msg>
<status status="PASS" endtime="20190121 10:23:41.323" starttime="20190121 10:23:41.317"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.331">${gpio_id} = 00</msg>
<status status="PASS" endtime="20190121 10:23:41.332" starttime="20190121 10:23:41.326"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.341" starttime="20190121 10:23:41.335"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.349">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:41.350" starttime="20190121 10:23:41.344"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:41.354">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:41.355" starttime="20190121 10:23:40.948"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.363" starttime="20190121 10:23:41.358"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.371" starttime="20190121 10:23:41.366"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.391">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0065 65</msg>
<status status="PASS" endtime="20190121 10:23:41.392" starttime="20190121 10:23:41.384"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.400" starttime="20190121 10:23:41.395"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.603">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 46 3C F2</msg>
<status status="PASS" endtime="20190121 10:23:41.604" starttime="20190121 10:23:41.403"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.614" starttime="20190121 10:23:41.607"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.626" starttime="20190121 10:23:41.617"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.634">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '46', '3C', 'F2']</msg>
<status status="PASS" endtime="20190121 10:23:41.635" starttime="20190121 10:23:41.629"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.643">${gpio_id} = 00</msg>
<status status="PASS" endtime="20190121 10:23:41.644" starttime="20190121 10:23:41.637"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.653" starttime="20190121 10:23:41.647"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.661">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:41.662" starttime="20190121 10:23:41.655"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:41.665">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:41.666" starttime="20190121 10:23:41.373"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.676" starttime="20190121 10:23:41.669"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.683" starttime="20190121 10:23:41.679"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.704">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0020 65</msg>
<status status="PASS" endtime="20190121 10:23:41.705" starttime="20190121 10:23:41.696"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.713" starttime="20190121 10:23:41.707"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.915">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 41 3C F5</msg>
<status status="PASS" endtime="20190121 10:23:41.915" starttime="20190121 10:23:41.716"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.924" starttime="20190121 10:23:41.918"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.933" starttime="20190121 10:23:41.927"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.941">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '41', '3C', 'F5']</msg>
<status status="PASS" endtime="20190121 10:23:41.942" starttime="20190121 10:23:41.936"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.951">${gpio_id} = 00</msg>
<status status="PASS" endtime="20190121 10:23:41.952" starttime="20190121 10:23:41.945"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.962" starttime="20190121 10:23:41.954"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:41.971">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:41.971" starttime="20190121 10:23:41.965"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:41.975">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:41.976" starttime="20190121 10:23:41.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.984" starttime="20190121 10:23:41.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:41.992" starttime="20190121 10:23:41.988"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.013">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0065 20</msg>
<status status="PASS" endtime="20190121 10:23:42.014" starttime="20190121 10:23:42.005"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.022" starttime="20190121 10:23:42.017"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.224">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 42 3C F6</msg>
<status status="PASS" endtime="20190121 10:23:42.225" starttime="20190121 10:23:42.025"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.233" starttime="20190121 10:23:42.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.242" starttime="20190121 10:23:42.236"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.250">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '42', '3C', 'F6']</msg>
<status status="PASS" endtime="20190121 10:23:42.251" starttime="20190121 10:23:42.245"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.259">${gpio_id} = 00</msg>
<status status="PASS" endtime="20190121 10:23:42.260" starttime="20190121 10:23:42.254"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.269" starttime="20190121 10:23:42.263"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.278">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:42.279" starttime="20190121 10:23:42.271"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:42.283">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:42.283" starttime="20190121 10:23:41.994"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.296" starttime="20190121 10:23:42.286"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.303" starttime="20190121 10:23:42.299"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.324">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0020 00</msg>
<status status="PASS" endtime="20190121 10:23:42.325" starttime="20190121 10:23:42.316"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.333" starttime="20190121 10:23:42.328"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.537">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 43 3C F7</msg>
<status status="PASS" endtime="20190121 10:23:42.538" starttime="20190121 10:23:42.336"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.547" starttime="20190121 10:23:42.542"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.556" starttime="20190121 10:23:42.550"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.564">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '43', '3C', 'F7']</msg>
<status status="PASS" endtime="20190121 10:23:42.565" starttime="20190121 10:23:42.559"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.573">${gpio_id} = 00</msg>
<status status="PASS" endtime="20190121 10:23:42.574" starttime="20190121 10:23:42.568"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.583" starttime="20190121 10:23:42.577"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.592">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:42.593" starttime="20190121 10:23:42.586"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:42.596">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:42.597" starttime="20190121 10:23:42.306"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.606" starttime="20190121 10:23:42.600"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.614" starttime="20190121 10:23:42.608"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.634">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0000 20</msg>
<status status="PASS" endtime="20190121 10:23:42.635" starttime="20190121 10:23:42.626"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.643" starttime="20190121 10:23:42.638"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.846">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 46 3C F2</msg>
<status status="PASS" endtime="20190121 10:23:42.847" starttime="20190121 10:23:42.646"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.861" starttime="20190121 10:23:42.851"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.878" starttime="20190121 10:23:42.867"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.901">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '46', '3C', 'F2']</msg>
<status status="PASS" endtime="20190121 10:23:42.902" starttime="20190121 10:23:42.886"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.919">${gpio_id} = 00</msg>
<status status="PASS" endtime="20190121 10:23:42.923" starttime="20190121 10:23:42.909"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.931" starttime="20190121 10:23:42.926"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.940">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:42.941" starttime="20190121 10:23:42.934"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:42.945">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:42.946" starttime="20190121 10:23:42.616"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.954" starttime="20190121 10:23:42.948"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.962" starttime="20190121 10:23:42.957"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:42.986">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0000 00</msg>
<status status="PASS" endtime="20190121 10:23:42.987" starttime="20190121 10:23:42.975"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:42.995" starttime="20190121 10:23:42.990"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.229">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 47 3C F3</msg>
<status status="PASS" endtime="20190121 10:23:43.230" starttime="20190121 10:23:42.998"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.239" starttime="20190121 10:23:43.234"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.248" starttime="20190121 10:23:43.242"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.258">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '47', '3C', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:43.259" starttime="20190121 10:23:43.251"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.267">${gpio_id} = 00</msg>
<status status="PASS" endtime="20190121 10:23:43.268" starttime="20190121 10:23:43.262"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.276" starttime="20190121 10:23:43.271"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.285">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:43.286" starttime="20190121 10:23:43.279"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:43.289">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:43.290" starttime="20190121 10:23:42.964"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.299" starttime="20190121 10:23:43.293"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:43.301" starttime="20190121 10:23:40.079"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:43.303" starttime="20190121 10:23:40.012"></status>
</kw>
<kw name="digit_out_hs_2">
<doc>Set pwm for the digital output hs 2</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output hs 2</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.316" starttime="20190121 10:23:43.312"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${HI_SIDE_SW_2}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.331" starttime="20190121 10:23:43.326"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.351">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0020 20</msg>
<status status="PASS" endtime="20190121 10:23:43.351" starttime="20190121 10:23:43.343"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.360" starttime="20190121 10:23:43.354"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.563">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 01 01 40 3D F5</msg>
<status status="PASS" endtime="20190121 10:23:43.565" starttime="20190121 10:23:43.363"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.574" starttime="20190121 10:23:43.568"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.583" starttime="20190121 10:23:43.577"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.591">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '01', '01', '40', '3D', 'F5']</msg>
<status status="PASS" endtime="20190121 10:23:43.592" starttime="20190121 10:23:43.586"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.600">${gpio_id} = 01</msg>
<status status="PASS" endtime="20190121 10:23:43.601" starttime="20190121 10:23:43.595"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.610" starttime="20190121 10:23:43.604"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.623">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:43.624" starttime="20190121 10:23:43.613"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:43.628">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:43.629" starttime="20190121 10:23:43.333"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.639" starttime="20190121 10:23:43.631"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.648" starttime="20190121 10:23:43.642"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.669">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0064 64</msg>
<status status="PASS" endtime="20190121 10:23:43.670" starttime="20190121 10:23:43.661"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.678" starttime="20190121 10:23:43.673"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.885">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 01 01 41 3D F4</msg>
<status status="PASS" endtime="20190121 10:23:43.886" starttime="20190121 10:23:43.681"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.894" starttime="20190121 10:23:43.889"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.902" starttime="20190121 10:23:43.897"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.910">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '01', '01', '41', '3D', 'F4']</msg>
<status status="PASS" endtime="20190121 10:23:43.911" starttime="20190121 10:23:43.905"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.921">${gpio_id} = 01</msg>
<status status="PASS" endtime="20190121 10:23:43.922" starttime="20190121 10:23:43.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.930" starttime="20190121 10:23:43.925"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.939">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:43.940" starttime="20190121 10:23:43.933"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:43.943">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:43.944" starttime="20190121 10:23:43.650"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.953" starttime="20190121 10:23:43.947"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.961" starttime="20190121 10:23:43.956"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:43.981">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0001 01</msg>
<status status="PASS" endtime="20190121 10:23:43.982" starttime="20190121 10:23:43.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:43.990" starttime="20190121 10:23:43.985"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.195">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 01 01 42 3D F7</msg>
<status status="PASS" endtime="20190121 10:23:44.196" starttime="20190121 10:23:43.994"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.206" starttime="20190121 10:23:44.200"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.215" starttime="20190121 10:23:44.209"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.224">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '01', '01', '42', '3D', 'F7']</msg>
<status status="PASS" endtime="20190121 10:23:44.225" starttime="20190121 10:23:44.218"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.235">${gpio_id} = 01</msg>
<status status="PASS" endtime="20190121 10:23:44.235" starttime="20190121 10:23:44.228"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.244" starttime="20190121 10:23:44.238"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.252">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:44.253" starttime="20190121 10:23:44.247"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:44.257">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:44.258" starttime="20190121 10:23:43.963"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.268" starttime="20190121 10:23:44.262"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.275" starttime="20190121 10:23:44.271"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.297">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0065 65</msg>
<status status="PASS" endtime="20190121 10:23:44.297" starttime="20190121 10:23:44.288"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.306" starttime="20190121 10:23:44.300"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.510">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 43 3C F6</msg>
<status status="PASS" endtime="20190121 10:23:44.511" starttime="20190121 10:23:44.309"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.520" starttime="20190121 10:23:44.515"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.529" starttime="20190121 10:23:44.523"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.537">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '43', '3C', 'F6']</msg>
<status status="PASS" endtime="20190121 10:23:44.537" starttime="20190121 10:23:44.532"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.549">${gpio_id} = 01</msg>
<status status="PASS" endtime="20190121 10:23:44.550" starttime="20190121 10:23:44.540"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.559" starttime="20190121 10:23:44.553"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.568">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:44.570" starttime="20190121 10:23:44.562"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:44.573">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:44.574" starttime="20190121 10:23:44.278"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.583" starttime="20190121 10:23:44.577"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.590" starttime="20190121 10:23:44.586"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.612">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0020 65</msg>
<status status="PASS" endtime="20190121 10:23:44.613" starttime="20190121 10:23:44.604"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.622" starttime="20190121 10:23:44.616"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.825">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 44 3C F1</msg>
<status status="PASS" endtime="20190121 10:23:44.826" starttime="20190121 10:23:44.625"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.834" starttime="20190121 10:23:44.829"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.843" starttime="20190121 10:23:44.837"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.851">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '44', '3C', 'F1']</msg>
<status status="PASS" endtime="20190121 10:23:44.852" starttime="20190121 10:23:44.846"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.860">${gpio_id} = 01</msg>
<status status="PASS" endtime="20190121 10:23:44.861" starttime="20190121 10:23:44.854"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.870" starttime="20190121 10:23:44.864"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.878">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:44.879" starttime="20190121 10:23:44.873"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:44.883">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:44.883" starttime="20190121 10:23:44.593"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.892" starttime="20190121 10:23:44.886"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.899" starttime="20190121 10:23:44.895"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:44.920">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0065 20</msg>
<status status="PASS" endtime="20190121 10:23:44.921" starttime="20190121 10:23:44.913"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:44.929" starttime="20190121 10:23:44.924"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.136">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 45 3C F0</msg>
<status status="PASS" endtime="20190121 10:23:45.137" starttime="20190121 10:23:44.932"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.146" starttime="20190121 10:23:45.140"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.154" starttime="20190121 10:23:45.149"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.162">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '45', '3C', 'F0']</msg>
<status status="PASS" endtime="20190121 10:23:45.163" starttime="20190121 10:23:45.157"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.172">${gpio_id} = 01</msg>
<status status="PASS" endtime="20190121 10:23:45.173" starttime="20190121 10:23:45.166"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.181" starttime="20190121 10:23:45.175"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.190">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:45.190" starttime="20190121 10:23:45.184"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:45.194">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:45.195" starttime="20190121 10:23:44.902"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.203" starttime="20190121 10:23:45.198"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.212" starttime="20190121 10:23:45.206"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.236">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0020 00</msg>
<status status="PASS" endtime="20190121 10:23:45.236" starttime="20190121 10:23:45.228"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.245" starttime="20190121 10:23:45.239"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.450">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 46 3C F3</msg>
<status status="PASS" endtime="20190121 10:23:45.451" starttime="20190121 10:23:45.248"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.459" starttime="20190121 10:23:45.454"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.468" starttime="20190121 10:23:45.462"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.476">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '46', '3C', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:45.477" starttime="20190121 10:23:45.471"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.486">${gpio_id} = 01</msg>
<status status="PASS" endtime="20190121 10:23:45.486" starttime="20190121 10:23:45.480"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.495" starttime="20190121 10:23:45.489"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.503">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:45.504" starttime="20190121 10:23:45.498"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:45.508">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:45.509" starttime="20190121 10:23:45.214"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.517" starttime="20190121 10:23:45.511"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.525" starttime="20190121 10:23:45.520"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.545">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0000 20</msg>
<status status="PASS" endtime="20190121 10:23:45.546" starttime="20190121 10:23:45.537"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.555" starttime="20190121 10:23:45.549"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.758">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 45 3C F0</msg>
<status status="PASS" endtime="20190121 10:23:45.759" starttime="20190121 10:23:45.559"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.768" starttime="20190121 10:23:45.762"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.777" starttime="20190121 10:23:45.771"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.785">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '45', '3C', 'F0']</msg>
<status status="PASS" endtime="20190121 10:23:45.786" starttime="20190121 10:23:45.780"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.795">${gpio_id} = 01</msg>
<status status="PASS" endtime="20190121 10:23:45.796" starttime="20190121 10:23:45.789"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.804" starttime="20190121 10:23:45.799"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.813">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:45.814" starttime="20190121 10:23:45.807"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:45.817">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:45.818" starttime="20190121 10:23:45.527"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.828" starttime="20190121 10:23:45.822"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.836" starttime="20190121 10:23:45.831"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:45.856">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0000 00</msg>
<status status="PASS" endtime="20190121 10:23:45.857" starttime="20190121 10:23:45.849"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:45.866" starttime="20190121 10:23:45.860"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.077">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 46 3C F3</msg>
<status status="PASS" endtime="20190121 10:23:46.078" starttime="20190121 10:23:45.869"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.087" starttime="20190121 10:23:46.081"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.095" starttime="20190121 10:23:46.090"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.103">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '46', '3C', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:46.104" starttime="20190121 10:23:46.099"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.113">${gpio_id} = 01</msg>
<status status="PASS" endtime="20190121 10:23:46.114" starttime="20190121 10:23:46.107"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.122" starttime="20190121 10:23:46.116"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.130">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:46.131" starttime="20190121 10:23:46.125"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:46.135">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:46.136" starttime="20190121 10:23:45.838"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.144" starttime="20190121 10:23:46.139"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:46.146" starttime="20190121 10:23:43.319"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:46.149" starttime="20190121 10:23:43.306"></status>
</kw>
<kw name="digit_out_hs_3">
<doc>Set pwm for the digital output hs 3</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output hs 3</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.162" starttime="20190121 10:23:46.157"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${HI_SIDE_SW_3}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.177" starttime="20190121 10:23:46.173"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.197">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0020 20</msg>
<status status="PASS" endtime="20190121 10:23:46.198" starttime="20190121 10:23:46.190"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.206" starttime="20190121 10:23:46.201"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.409">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 02 01 47 3D F1</msg>
<status status="PASS" endtime="20190121 10:23:46.410" starttime="20190121 10:23:46.209"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.419" starttime="20190121 10:23:46.413"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.427" starttime="20190121 10:23:46.422"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.435">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '02', '01', '47', '3D', 'F1']</msg>
<status status="PASS" endtime="20190121 10:23:46.436" starttime="20190121 10:23:46.430"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.445">${gpio_id} = 02</msg>
<status status="PASS" endtime="20190121 10:23:46.446" starttime="20190121 10:23:46.439"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.455" starttime="20190121 10:23:46.449"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.463">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:46.464" starttime="20190121 10:23:46.458"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:46.468">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:46.469" starttime="20190121 10:23:46.179"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.477" starttime="20190121 10:23:46.472"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.485" starttime="20190121 10:23:46.480"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.505">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0064 64</msg>
<status status="PASS" endtime="20190121 10:23:46.505" starttime="20190121 10:23:46.497"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.514" starttime="20190121 10:23:46.508"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.715">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 02 01 40 3D F6</msg>
<status status="PASS" endtime="20190121 10:23:46.716" starttime="20190121 10:23:46.517"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.725" starttime="20190121 10:23:46.719"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.737" starttime="20190121 10:23:46.728"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.745">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '02', '01', '40', '3D', 'F6']</msg>
<status status="PASS" endtime="20190121 10:23:46.746" starttime="20190121 10:23:46.740"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.754">${gpio_id} = 02</msg>
<status status="PASS" endtime="20190121 10:23:46.755" starttime="20190121 10:23:46.749"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.764" starttime="20190121 10:23:46.758"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.773">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:46.774" starttime="20190121 10:23:46.767"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:46.777">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:46.778" starttime="20190121 10:23:46.487"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.787" starttime="20190121 10:23:46.781"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.795" starttime="20190121 10:23:46.790"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:46.815">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0001 01</msg>
<status status="PASS" endtime="20190121 10:23:46.816" starttime="20190121 10:23:46.808"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:46.824" starttime="20190121 10:23:46.819"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.054">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 02 01 41 3D F7</msg>
<status status="PASS" endtime="20190121 10:23:47.054" starttime="20190121 10:23:46.827"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.064" starttime="20190121 10:23:47.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.072" starttime="20190121 10:23:47.067"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.081">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '02', '01', '41', '3D', 'F7']</msg>
<status status="PASS" endtime="20190121 10:23:47.082" starttime="20190121 10:23:47.076"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.090">${gpio_id} = 02</msg>
<status status="PASS" endtime="20190121 10:23:47.091" starttime="20190121 10:23:47.085"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.100" starttime="20190121 10:23:47.094"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.108">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:47.109" starttime="20190121 10:23:47.103"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:47.113">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:47.113" starttime="20190121 10:23:46.797"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.122" starttime="20190121 10:23:47.116"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.129" starttime="20190121 10:23:47.125"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.150">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0065 65</msg>
<status status="PASS" endtime="20190121 10:23:47.151" starttime="20190121 10:23:47.143"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.159" starttime="20190121 10:23:47.154"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.443">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 42 3C F4</msg>
<status status="PASS" endtime="20190121 10:23:47.448" starttime="20190121 10:23:47.162"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.488" starttime="20190121 10:23:47.451"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.497" starttime="20190121 10:23:47.491"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.515">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '42', '3C', 'F4']</msg>
<status status="PASS" endtime="20190121 10:23:47.516" starttime="20190121 10:23:47.510"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.534">${gpio_id} = 02</msg>
<status status="PASS" endtime="20190121 10:23:47.534" starttime="20190121 10:23:47.527"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.554" starttime="20190121 10:23:47.548"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.567">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:47.568" starttime="20190121 10:23:47.557"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:47.571">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:47.572" starttime="20190121 10:23:47.131"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.586" starttime="20190121 10:23:47.575"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.594" starttime="20190121 10:23:47.589"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.614">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0020 65</msg>
<status status="PASS" endtime="20190121 10:23:47.615" starttime="20190121 10:23:47.607"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.624" starttime="20190121 10:23:47.618"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.826">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 43 3C F5</msg>
<status status="PASS" endtime="20190121 10:23:47.827" starttime="20190121 10:23:47.626"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.837" starttime="20190121 10:23:47.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.846" starttime="20190121 10:23:47.840"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.853">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '43', '3C', 'F5']</msg>
<status status="PASS" endtime="20190121 10:23:47.854" starttime="20190121 10:23:47.849"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.863">${gpio_id} = 02</msg>
<status status="PASS" endtime="20190121 10:23:47.864" starttime="20190121 10:23:47.857"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.872" starttime="20190121 10:23:47.866"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.881">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:47.882" starttime="20190121 10:23:47.875"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:47.885">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:47.886" starttime="20190121 10:23:47.596"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.895" starttime="20190121 10:23:47.890"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.903" starttime="20190121 10:23:47.898"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:47.923">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0065 20</msg>
<status status="PASS" endtime="20190121 10:23:47.924" starttime="20190121 10:23:47.916"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:47.932" starttime="20190121 10:23:47.927"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.134">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 44 3C F2</msg>
<status status="PASS" endtime="20190121 10:23:48.135" starttime="20190121 10:23:47.935"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.144" starttime="20190121 10:23:48.138"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.153" starttime="20190121 10:23:48.147"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.161">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '44', '3C', 'F2']</msg>
<status status="PASS" endtime="20190121 10:23:48.161" starttime="20190121 10:23:48.155"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.171">${gpio_id} = 02</msg>
<status status="PASS" endtime="20190121 10:23:48.171" starttime="20190121 10:23:48.164"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.180" starttime="20190121 10:23:48.174"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.188">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:48.189" starttime="20190121 10:23:48.183"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:48.193">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:48.194" starttime="20190121 10:23:47.905"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.202" starttime="20190121 10:23:48.196"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.210" starttime="20190121 10:23:48.205"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.234">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0020 00</msg>
<status status="PASS" endtime="20190121 10:23:48.235" starttime="20190121 10:23:48.222"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.246" starttime="20190121 10:23:48.238"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.448">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 45 3C F3</msg>
<status status="PASS" endtime="20190121 10:23:48.450" starttime="20190121 10:23:48.249"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.458" starttime="20190121 10:23:48.453"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.467" starttime="20190121 10:23:48.461"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.475">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '45', '3C', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:48.476" starttime="20190121 10:23:48.470"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.484">${gpio_id} = 02</msg>
<status status="PASS" endtime="20190121 10:23:48.485" starttime="20190121 10:23:48.479"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.494" starttime="20190121 10:23:48.488"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.502">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:48.503" starttime="20190121 10:23:48.496"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:48.506">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:48.507" starttime="20190121 10:23:48.212"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.516" starttime="20190121 10:23:48.510"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.523" starttime="20190121 10:23:48.519"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.544">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0000 20</msg>
<status status="PASS" endtime="20190121 10:23:48.545" starttime="20190121 10:23:48.536"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.553" starttime="20190121 10:23:48.548"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.755">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 46 3C F0</msg>
<status status="PASS" endtime="20190121 10:23:48.756" starttime="20190121 10:23:48.556"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.765" starttime="20190121 10:23:48.760"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.774" starttime="20190121 10:23:48.768"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.782">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '46', '3C', 'F0']</msg>
<status status="PASS" endtime="20190121 10:23:48.783" starttime="20190121 10:23:48.777"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.791">${gpio_id} = 02</msg>
<status status="PASS" endtime="20190121 10:23:48.792" starttime="20190121 10:23:48.785"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.800" starttime="20190121 10:23:48.795"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.809">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:48.810" starttime="20190121 10:23:48.803"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:48.813">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:48.814" starttime="20190121 10:23:48.525"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.823" starttime="20190121 10:23:48.817"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.830" starttime="20190121 10:23:48.826"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:48.852">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0000 00</msg>
<status status="PASS" endtime="20190121 10:23:48.853" starttime="20190121 10:23:48.844"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:48.861" starttime="20190121 10:23:48.856"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.063">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 47 3C F1</msg>
<status status="PASS" endtime="20190121 10:23:49.065" starttime="20190121 10:23:48.864"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.074" starttime="20190121 10:23:49.068"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.083" starttime="20190121 10:23:49.076"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.094">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '47', '3C', 'F1']</msg>
<status status="PASS" endtime="20190121 10:23:49.095" starttime="20190121 10:23:49.086"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.103">${gpio_id} = 02</msg>
<status status="PASS" endtime="20190121 10:23:49.104" starttime="20190121 10:23:49.098"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.112" starttime="20190121 10:23:49.107"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.121">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:49.122" starttime="20190121 10:23:49.115"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:49.125">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:49.126" starttime="20190121 10:23:48.832"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.135" starttime="20190121 10:23:49.129"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:49.137" starttime="20190121 10:23:46.165"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:49.139" starttime="20190121 10:23:46.151"></status>
</kw>
<kw name="digit_out_hs_4">
<doc>Set for the digital output hs 4</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set for the digital output hs 4</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.152" starttime="20190121 10:23:49.148"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${HI_SIDE_SW_4}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.167" starttime="20190121 10:23:49.162"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.187">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0020 20</msg>
<status status="PASS" endtime="20190121 10:23:49.188" starttime="20190121 10:23:49.180"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.196" starttime="20190121 10:23:49.191"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.398">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 03 01 40 3D F7</msg>
<status status="PASS" endtime="20190121 10:23:49.399" starttime="20190121 10:23:49.199"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.409" starttime="20190121 10:23:49.403"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.417" starttime="20190121 10:23:49.411"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.425">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '03', '01', '40', '3D', 'F7']</msg>
<status status="PASS" endtime="20190121 10:23:49.426" starttime="20190121 10:23:49.420"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.434">${gpio_id} = 03</msg>
<status status="PASS" endtime="20190121 10:23:49.435" starttime="20190121 10:23:49.429"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.444" starttime="20190121 10:23:49.438"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.453">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:49.455" starttime="20190121 10:23:49.447"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:49.459">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:49.460" starttime="20190121 10:23:49.169"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.468" starttime="20190121 10:23:49.462"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.476" starttime="20190121 10:23:49.471"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.496">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0064 64</msg>
<status status="PASS" endtime="20190121 10:23:49.497" starttime="20190121 10:23:49.489"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.506" starttime="20190121 10:23:49.500"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.710">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 03 01 41 3D F6</msg>
<status status="PASS" endtime="20190121 10:23:49.711" starttime="20190121 10:23:49.509"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.720" starttime="20190121 10:23:49.714"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.728" starttime="20190121 10:23:49.723"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.736">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '03', '01', '41', '3D', 'F6']</msg>
<status status="PASS" endtime="20190121 10:23:49.737" starttime="20190121 10:23:49.731"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.746">${gpio_id} = 03</msg>
<status status="PASS" endtime="20190121 10:23:49.746" starttime="20190121 10:23:49.740"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.758" starttime="20190121 10:23:49.749"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.768">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:49.769" starttime="20190121 10:23:49.761"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:49.773">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:49.774" starttime="20190121 10:23:49.478"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.783" starttime="20190121 10:23:49.777"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.790" starttime="20190121 10:23:49.785"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:49.811">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0001 01</msg>
<status status="PASS" endtime="20190121 10:23:49.812" starttime="20190121 10:23:49.804"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:49.821" starttime="20190121 10:23:49.815"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.023">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 03 01 44 3D F3</msg>
<status status="PASS" endtime="20190121 10:23:50.025" starttime="20190121 10:23:49.824"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.033" starttime="20190121 10:23:50.028"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.042" starttime="20190121 10:23:50.036"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.050">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '03', '01', '44', '3D', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:50.050" starttime="20190121 10:23:50.045"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.059">${gpio_id} = 03</msg>
<status status="PASS" endtime="20190121 10:23:50.060" starttime="20190121 10:23:50.053"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.070" starttime="20190121 10:23:50.063"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.078">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:50.079" starttime="20190121 10:23:50.073"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:50.083">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:50.084" starttime="20190121 10:23:49.793"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.092" starttime="20190121 10:23:50.086"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.100" starttime="20190121 10:23:50.095"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.121">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0065 65</msg>
<status status="PASS" endtime="20190121 10:23:50.122" starttime="20190121 10:23:50.113"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.130" starttime="20190121 10:23:50.125"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.334">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 45 3C F2</msg>
<status status="PASS" endtime="20190121 10:23:50.335" starttime="20190121 10:23:50.133"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.343" starttime="20190121 10:23:50.337"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.352" starttime="20190121 10:23:50.346"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.360">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '45', '3C', 'F2']</msg>
<status status="PASS" endtime="20190121 10:23:50.361" starttime="20190121 10:23:50.355"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.369">${gpio_id} = 03</msg>
<status status="PASS" endtime="20190121 10:23:50.370" starttime="20190121 10:23:50.363"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.379" starttime="20190121 10:23:50.373"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.388">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:50.389" starttime="20190121 10:23:50.382"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:50.392">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:50.393" starttime="20190121 10:23:50.102"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.401" starttime="20190121 10:23:50.396"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.409" starttime="20190121 10:23:50.404"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.433">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0020 65</msg>
<status status="PASS" endtime="20190121 10:23:50.434" starttime="20190121 10:23:50.422"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.442" starttime="20190121 10:23:50.436"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.645">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 46 3C F1</msg>
<status status="PASS" endtime="20190121 10:23:50.646" starttime="20190121 10:23:50.445"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.655" starttime="20190121 10:23:50.649"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.664" starttime="20190121 10:23:50.657"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.672">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '46', '3C', 'F1']</msg>
<status status="PASS" endtime="20190121 10:23:50.674" starttime="20190121 10:23:50.667"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.683">${gpio_id} = 03</msg>
<status status="PASS" endtime="20190121 10:23:50.684" starttime="20190121 10:23:50.677"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.692" starttime="20190121 10:23:50.686"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.700">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:50.701" starttime="20190121 10:23:50.695"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:50.705">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:50.706" starttime="20190121 10:23:50.411"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.714" starttime="20190121 10:23:50.709"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.722" starttime="20190121 10:23:50.717"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.742">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0065 20</msg>
<status status="PASS" endtime="20190121 10:23:50.743" starttime="20190121 10:23:50.735"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.751" starttime="20190121 10:23:50.746"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:50.977">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 47 3C F0</msg>
<status status="PASS" endtime="20190121 10:23:50.978" starttime="20190121 10:23:50.754"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:50.987" starttime="20190121 10:23:50.982"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.001" starttime="20190121 10:23:50.993"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.009">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '47', '3C', 'F0']</msg>
<status status="PASS" endtime="20190121 10:23:51.010" starttime="20190121 10:23:51.004"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.018">${gpio_id} = 03</msg>
<status status="PASS" endtime="20190121 10:23:51.019" starttime="20190121 10:23:51.012"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.027" starttime="20190121 10:23:51.022"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.036">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:51.036" starttime="20190121 10:23:51.030"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:51.040">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:51.042" starttime="20190121 10:23:50.724"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.052" starttime="20190121 10:23:51.045"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.060" starttime="20190121 10:23:51.055"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.080">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0020 00</msg>
<status status="PASS" endtime="20190121 10:23:51.081" starttime="20190121 10:23:51.073"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.090" starttime="20190121 10:23:51.084"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.293">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 40 3C F7</msg>
<status status="PASS" endtime="20190121 10:23:51.294" starttime="20190121 10:23:51.093"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.303" starttime="20190121 10:23:51.297"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.316" starttime="20190121 10:23:51.306"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.324">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '40', '3C', 'F7']</msg>
<status status="PASS" endtime="20190121 10:23:51.325" starttime="20190121 10:23:51.319"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.334">${gpio_id} = 03</msg>
<status status="PASS" endtime="20190121 10:23:51.335" starttime="20190121 10:23:51.328"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.343" starttime="20190121 10:23:51.337"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.352">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:51.353" starttime="20190121 10:23:51.346"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:51.356">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:51.357" starttime="20190121 10:23:51.062"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.365" starttime="20190121 10:23:51.360"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.373" starttime="20190121 10:23:51.368"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.393">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0000 20</msg>
<status status="PASS" endtime="20190121 10:23:51.394" starttime="20190121 10:23:51.386"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.403" starttime="20190121 10:23:51.397"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.606">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 41 3C F6</msg>
<status status="PASS" endtime="20190121 10:23:51.607" starttime="20190121 10:23:51.406"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.615" starttime="20190121 10:23:51.610"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.624" starttime="20190121 10:23:51.618"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.632">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '41', '3C', 'F6']</msg>
<status status="PASS" endtime="20190121 10:23:51.632" starttime="20190121 10:23:51.627"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.641">${gpio_id} = 03</msg>
<status status="PASS" endtime="20190121 10:23:51.642" starttime="20190121 10:23:51.635"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.650" starttime="20190121 10:23:51.645"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.659">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:51.660" starttime="20190121 10:23:51.653"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:51.663">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:51.664" starttime="20190121 10:23:51.375"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.672" starttime="20190121 10:23:51.667"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.680" starttime="20190121 10:23:51.675"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.701">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0000 00</msg>
<status status="PASS" endtime="20190121 10:23:51.702" starttime="20190121 10:23:51.694"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.711" starttime="20190121 10:23:51.705"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.915">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 42 3C F5</msg>
<status status="PASS" endtime="20190121 10:23:51.916" starttime="20190121 10:23:51.714"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.925" starttime="20190121 10:23:51.920"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.934" starttime="20190121 10:23:51.928"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.941">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '42', '3C', 'F5']</msg>
<status status="PASS" endtime="20190121 10:23:51.942" starttime="20190121 10:23:51.937"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.951">${gpio_id} = 03</msg>
<status status="PASS" endtime="20190121 10:23:51.952" starttime="20190121 10:23:51.945"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:51.960" starttime="20190121 10:23:51.955"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:51.969">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:51.970" starttime="20190121 10:23:51.963"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:51.983">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:51.984" starttime="20190121 10:23:51.682"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.033" starttime="20190121 10:23:52.010"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:52.035" starttime="20190121 10:23:49.154"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:52.038" starttime="20190121 10:23:49.141"></status>
</kw>
<kw name="digit_out_led1">
<doc>Set pwm for the digital output led1</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output led1</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.087" starttime="20190121 10:23:52.071"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.119" starttime="20190121 10:23:52.104"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.144">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0020 20</msg>
<status status="PASS" endtime="20190121 10:23:52.145" starttime="20190121 10:23:52.137"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.154" starttime="20190121 10:23:52.148"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.356">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 04 01 43 3D F3</msg>
<status status="PASS" endtime="20190121 10:23:52.357" starttime="20190121 10:23:52.157"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.366" starttime="20190121 10:23:52.360"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.374" starttime="20190121 10:23:52.369"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.383">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '04', '01', '43', '3D', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:52.384" starttime="20190121 10:23:52.377"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.392">${gpio_id} = 04</msg>
<status status="PASS" endtime="20190121 10:23:52.393" starttime="20190121 10:23:52.387"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.402" starttime="20190121 10:23:52.396"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.410">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:52.411" starttime="20190121 10:23:52.405"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:52.414">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:52.415" starttime="20190121 10:23:52.121"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.424" starttime="20190121 10:23:52.418"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.432" starttime="20190121 10:23:52.427"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.453">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0064 64</msg>
<status status="PASS" endtime="20190121 10:23:52.454" starttime="20190121 10:23:52.446"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.463" starttime="20190121 10:23:52.457"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.667">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 04 01 44 3D F4</msg>
<status status="PASS" endtime="20190121 10:23:52.668" starttime="20190121 10:23:52.465"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.680" starttime="20190121 10:23:52.674"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.689" starttime="20190121 10:23:52.683"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.699">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '04', '01', '44', '3D', 'F4']</msg>
<status status="PASS" endtime="20190121 10:23:52.700" starttime="20190121 10:23:52.694"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.708">${gpio_id} = 04</msg>
<status status="PASS" endtime="20190121 10:23:52.709" starttime="20190121 10:23:52.702"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.717" starttime="20190121 10:23:52.712"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.729">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:52.730" starttime="20190121 10:23:52.720"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:52.734">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:52.735" starttime="20190121 10:23:52.435"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.743" starttime="20190121 10:23:52.737"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.751" starttime="20190121 10:23:52.746"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.772">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0001 01</msg>
<status status="PASS" endtime="20190121 10:23:52.773" starttime="20190121 10:23:52.764"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.781" starttime="20190121 10:23:52.775"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:52.981">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 04 01 45 3D F5</msg>
<status status="PASS" endtime="20190121 10:23:52.982" starttime="20190121 10:23:52.785"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:52.991" starttime="20190121 10:23:52.986"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.001" starttime="20190121 10:23:52.994"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.009">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '04', '01', '45', '3D', 'F5']</msg>
<status status="PASS" endtime="20190121 10:23:53.010" starttime="20190121 10:23:53.004"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.019">${gpio_id} = 04</msg>
<status status="PASS" endtime="20190121 10:23:53.020" starttime="20190121 10:23:53.013"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.029" starttime="20190121 10:23:53.023"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.038">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:53.039" starttime="20190121 10:23:53.032"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:53.042">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:53.043" starttime="20190121 10:23:52.753"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.053" starttime="20190121 10:23:53.046"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.060" starttime="20190121 10:23:53.056"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.081">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0065 65</msg>
<status status="PASS" endtime="20190121 10:23:53.082" starttime="20190121 10:23:53.073"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.090" starttime="20190121 10:23:53.085"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.294">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 46 3C F6</msg>
<status status="PASS" endtime="20190121 10:23:53.295" starttime="20190121 10:23:53.093"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.304" starttime="20190121 10:23:53.299"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.313" starttime="20190121 10:23:53.307"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.321">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '46', '3C', 'F6']</msg>
<status status="PASS" endtime="20190121 10:23:53.322" starttime="20190121 10:23:53.316"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.330">${gpio_id} = 04</msg>
<status status="PASS" endtime="20190121 10:23:53.331" starttime="20190121 10:23:53.325"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.339" starttime="20190121 10:23:53.334"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.348">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:53.349" starttime="20190121 10:23:53.342"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:53.352">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:53.353" starttime="20190121 10:23:53.063"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.362" starttime="20190121 10:23:53.356"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.370" starttime="20190121 10:23:53.365"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.393">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0020 65</msg>
<status status="PASS" endtime="20190121 10:23:53.394" starttime="20190121 10:23:53.382"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.403" starttime="20190121 10:23:53.397"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.605">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 47 3C F7</msg>
<status status="PASS" endtime="20190121 10:23:53.606" starttime="20190121 10:23:53.406"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.617" starttime="20190121 10:23:53.612"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.626" starttime="20190121 10:23:53.620"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.634">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '47', '3C', 'F7']</msg>
<status status="PASS" endtime="20190121 10:23:53.635" starttime="20190121 10:23:53.629"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.643">${gpio_id} = 04</msg>
<status status="PASS" endtime="20190121 10:23:53.644" starttime="20190121 10:23:53.638"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.653" starttime="20190121 10:23:53.647"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.662">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:53.663" starttime="20190121 10:23:53.655"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:53.667">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:53.668" starttime="20190121 10:23:53.372"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.677" starttime="20190121 10:23:53.671"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.685" starttime="20190121 10:23:53.680"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.705">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0065 20</msg>
<status status="PASS" endtime="20190121 10:23:53.706" starttime="20190121 10:23:53.698"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.715" starttime="20190121 10:23:53.709"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.917">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 40 3C F0</msg>
<status status="PASS" endtime="20190121 10:23:53.918" starttime="20190121 10:23:53.718"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.927" starttime="20190121 10:23:53.921"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.936" starttime="20190121 10:23:53.930"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.943">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '40', '3C', 'F0']</msg>
<status status="PASS" endtime="20190121 10:23:53.944" starttime="20190121 10:23:53.939"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.953">${gpio_id} = 04</msg>
<status status="PASS" endtime="20190121 10:23:53.954" starttime="20190121 10:23:53.947"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.962" starttime="20190121 10:23:53.957"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:53.971">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:53.971" starttime="20190121 10:23:53.965"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:53.975">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:53.976" starttime="20190121 10:23:53.687"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.984" starttime="20190121 10:23:53.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:53.992" starttime="20190121 10:23:53.987"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.013">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0020 00</msg>
<status status="PASS" endtime="20190121 10:23:54.014" starttime="20190121 10:23:54.005"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.024" starttime="20190121 10:23:54.016"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.227">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 41 3C F1</msg>
<status status="PASS" endtime="20190121 10:23:54.229" starttime="20190121 10:23:54.027"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.239" starttime="20190121 10:23:54.232"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.252" starttime="20190121 10:23:54.242"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.262">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '41', '3C', 'F1']</msg>
<status status="PASS" endtime="20190121 10:23:54.262" starttime="20190121 10:23:54.255"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.273">${gpio_id} = 04</msg>
<status status="PASS" endtime="20190121 10:23:54.275" starttime="20190121 10:23:54.265"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.284" starttime="20190121 10:23:54.278"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.293">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:54.294" starttime="20190121 10:23:54.286"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:54.297">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:54.298" starttime="20190121 10:23:53.994"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.307" starttime="20190121 10:23:54.301"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.315" starttime="20190121 10:23:54.310"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.335">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0000 20</msg>
<status status="PASS" endtime="20190121 10:23:54.336" starttime="20190121 10:23:54.327"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.344" starttime="20190121 10:23:54.338"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.547">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 42 3C F2</msg>
<status status="PASS" endtime="20190121 10:23:54.547" starttime="20190121 10:23:54.347"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.557" starttime="20190121 10:23:54.551"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.565" starttime="20190121 10:23:54.559"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.573">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '42', '3C', 'F2']</msg>
<status status="PASS" endtime="20190121 10:23:54.574" starttime="20190121 10:23:54.568"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.582">${gpio_id} = 04</msg>
<status status="PASS" endtime="20190121 10:23:54.583" starttime="20190121 10:23:54.577"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.592" starttime="20190121 10:23:54.586"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.601">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:54.602" starttime="20190121 10:23:54.595"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:54.605">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:54.606" starttime="20190121 10:23:54.317"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.615" starttime="20190121 10:23:54.609"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.623" starttime="20190121 10:23:54.618"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.644">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0000 00</msg>
<status status="PASS" endtime="20190121 10:23:54.645" starttime="20190121 10:23:54.637"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.654" starttime="20190121 10:23:54.648"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.856">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 43 3C F3</msg>
<status status="PASS" endtime="20190121 10:23:54.857" starttime="20190121 10:23:54.657"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.866" starttime="20190121 10:23:54.860"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.874" starttime="20190121 10:23:54.869"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.883">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '43', '3C', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:54.884" starttime="20190121 10:23:54.877"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.893">${gpio_id} = 04</msg>
<status status="PASS" endtime="20190121 10:23:54.894" starttime="20190121 10:23:54.887"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.903" starttime="20190121 10:23:54.897"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.911">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:54.912" starttime="20190121 10:23:54.906"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:54.916">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:54.916" starttime="20190121 10:23:54.626"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.932" starttime="20190121 10:23:54.919"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:54.935" starttime="20190121 10:23:52.090"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:54.937" starttime="20190121 10:23:52.040"></status>
</kw>
<kw name="digit_out_led2">
<doc>Set pwm for the digital output led2</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output led2</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.950" starttime="20190121 10:23:54.945"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.965" starttime="20190121 10:23:54.960"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:54.986">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0020 20</msg>
<status status="PASS" endtime="20190121 10:23:54.986" starttime="20190121 10:23:54.978"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:54.997" starttime="20190121 10:23:54.991"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:55.303">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 05 01 44 3D F5</msg>
<status status="PASS" endtime="20190121 10:23:55.304" starttime="20190121 10:23:55.000"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:55.353" starttime="20190121 10:23:55.311"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:55.389" starttime="20190121 10:23:55.361"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:55.415">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '05', '01', '44', '3D', 'F5']</msg>
<status status="PASS" endtime="20190121 10:23:55.416" starttime="20190121 10:23:55.396"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:55.469">${gpio_id} = 05</msg>
<status status="PASS" endtime="20190121 10:23:55.470" starttime="20190121 10:23:55.423"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:55.511" starttime="20190121 10:23:55.501"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:55.590">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:55.591" starttime="20190121 10:23:55.552"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:55.600">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:55.636" starttime="20190121 10:23:54.967"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:55.686" starttime="20190121 10:23:55.639"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:55.718" starttime="20190121 10:23:55.702"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:55.817">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0064 64</msg>
<status status="PASS" endtime="20190121 10:23:55.826" starttime="20190121 10:23:55.804"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:55.842" starttime="20190121 10:23:55.829"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.103">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 05 01 45 3D F4</msg>
<status status="PASS" endtime="20190121 10:23:56.104" starttime="20190121 10:23:55.852"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.134" starttime="20190121 10:23:56.120"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.143" starttime="20190121 10:23:56.137"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.167">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '05', '01', '45', '3D', 'F4']</msg>
<status status="PASS" endtime="20190121 10:23:56.168" starttime="20190121 10:23:56.162"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.198">${gpio_id} = 05</msg>
<status status="PASS" endtime="20190121 10:23:56.199" starttime="20190121 10:23:56.175"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.226" starttime="20190121 10:23:56.202"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.240">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:56.241" starttime="20190121 10:23:56.229"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:56.245">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:56.246" starttime="20190121 10:23:55.725"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.276" starttime="20190121 10:23:56.270"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.307" starttime="20190121 10:23:56.293"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.356">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0001 01</msg>
<status status="PASS" endtime="20190121 10:23:56.357" starttime="20190121 10:23:56.326"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.393" starttime="20190121 10:23:56.359"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.646">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 05 01 46 3D F7</msg>
<status status="PASS" endtime="20190121 10:23:56.647" starttime="20190121 10:23:56.397"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.668" starttime="20190121 10:23:56.650"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.677" starttime="20190121 10:23:56.671"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.694">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '05', '01', '46', '3D', 'F7']</msg>
<status status="PASS" endtime="20190121 10:23:56.695" starttime="20190121 10:23:56.689"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.738">${gpio_id} = 05</msg>
<status status="PASS" endtime="20190121 10:23:56.739" starttime="20190121 10:23:56.719"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.747" starttime="20190121 10:23:56.742"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.768">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:56.769" starttime="20190121 10:23:56.763"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:56.773">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:56.779" starttime="20190121 10:23:56.310"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.806" starttime="20190121 10:23:56.782"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.828" starttime="20190121 10:23:56.809"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:56.914">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0065 65</msg>
<status status="PASS" endtime="20190121 10:23:56.915" starttime="20190121 10:23:56.889"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:56.943" starttime="20190121 10:23:56.929"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.182">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 47 3C F6</msg>
<status status="PASS" endtime="20190121 10:23:57.183" starttime="20190121 10:23:56.946"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.192" starttime="20190121 10:23:57.186"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.201" starttime="20190121 10:23:57.195"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.209">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '47', '3C', 'F6']</msg>
<status status="PASS" endtime="20190121 10:23:57.209" starttime="20190121 10:23:57.204"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.218">${gpio_id} = 05</msg>
<status status="PASS" endtime="20190121 10:23:57.219" starttime="20190121 10:23:57.212"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.227" starttime="20190121 10:23:57.222"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.236">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:57.236" starttime="20190121 10:23:57.230"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:57.240">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:57.241" starttime="20190121 10:23:56.831"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.249" starttime="20190121 10:23:57.244"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.257" starttime="20190121 10:23:57.252"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.281">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0020 65</msg>
<status status="PASS" endtime="20190121 10:23:57.282" starttime="20190121 10:23:57.274"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.290" starttime="20190121 10:23:57.285"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.493">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 40 3C F1</msg>
<status status="PASS" endtime="20190121 10:23:57.494" starttime="20190121 10:23:57.294"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.503" starttime="20190121 10:23:57.498"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.513" starttime="20190121 10:23:57.507"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.521">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '40', '3C', 'F1']</msg>
<status status="PASS" endtime="20190121 10:23:57.522" starttime="20190121 10:23:57.516"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.530">${gpio_id} = 05</msg>
<status status="PASS" endtime="20190121 10:23:57.531" starttime="20190121 10:23:57.525"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.539" starttime="20190121 10:23:57.534"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.548">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:57.549" starttime="20190121 10:23:57.542"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:57.552">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:57.553" starttime="20190121 10:23:57.259"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.562" starttime="20190121 10:23:57.556"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.569" starttime="20190121 10:23:57.564"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.592">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0065 20</msg>
<status status="PASS" endtime="20190121 10:23:57.593" starttime="20190121 10:23:57.585"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.602" starttime="20190121 10:23:57.596"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.812">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 41 3C F0</msg>
<status status="PASS" endtime="20190121 10:23:57.813" starttime="20190121 10:23:57.605"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.822" starttime="20190121 10:23:57.816"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.831" starttime="20190121 10:23:57.826"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.839">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '41', '3C', 'F0']</msg>
<status status="PASS" endtime="20190121 10:23:57.841" starttime="20190121 10:23:57.834"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.849">${gpio_id} = 05</msg>
<status status="PASS" endtime="20190121 10:23:57.850" starttime="20190121 10:23:57.844"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.859" starttime="20190121 10:23:57.853"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.868">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:57.869" starttime="20190121 10:23:57.862"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:57.872">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:57.873" starttime="20190121 10:23:57.572"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.882" starttime="20190121 10:23:57.876"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.889" starttime="20190121 10:23:57.885"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:57.910">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0020 00</msg>
<status status="PASS" endtime="20190121 10:23:57.911" starttime="20190121 10:23:57.903"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:57.920" starttime="20190121 10:23:57.914"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.221">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 42 3C F3</msg>
<status status="PASS" endtime="20190121 10:23:58.222" starttime="20190121 10:23:57.922"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.258" starttime="20190121 10:23:58.225"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.270" starttime="20190121 10:23:58.261"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.278">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '42', '3C', 'F3']</msg>
<status status="PASS" endtime="20190121 10:23:58.279" starttime="20190121 10:23:58.273"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.287">${gpio_id} = 05</msg>
<status status="PASS" endtime="20190121 10:23:58.288" starttime="20190121 10:23:58.282"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.297" starttime="20190121 10:23:58.291"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.306">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:58.307" starttime="20190121 10:23:58.300"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:58.311">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:58.311" starttime="20190121 10:23:57.892"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.321" starttime="20190121 10:23:58.314"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.329" starttime="20190121 10:23:58.324"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.350">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0000 20</msg>
<status status="PASS" endtime="20190121 10:23:58.350" starttime="20190121 10:23:58.342"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.359" starttime="20190121 10:23:58.353"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.561">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 43 3C F2</msg>
<status status="PASS" endtime="20190121 10:23:58.562" starttime="20190121 10:23:58.362"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.571" starttime="20190121 10:23:58.566"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.580" starttime="20190121 10:23:58.574"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.588">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '43', '3C', 'F2']</msg>
<status status="PASS" endtime="20190121 10:23:58.589" starttime="20190121 10:23:58.583"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.598">${gpio_id} = 05</msg>
<status status="PASS" endtime="20190121 10:23:58.599" starttime="20190121 10:23:58.592"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.608" starttime="20190121 10:23:58.602"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.617">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:58.618" starttime="20190121 10:23:58.611"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:58.621">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:58.622" starttime="20190121 10:23:58.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.632" starttime="20190121 10:23:58.625"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.639" starttime="20190121 10:23:58.635"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.660">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0000 00</msg>
<status status="PASS" endtime="20190121 10:23:58.661" starttime="20190121 10:23:58.653"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.670" starttime="20190121 10:23:58.664"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.873">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 44 3C F5</msg>
<status status="PASS" endtime="20190121 10:23:58.874" starttime="20190121 10:23:58.672"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.883" starttime="20190121 10:23:58.878"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.892" starttime="20190121 10:23:58.886"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.900">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '44', '3C', 'F5']</msg>
<status status="PASS" endtime="20190121 10:23:58.901" starttime="20190121 10:23:58.895"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.910">${gpio_id} = 05</msg>
<status status="PASS" endtime="20190121 10:23:58.911" starttime="20190121 10:23:58.904"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.923" starttime="20190121 10:23:58.914"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.933">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:23:58.934" starttime="20190121 10:23:58.926"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:58.938">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:23:58.939" starttime="20190121 10:23:58.642"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.947" starttime="20190121 10:23:58.942"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:58.950" starttime="20190121 10:23:54.953"></status>
</kw>
<status status="PASS" endtime="20190121 10:23:58.952" starttime="20190121 10:23:54.939"></status>
</kw>
<kw name="digit_out_crm">
<doc>Set pwm for the digital output crm</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output crm</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.965" starttime="20190121 10:23:58.960"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:58.979" starttime="20190121 10:23:58.974"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:58.999">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0020 20</msg>
<status status="PASS" endtime="20190121 10:23:59.000" starttime="20190121 10:23:58.992"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.010" starttime="20190121 10:23:59.004"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.210">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 06 01 45 3D F7</msg>
<status status="PASS" endtime="20190121 10:23:59.210" starttime="20190121 10:23:59.012"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.219" starttime="20190121 10:23:59.214"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.228" starttime="20190121 10:23:59.222"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.236">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '06', '01', '45', '3D', 'F7']</msg>
<status status="PASS" endtime="20190121 10:23:59.237" starttime="20190121 10:23:59.231"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.245">${gpio_id} = 06</msg>
<status status="PASS" endtime="20190121 10:23:59.246" starttime="20190121 10:23:59.240"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.254" starttime="20190121 10:23:59.249"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.263">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:59.264" starttime="20190121 10:23:59.257"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:59.267">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:59.268" starttime="20190121 10:23:58.982"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.276" starttime="20190121 10:23:59.271"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.284" starttime="20190121 10:23:59.279"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.305">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0064 64</msg>
<status status="PASS" endtime="20190121 10:23:59.305" starttime="20190121 10:23:59.297"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.314" starttime="20190121 10:23:59.308"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.517">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 06 01 46 3D F4</msg>
<status status="PASS" endtime="20190121 10:23:59.518" starttime="20190121 10:23:59.317"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.527" starttime="20190121 10:23:59.522"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.536" starttime="20190121 10:23:59.530"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.545">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '06', '01', '46', '3D', 'F4']</msg>
<status status="PASS" endtime="20190121 10:23:59.546" starttime="20190121 10:23:59.539"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.554">${gpio_id} = 06</msg>
<status status="PASS" endtime="20190121 10:23:59.555" starttime="20190121 10:23:59.549"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.564" starttime="20190121 10:23:59.558"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.577">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:59.578" starttime="20190121 10:23:59.567"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:59.582">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:59.583" starttime="20190121 10:23:59.286"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.592" starttime="20190121 10:23:59.585"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.600" starttime="20190121 10:23:59.595"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.620">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0001 01</msg>
<status status="PASS" endtime="20190121 10:23:59.621" starttime="20190121 10:23:59.613"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.629" starttime="20190121 10:23:59.624"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.830">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 06 01 47 3D F5</msg>
<status status="PASS" endtime="20190121 10:23:59.831" starttime="20190121 10:23:59.632"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.840" starttime="20190121 10:23:59.834"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.876" starttime="20190121 10:23:59.843"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.901">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '06', '01', '47', '3D', 'F5']</msg>
<status status="PASS" endtime="20190121 10:23:59.902" starttime="20190121 10:23:59.879"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.923">${gpio_id} = 06</msg>
<status status="PASS" endtime="20190121 10:23:59.924" starttime="20190121 10:23:59.918"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.945" starttime="20190121 10:23:59.927"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:23:59.960">${ret_val} = 00</msg>
<status status="PASS" endtime="20190121 10:23:59.961" starttime="20190121 10:23:59.949"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:23:59.965">${resp} = 00</msg>
<status status="PASS" endtime="20190121 10:23:59.966" starttime="20190121 10:23:59.602"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.984" starttime="20190121 10:23:59.979"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:23:59.995" starttime="20190121 10:23:59.987"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.017">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0065 65</msg>
<status status="PASS" endtime="20190121 10:24:00.018" starttime="20190121 10:24:00.009"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.026" starttime="20190121 10:24:00.020"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.229">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 40 3C F2</msg>
<status status="PASS" endtime="20190121 10:24:00.230" starttime="20190121 10:24:00.029"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.239" starttime="20190121 10:24:00.233"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.248" starttime="20190121 10:24:00.242"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.256">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '40', '3C', 'F2']</msg>
<status status="PASS" endtime="20190121 10:24:00.257" starttime="20190121 10:24:00.251"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.265">${gpio_id} = 06</msg>
<status status="PASS" endtime="20190121 10:24:00.266" starttime="20190121 10:24:00.260"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.274" starttime="20190121 10:24:00.269"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.283">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:24:00.284" starttime="20190121 10:24:00.277"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:00.287">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:24:00.288" starttime="20190121 10:23:59.998"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.298" starttime="20190121 10:24:00.292"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.305" starttime="20190121 10:24:00.300"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.329">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0020 65</msg>
<status status="PASS" endtime="20190121 10:24:00.330" starttime="20190121 10:24:00.318"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.339" starttime="20190121 10:24:00.333"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.542">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 41 3C F3</msg>
<status status="PASS" endtime="20190121 10:24:00.543" starttime="20190121 10:24:00.342"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.552" starttime="20190121 10:24:00.546"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.560" starttime="20190121 10:24:00.555"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.568">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '41', '3C', 'F3']</msg>
<status status="PASS" endtime="20190121 10:24:00.569" starttime="20190121 10:24:00.563"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.578">${gpio_id} = 06</msg>
<status status="PASS" endtime="20190121 10:24:00.579" starttime="20190121 10:24:00.572"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.588" starttime="20190121 10:24:00.582"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.596">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:24:00.597" starttime="20190121 10:24:00.591"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:00.601">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:24:00.602" starttime="20190121 10:24:00.307"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.611" starttime="20190121 10:24:00.605"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.621" starttime="20190121 10:24:00.614"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.642">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0065 20</msg>
<status status="PASS" endtime="20190121 10:24:00.642" starttime="20190121 10:24:00.634"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.652" starttime="20190121 10:24:00.645"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.854">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 42 3C F0</msg>
<status status="PASS" endtime="20190121 10:24:00.857" starttime="20190121 10:24:00.655"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.865" starttime="20190121 10:24:00.860"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.874" starttime="20190121 10:24:00.868"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.881">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '42', '3C', 'F0']</msg>
<status status="PASS" endtime="20190121 10:24:00.882" starttime="20190121 10:24:00.876"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.891">${gpio_id} = 06</msg>
<status status="PASS" endtime="20190121 10:24:00.891" starttime="20190121 10:24:00.885"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.900" starttime="20190121 10:24:00.894"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.909">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:24:00.910" starttime="20190121 10:24:00.903"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:00.913">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:24:00.914" starttime="20190121 10:24:00.623"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.922" starttime="20190121 10:24:00.917"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.930" starttime="20190121 10:24:00.925"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:00.950">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0020 00</msg>
<status status="PASS" endtime="20190121 10:24:00.951" starttime="20190121 10:24:00.943"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:00.960" starttime="20190121 10:24:00.954"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.162">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 43 3C F1</msg>
<status status="PASS" endtime="20190121 10:24:01.163" starttime="20190121 10:24:00.963"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.171" starttime="20190121 10:24:01.166"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.183" starttime="20190121 10:24:01.174"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.192">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '43', '3C', 'F1']</msg>
<status status="PASS" endtime="20190121 10:24:01.193" starttime="20190121 10:24:01.186"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.201">${gpio_id} = 06</msg>
<status status="PASS" endtime="20190121 10:24:01.202" starttime="20190121 10:24:01.196"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.211" starttime="20190121 10:24:01.205"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.219">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:24:01.220" starttime="20190121 10:24:01.214"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:01.224">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:24:01.225" starttime="20190121 10:24:00.932"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.235" starttime="20190121 10:24:01.227"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.245" starttime="20190121 10:24:01.239"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.266">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0000 20</msg>
<status status="PASS" endtime="20190121 10:24:01.267" starttime="20190121 10:24:01.258"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.276" starttime="20190121 10:24:01.270"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.581">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 44 3C F6</msg>
<status status="PASS" endtime="20190121 10:24:01.582" starttime="20190121 10:24:01.279"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.591" starttime="20190121 10:24:01.585"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.600" starttime="20190121 10:24:01.594"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.607">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '44', '3C', 'F6']</msg>
<status status="PASS" endtime="20190121 10:24:01.608" starttime="20190121 10:24:01.602"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.617">${gpio_id} = 06</msg>
<status status="PASS" endtime="20190121 10:24:01.618" starttime="20190121 10:24:01.611"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.626" starttime="20190121 10:24:01.621"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.635">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:24:01.636" starttime="20190121 10:24:01.629"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:01.639">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:24:01.640" starttime="20190121 10:24:01.247"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.649" starttime="20190121 10:24:01.643"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.656" starttime="20190121 10:24:01.652"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.677">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0000 00</msg>
<status status="PASS" endtime="20190121 10:24:01.678" starttime="20190121 10:24:01.669"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.686" starttime="20190121 10:24:01.680"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.890">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 45 3C F7</msg>
<status status="PASS" endtime="20190121 10:24:01.891" starttime="20190121 10:24:01.689"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.900" starttime="20190121 10:24:01.895"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.909" starttime="20190121 10:24:01.903"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.917">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '45', '3C', 'F7']</msg>
<status status="PASS" endtime="20190121 10:24:01.918" starttime="20190121 10:24:01.912"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.926">${gpio_id} = 06</msg>
<status status="PASS" endtime="20190121 10:24:01.927" starttime="20190121 10:24:01.921"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.935" starttime="20190121 10:24:01.930"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:01.948">${ret_val} = 01</msg>
<status status="PASS" endtime="20190121 10:24:01.949" starttime="20190121 10:24:01.939"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:01.952">${resp} = 01</msg>
<status status="PASS" endtime="20190121 10:24:01.953" starttime="20190121 10:24:01.659"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:01.962" starttime="20190121 10:24:01.956"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:01.964" starttime="20190121 10:23:58.967"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:01.967" starttime="20190121 10:23:58.954"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:02.025" starttime="20190121 10:24:01.977"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:02.074" starttime="20190121 10:24:02.028"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:02.123" starttime="20190121 10:24:02.077"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:02.171" starttime="20190121 10:24:02.127"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:02.174" starttime="20190121 10:24:01.971"></status>
</kw>
<doc>Implements Test Task SKTB-49357 set pwm on Digital Outputs</doc>
<tags>
<tag>GPIO Test</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:24:02.175" starttime="20190121 10:23:35.723"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:24:03.691">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:24:03.722">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:24:03.724" starttime="20190121 10:24:02.228"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:03.725" starttime="20190121 10:24:02.191"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:03.749" starttime="20190121 10:24:02.185"></status>
</kw>
<doc>Chorus GPIO outputs set pwm</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:24:03.750" starttime="20190121 10:23:32.647"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-41553.robot" name="SKTB-41553" id="s1-s13">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:04.486">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:24:04.500" starttime="20190121 10:24:04.481"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:04.516">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:24:04.518">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:24:06.696">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:24:06.698" starttime="20190121 10:24:04.503"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:06.706" starttime="20190121 10:24:04.459"></status>
</kw>
<test name="SKTB-41553" id="s1-s13-t1">
<kw name="Test_precondition" type="setup">
<doc>Precondition, Switch power on and set Serial configuration</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Precondition, Switch power on and set Serial configuration</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:06.781" starttime="20190121 10:24:06.765"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:06.931" starttime="20190121 10:24:06.783"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:07.065" starttime="20190121 10:24:06.937"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:07.160" starttime="20190121 10:24:07.067"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${912600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:07.281" starttime="20190121 10:24:07.163"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:07.424" starttime="20190121 10:24:07.284"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:07.535" starttime="20190121 10:24:07.431"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:09.553">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:24:09.555" starttime="20190121 10:24:07.538"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:09.605" starttime="20190121 10:24:09.558"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:09.654" starttime="20190121 10:24:09.607"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:09.656" starttime="20190121 10:24:06.737"></status>
</kw>
<kw name="TEST_OTP_CARIF_PSN">
<doc>Test PSN value, write default value and read it, then write new value and read it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test PSN value, write and read default value</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:09.671" starttime="20190121 10:24:09.666"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Read default otp value</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:09.678" starttime="20190121 10:24:09.674"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${OTP_CARIF_PSN}</arg>
<arg>${PSN_LEN}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:09.697">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FE 00 10</msg>
<status status="PASS" endtime="20190121 10:24:09.698" starttime="20190121 10:24:09.690"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:09.707" starttime="20190121 10:24:09.701"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:09.911">${resp} = 1E 10 54 94 00 1B 00 0B EE 04 FF FE 00 10 00 4C 61 69 72 64 20 50 53 4E 20 30 31 32 33 34 35 01 45 00 69 16</msg>
<status status="PASS" endtime="20190121 10:24:09.913" starttime="20190121 10:24:09.710"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:09.922" starttime="20190121 10:24:09.916"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:09.941">${temp1} = 1E105494001B000BEE04FFFE0010004C616972642050534E203031323334350145006916</msg>
<status status="PASS" endtime="20190121 10:24:09.942" starttime="20190121 10:24:09.935"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:09.950">${temp2} = EE04FFFE001000</msg>
<status status="PASS" endtime="20190121 10:24:09.951" starttime="20190121 10:24:09.945"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:09.959" starttime="20190121 10:24:09.954"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:09.962" starttime="20190121 10:24:09.924"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:09.965">${res} = 1E 10 54 94 00 1B 00 0B EE 04 FF FE 00 10 00 4C 61 69 72 64 20 50 53 4E 20 30 31 32 33 34 35 01 45 00 69 16</msg>
<status status="PASS" endtime="20190121 10:24:09.966" starttime="20190121 10:24:09.680"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:09.968" starttime="20190121 10:24:09.659"></status>
</kw>
<kw name="TEST_OTP_CARIF_HW_PART_NO">
<doc>READ_OTP_CARIF_HW_PART_NO</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Read otp_carif_hw_part_no</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:09.985" starttime="20190121 10:24:09.976"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${OTP_CARIF_HW_PART_NO}</arg>
<arg>${HW_PART_NO_LEN}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.002">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FD 00 0A</msg>
<status status="PASS" endtime="20190121 10:24:10.003" starttime="20190121 10:24:09.995"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.012" starttime="20190121 10:24:10.006"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.213">${resp} = 1E 10 54 94 00 15 00 0B EE 04 FF FD 00 0A 00 4C 61 69 72 64 20 30 31 32 33 01 44 00 2E 2B</msg>
<status status="PASS" endtime="20190121 10:24:10.214" starttime="20190121 10:24:10.015"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.224" starttime="20190121 10:24:10.218"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.243">${temp1} = 1E1054940015000BEE04FFFD000A004C6169726420303132330144002E2B</msg>
<status status="PASS" endtime="20190121 10:24:10.244" starttime="20190121 10:24:10.237"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.252">${temp2} = EE04FFFD000A00</msg>
<status status="PASS" endtime="20190121 10:24:10.253" starttime="20190121 10:24:10.246"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.261" starttime="20190121 10:24:10.256"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:10.264" starttime="20190121 10:24:10.226"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:10.267" starttime="20190121 10:24:09.987"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:10.269" starttime="20190121 10:24:09.970"></status>
</kw>
<kw name="TEST_OTP_CARIF_HW_VERSION_INFO">
<doc>READ_OTP_CARIF_HW_VERSION_INFO</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>READ_OTP_CARIF_HW_VERSION_INFO</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.282" starttime="20190121 10:24:10.277"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${OTP_CARIF_HW_VERSION_INFO}</arg>
<arg>${HW_VERSION_INFO_LEN}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.300">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FC 00 04</msg>
<status status="PASS" endtime="20190121 10:24:10.301" starttime="20190121 10:24:10.293"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.309" starttime="20190121 10:24:10.304"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.527">${resp} = 1E 10 54 94 00 0F 00 0B EE 04 FF FC 00 04 00 03 01 06 00 01 45 00 1F 78</msg>
<status status="PASS" endtime="20190121 10:24:10.527" starttime="20190121 10:24:10.312"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.579" starttime="20190121 10:24:10.539"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.628">${temp1} = 1E105494000F000BEE04FFFC000400030106000145001F78</msg>
<status status="PASS" endtime="20190121 10:24:10.629" starttime="20190121 10:24:10.619"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.638">${temp2} = EE04FFFC000400</msg>
<status status="PASS" endtime="20190121 10:24:10.639" starttime="20190121 10:24:10.632"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.648" starttime="20190121 10:24:10.642"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:10.650" starttime="20190121 10:24:10.587"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:10.657" starttime="20190121 10:24:10.284"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:10.662" starttime="20190121 10:24:10.271"></status>
</kw>
<kw name="TEST_OTP_CARIF_HW_SUPPLIER_INFO">
<doc>READ_OTP_CARIF_HW_SUPPLIER_INFO</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>READ_OTP_CARIF_HW_SUPPLIER_INFO</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.687" starttime="20190121 10:24:10.679"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${OTP_CARIF_HW_SUPPLIER_INFO}</arg>
<arg>${HW_SUPPLIER_INFO_LEN}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.714">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FB 00 02</msg>
<status status="PASS" endtime="20190121 10:24:10.715" starttime="20190121 10:24:10.707"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.724" starttime="20190121 10:24:10.718"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.941">${resp} = 1E 10 54 94 00 0D 00 0B EE 04 FF FB 00 02 00 30 31 01 46 00 2C 4E</msg>
<status status="PASS" endtime="20190121 10:24:10.942" starttime="20190121 10:24:10.727"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.950" starttime="20190121 10:24:10.945"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.969">${temp1} = 1E105494000D000BEE04FFFB00020030310146002C4E</msg>
<status status="PASS" endtime="20190121 10:24:10.970" starttime="20190121 10:24:10.963"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:10.978">${temp2} = EE04FFFB000200</msg>
<status status="PASS" endtime="20190121 10:24:10.979" starttime="20190121 10:24:10.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:10.988" starttime="20190121 10:24:10.982"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:10.990" starttime="20190121 10:24:10.952"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:10.993" starttime="20190121 10:24:10.690"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:10.995" starttime="20190121 10:24:10.668"></status>
</kw>
<kw name="TEST_EEPROM_SW_SPARE_PART_NUMBER">
<doc>Write and read the EEPROM_SW_SPARE_PART_NUMBER</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_SW_SPARE_PART_NUMBER</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.009" starttime="20190121 10:24:11.004"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write eeprom sw spare part number with default value</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.017" starttime="20190121 10:24:11.012"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_SW_SPARE_PART_NUMBER}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_LEN}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.036">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF FA 00 0C 53 70 61 72 65 20 50 61 72 74 20 4e</msg>
<status status="PASS" endtime="20190121 10:24:11.037" starttime="20190121 10:24:11.029"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.053">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'FA', '00', '0C', '53', '70', '61', '72', '65', '20', '50', '61', '72', '74', '20', '4e']</msg>
<status status="PASS" endtime="20190121 10:24:11.054" starttime="20190121 10:24:11.048"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.060">Length is 26</msg>
<msg level="INFO" timestamp="20190121 10:24:11.062">${length} = 26</msg>
<status status="PASS" endtime="20190121 10:24:11.063" starttime="20190121 10:24:11.056"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.071" starttime="20190121 10:24:11.066"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.080">${value} = 20</msg>
<status status="PASS" endtime="20190121 10:24:11.081" starttime="20190121 10:24:11.074"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.090">${res} = 14</msg>
<status status="PASS" endtime="20190121 10:24:11.091" starttime="20190121 10:24:11.084"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.099" starttime="20190121 10:24:11.094"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.108">${res} = 1E54109400140000EE05FFFA000C53706172652050617274204e</msg>
<status status="PASS" endtime="20190121 10:24:11.109" starttime="20190121 10:24:11.102"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:11.113">${ISI_MSG_NORM} = 1E54109400140000EE05FFFA000C53706172652050617274204e</msg>
<status status="PASS" endtime="20190121 10:24:11.114" starttime="20190121 10:24:11.039"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.122" starttime="20190121 10:24:11.116"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.646">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF FA 00 00 01 47 5A 3E</msg>
<status status="PASS" endtime="20190121 10:24:11.647" starttime="20190121 10:24:11.125"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.656" starttime="20190121 10:24:11.651"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.675">${temp1} = 1E105494000A000BEE06FFFA000001475A3E</msg>
<status status="PASS" endtime="20190121 10:24:11.676" starttime="20190121 10:24:11.669"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.684">${temp2} = EE06FFFA00</msg>
<status status="PASS" endtime="20190121 10:24:11.685" starttime="20190121 10:24:11.678"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.693" starttime="20190121 10:24:11.688"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:11.696" starttime="20190121 10:24:11.659"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:11.698" starttime="20190121 10:24:11.019"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>write eeprom sw spare part number with Different value</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.705" starttime="20190121 10:24:11.701"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_SW_SPARE_PART_NUMBER}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_LEN}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.729">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF FA 00 0C 53 70 61 72 65 20 50 61 72 74 20 AA</msg>
<status status="PASS" endtime="20190121 10:24:11.730" starttime="20190121 10:24:11.718"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.745">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'FA', '00', '0C', '53', '70', '61', '72', '65', '20', '50', '61', '72', '74', '20', 'AA']</msg>
<status status="PASS" endtime="20190121 10:24:11.746" starttime="20190121 10:24:11.740"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.753">Length is 26</msg>
<msg level="INFO" timestamp="20190121 10:24:11.755">${length} = 26</msg>
<status status="PASS" endtime="20190121 10:24:11.756" starttime="20190121 10:24:11.749"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.764" starttime="20190121 10:24:11.758"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.772">${value} = 20</msg>
<status status="PASS" endtime="20190121 10:24:11.773" starttime="20190121 10:24:11.767"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.781">${res} = 14</msg>
<status status="PASS" endtime="20190121 10:24:11.782" starttime="20190121 10:24:11.776"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.790" starttime="20190121 10:24:11.785"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:11.800">${res} = 1E54109400140000EE05FFFA000C5370617265205061727420AA</msg>
<status status="PASS" endtime="20190121 10:24:11.801" starttime="20190121 10:24:11.794"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:11.805">${ISI_MSG_NORM} = 1E54109400140000EE05FFFA000C5370617265205061727420AA</msg>
<status status="PASS" endtime="20190121 10:24:11.806" starttime="20190121 10:24:11.732"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:11.815" starttime="20190121 10:24:11.808"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:12.304">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF FA 00 00 01 40 5A 39</msg>
<status status="PASS" endtime="20190121 10:24:12.305" starttime="20190121 10:24:11.818"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:12.313" starttime="20190121 10:24:12.308"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:12.332">${temp1} = 1E105494000A000BEE06FFFA000001405A39</msg>
<status status="PASS" endtime="20190121 10:24:12.333" starttime="20190121 10:24:12.326"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:12.341">${temp2} = EE06FFFA00</msg>
<status status="PASS" endtime="20190121 10:24:12.342" starttime="20190121 10:24:12.335"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:12.351" starttime="20190121 10:24:12.345"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:12.353" starttime="20190121 10:24:12.316"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:12.355" starttime="20190121 10:24:11.707"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:12.410" starttime="20190121 10:24:12.363"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:12.470" starttime="20190121 10:24:12.414"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:14.498">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:24:14.500" starttime="20190121 10:24:12.485"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:14.550" starttime="20190121 10:24:14.503"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:14.601" starttime="20190121 10:24:14.553"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:14.603" starttime="20190121 10:24:12.357"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_SW_SPARE_PART_NUMBER}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:14.621">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FA 00 0C</msg>
<status status="PASS" endtime="20190121 10:24:14.622" starttime="20190121 10:24:14.615"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:14.633" starttime="20190121 10:24:14.626"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.053">${resp} = 1E 10 54 94 00 17 00 0B EE 04 FF FA 00 0C 00 53 70 61 72 65 20 50 61 72 74 20 AA 01 43 00 85 3E</msg>
<status status="PASS" endtime="20190121 10:24:15.054" starttime="20190121 10:24:14.637"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:15.063" starttime="20190121 10:24:15.057"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.086">${temp1} = 1E1054940017000BEE04FFFA000C005370617265205061727420AA014300853E</msg>
<status status="PASS" endtime="20190121 10:24:15.087" starttime="20190121 10:24:15.076"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.096">${temp2} = EE04FFFA000C00</msg>
<status status="PASS" endtime="20190121 10:24:15.097" starttime="20190121 10:24:15.089"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:15.105" starttime="20190121 10:24:15.100"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:15.107" starttime="20190121 10:24:15.065"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:15.111">${RESP} = 1E 10 54 94 00 17 00 0B EE 04 FF FA 00 0C 00 53 70 61 72 65 20 50 61 72 74 20 AA 01 43 00 85 3E</msg>
<status status="PASS" endtime="20190121 10:24:15.112" starttime="20190121 10:24:14.605"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_LEN} ${EEPROM_APP_OK} ${EEPROM_SW_SPARE_PART_NUMBER_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.130">${temp1} = 1E1054940017000BEE04FFFA000C005370617265205061727420AA014300853E</msg>
<status status="PASS" endtime="20190121 10:24:15.131" starttime="20190121 10:24:15.124"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.139">${temp2} = 000C005370617265205061727420AA</msg>
<status status="PASS" endtime="20190121 10:24:15.140" starttime="20190121 10:24:15.134"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:15.150" starttime="20190121 10:24:15.144"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:15.152" starttime="20190121 10:24:15.114"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:15.154" starttime="20190121 10:24:10.998"></status>
</kw>
<kw name="TEST_PRODUCT_NAME">
<doc>Write and read the EEPROM_PRODUCT_NAME</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_PRODUCT_NAME</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:15.167" starttime="20190121 10:24:15.163"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>write default value</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:15.175" starttime="20190121 10:24:15.170"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_PRODUCT_NAME}</arg>
<arg>${EEPROM_PRODUCT_NAME_LEN}</arg>
<arg>${EEPROM_PRODUCT_NAME_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.194">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F9 00 0C 4f 4c 55 20 43 6f 6e 6e 65 63 74 69</msg>
<status status="PASS" endtime="20190121 10:24:15.195" starttime="20190121 10:24:15.187"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.209">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F9', '00', '0C', '4f', '4c', '55', '20', '43', '6f', '6e', '6e', '65', '63', '74', '69']</msg>
<status status="PASS" endtime="20190121 10:24:15.210" starttime="20190121 10:24:15.204"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.217">Length is 26</msg>
<msg level="INFO" timestamp="20190121 10:24:15.219">${length} = 26</msg>
<status status="PASS" endtime="20190121 10:24:15.220" starttime="20190121 10:24:15.213"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:15.228" starttime="20190121 10:24:15.223"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.236">${value} = 20</msg>
<status status="PASS" endtime="20190121 10:24:15.237" starttime="20190121 10:24:15.231"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.246">${res} = 14</msg>
<status status="PASS" endtime="20190121 10:24:15.247" starttime="20190121 10:24:15.240"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:15.255" starttime="20190121 10:24:15.250"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:15.265">${res} = 1E54109400140000EE05FFF9000C4f4c5520436f6e6e65637469</msg>
<status status="PASS" endtime="20190121 10:24:15.266" starttime="20190121 10:24:15.258"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:15.269">${ISI_MSG_NORM} = 1E54109400140000EE05FFF9000C4f4c5520436f6e6e65637469</msg>
<status status="PASS" endtime="20190121 10:24:15.270" starttime="20190121 10:24:15.197"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:15.279" starttime="20190121 10:24:15.273"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:16.657">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F9 00 00 01 44 5A 3E</msg>
<status status="PASS" endtime="20190121 10:24:16.658" starttime="20190121 10:24:15.282"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:16.684" starttime="20190121 10:24:16.669"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:16.730">${temp1} = 1E105494000A000BEE06FFF9000001445A3E</msg>
<status status="PASS" endtime="20190121 10:24:16.731" starttime="20190121 10:24:16.718"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:16.762">${temp2} = EE06FFF900</msg>
<status status="PASS" endtime="20190121 10:24:16.763" starttime="20190121 10:24:16.752"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:16.772" starttime="20190121 10:24:16.766"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:16.775" starttime="20190121 10:24:16.686"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:16.777" starttime="20190121 10:24:15.177"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_PRODUCT_NAME}</arg>
<arg>${EEPROM_PRODUCT_NAME_LEN}</arg>
<arg>${EEPROM_PRODUCT_NAME_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:16.796">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F9 00 0C 4f 4c 55 20 43 6f 6e 6e 65 63 74 BB</msg>
<status status="PASS" endtime="20190121 10:24:16.798" starttime="20190121 10:24:16.788"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:16.817">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F9', '00', '0C', '4f', '4c', '55', '20', '43', '6f', '6e', '6e', '65', '63', '74', 'BB']</msg>
<status status="PASS" endtime="20190121 10:24:16.818" starttime="20190121 10:24:16.812"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:16.825">Length is 26</msg>
<msg level="INFO" timestamp="20190121 10:24:16.827">${length} = 26</msg>
<status status="PASS" endtime="20190121 10:24:16.827" starttime="20190121 10:24:16.821"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:16.836" starttime="20190121 10:24:16.831"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:16.847">${value} = 20</msg>
<status status="PASS" endtime="20190121 10:24:16.849" starttime="20190121 10:24:16.839"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:16.858">${res} = 14</msg>
<status status="PASS" endtime="20190121 10:24:16.858" starttime="20190121 10:24:16.852"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:16.882" starttime="20190121 10:24:16.861"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:16.933">${res} = 1E54109400140000EE05FFF9000C4f4c5520436f6e6e656374BB</msg>
<status status="PASS" endtime="20190121 10:24:16.934" starttime="20190121 10:24:16.910"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:16.942">${ISI_MSG_NORM} = 1E54109400140000EE05FFF9000C4f4c5520436f6e6e656374BB</msg>
<status status="PASS" endtime="20190121 10:24:16.943" starttime="20190121 10:24:16.800"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:16.978" starttime="20190121 10:24:16.962"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:17.681">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F9 00 00 01 45 5A 3F</msg>
<status status="PASS" endtime="20190121 10:24:17.681" starttime="20190121 10:24:16.982"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:17.741" starttime="20190121 10:24:17.699"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:17.801">${temp1} = 1E105494000A000BEE06FFF9000001455A3F</msg>
<status status="PASS" endtime="20190121 10:24:17.802" starttime="20190121 10:24:17.786"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:17.816">${temp2} = EE06FFF900</msg>
<status status="PASS" endtime="20190121 10:24:17.817" starttime="20190121 10:24:17.805"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:17.834" starttime="20190121 10:24:17.820"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:17.836" starttime="20190121 10:24:17.743"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:17.838" starttime="20190121 10:24:16.779"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:17.951" starttime="20190121 10:24:17.867"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:18.039" starttime="20190121 10:24:17.954"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:20.062">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:24:20.064" starttime="20190121 10:24:18.042"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:20.115" starttime="20190121 10:24:20.066"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:20.167" starttime="20190121 10:24:20.119"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:20.170" starttime="20190121 10:24:17.860"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_PRODUCT_NAME}</arg>
<arg>${EEPROM_PRODUCT_NAME_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:20.187">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F9 00 0C</msg>
<status status="PASS" endtime="20190121 10:24:20.188" starttime="20190121 10:24:20.181"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:20.196" starttime="20190121 10:24:20.191"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:20.748">${resp} = 1E 10 54 94 00 17 00 0B EE 04 FF F9 00 0C 00 4F 4C 55 20 43 6F 6E 6E 65 63 74 BB 01 43 00 AD 4E</msg>
<status status="PASS" endtime="20190121 10:24:20.762" starttime="20190121 10:24:20.199"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:20.783" starttime="20190121 10:24:20.765"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:20.831">${temp1} = 1E1054940017000BEE04FFF9000C004F4C5520436F6E6E656374BB014300AD4E</msg>
<status status="PASS" endtime="20190121 10:24:20.832" starttime="20190121 10:24:20.809"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:20.841">${temp2} = EE04FFF9000C00</msg>
<status status="PASS" endtime="20190121 10:24:20.854" starttime="20190121 10:24:20.835"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:20.863" starttime="20190121 10:24:20.857"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:20.875" starttime="20190121 10:24:20.785"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:20.879">${RESP} = 1E 10 54 94 00 17 00 0B EE 04 FF F9 00 0C 00 4F 4C 55 20 43 6F 6E 6E 65 63 74 BB 01 43 00 AD 4E</msg>
<status status="PASS" endtime="20190121 10:24:20.879" starttime="20190121 10:24:20.172"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_PRODUCT_NAME_LEN} ${EEPROM_APP_OK} ${EEPROM_PRODUCT_NAME_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:20.922">${temp1} = 1E1054940017000BEE04FFF9000C004F4C5520436F6E6E656374BB014300AD4E</msg>
<status status="PASS" endtime="20190121 10:24:20.923" starttime="20190121 10:24:20.904"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:20.932">${temp2} = 000C004f4c5520436f6e6e656374BB</msg>
<status status="PASS" endtime="20190121 10:24:20.933" starttime="20190121 10:24:20.926"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:21.027" starttime="20190121 10:24:20.983"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:21.029" starttime="20190121 10:24:20.882"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:21.061" starttime="20190121 10:24:15.156"></status>
</kw>
<kw name="TEST_LAST_POWER_STATE">
<doc>Write and read the EEPROM_LAST_POWER_STATE</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_LAST_POWER_STATE</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:21.104" starttime="20190121 10:24:21.090"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_LAST_POWER_STATE}</arg>
<arg>${EEPROM_LAST_POWER_STATE_LEN}</arg>
<arg>${EEPROM_LAST_POWER_STATE_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:21.137">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F8 00 01 FF</msg>
<status status="PASS" endtime="20190121 10:24:21.138" starttime="20190121 10:24:21.130"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:21.153">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F8', '00', '01', 'FF']</msg>
<status status="PASS" endtime="20190121 10:24:21.154" starttime="20190121 10:24:21.148"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:21.162">Length is 15</msg>
<msg level="INFO" timestamp="20190121 10:24:21.164">${length} = 15</msg>
<status status="PASS" endtime="20190121 10:24:21.165" starttime="20190121 10:24:21.157"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:21.173" starttime="20190121 10:24:21.168"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:21.182">${value} = 9</msg>
<status status="PASS" endtime="20190121 10:24:21.182" starttime="20190121 10:24:21.176"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:21.191">${res} = 09</msg>
<status status="PASS" endtime="20190121 10:24:21.192" starttime="20190121 10:24:21.185"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:21.199" starttime="20190121 10:24:21.194"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:21.209">${res} = 1E54109400090000EE05FFF80001FF</msg>
<status status="PASS" endtime="20190121 10:24:21.210" starttime="20190121 10:24:21.202"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:21.213">${ISI_MSG_NORM} = 1E54109400090000EE05FFF80001FF</msg>
<status status="PASS" endtime="20190121 10:24:21.214" starttime="20190121 10:24:21.141"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:21.224" starttime="20190121 10:24:21.217"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:21.953">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F8 00 00 01 44 5A 3F</msg>
<status status="PASS" endtime="20190121 10:24:21.954" starttime="20190121 10:24:21.227"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:21.963" starttime="20190121 10:24:21.957"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:21.981">${temp1} = 1E105494000A000BEE06FFF8000001445A3F</msg>
<status status="PASS" endtime="20190121 10:24:21.982" starttime="20190121 10:24:21.975"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:21.990">${temp2} = EE06FFF800</msg>
<status status="PASS" endtime="20190121 10:24:21.991" starttime="20190121 10:24:21.985"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:22.000" starttime="20190121 10:24:21.994"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:22.002" starttime="20190121 10:24:21.965"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:22.005" starttime="20190121 10:24:21.106"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_LAST_POWER_STATE}</arg>
<arg>${EEPROM_LAST_POWER_STATE_LEN}</arg>
<arg>${EEPROM_LAST_POWER_STATE_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:22.023">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F8 00 01 AA</msg>
<status status="PASS" endtime="20190121 10:24:22.024" starttime="20190121 10:24:22.017"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:22.040">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F8', '00', '01', 'AA']</msg>
<status status="PASS" endtime="20190121 10:24:22.041" starttime="20190121 10:24:22.034"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:22.052">Length is 15</msg>
<msg level="INFO" timestamp="20190121 10:24:22.054">${length} = 15</msg>
<status status="PASS" endtime="20190121 10:24:22.055" starttime="20190121 10:24:22.044"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:22.063" starttime="20190121 10:24:22.058"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:22.072">${value} = 9</msg>
<status status="PASS" endtime="20190121 10:24:22.073" starttime="20190121 10:24:22.066"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:22.081">${res} = 09</msg>
<status status="PASS" endtime="20190121 10:24:22.082" starttime="20190121 10:24:22.075"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:22.090" starttime="20190121 10:24:22.085"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:22.099">${res} = 1E54109400090000EE05FFF80001AA</msg>
<status status="PASS" endtime="20190121 10:24:22.099" starttime="20190121 10:24:22.093"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:22.103">${ISI_MSG_NORM} = 1E54109400090000EE05FFF80001AA</msg>
<status status="PASS" endtime="20190121 10:24:22.104" starttime="20190121 10:24:22.027"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:22.113" starttime="20190121 10:24:22.107"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:22.530">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F8 00 00 01 45 5A 3E</msg>
<status status="PASS" endtime="20190121 10:24:22.531" starttime="20190121 10:24:22.115"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:22.540" starttime="20190121 10:24:22.534"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:22.558">${temp1} = 1E105494000A000BEE06FFF8000001455A3E</msg>
<status status="PASS" endtime="20190121 10:24:22.559" starttime="20190121 10:24:22.552"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:22.568">${temp2} = EE06FFF800</msg>
<status status="PASS" endtime="20190121 10:24:22.569" starttime="20190121 10:24:22.562"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:22.578" starttime="20190121 10:24:22.572"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:22.580" starttime="20190121 10:24:22.542"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:22.583" starttime="20190121 10:24:22.007"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:22.638" starttime="20190121 10:24:22.591"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:22.689" starttime="20190121 10:24:22.641"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:24.705">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:24:24.708" starttime="20190121 10:24:22.692"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:24.757" starttime="20190121 10:24:24.711"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:24.806" starttime="20190121 10:24:24.760"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:24.809" starttime="20190121 10:24:22.585"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_LAST_POWER_STATE}</arg>
<arg>${EEPROM_LAST_POWER_STATE_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:24.827">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F8 00 01</msg>
<status status="PASS" endtime="20190121 10:24:24.827" starttime="20190121 10:24:24.820"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:24.836" starttime="20190121 10:24:24.830"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.149">${resp} = 1E 10 54 94 00 0C 00 0B EE 04 FF F8 00 01 00 AA 01 43 5A 97</msg>
<status status="PASS" endtime="20190121 10:24:25.150" starttime="20190121 10:24:24.839"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:25.159" starttime="20190121 10:24:25.153"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.178">${temp1} = 1E105494000C000BEE04FFF8000100AA01435A97</msg>
<status status="PASS" endtime="20190121 10:24:25.179" starttime="20190121 10:24:25.172"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.187">${temp2} = EE04FFF8000100</msg>
<status status="PASS" endtime="20190121 10:24:25.188" starttime="20190121 10:24:25.182"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:25.197" starttime="20190121 10:24:25.191"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:25.199" starttime="20190121 10:24:25.161"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:25.202">${RESP} = 1E 10 54 94 00 0C 00 0B EE 04 FF F8 00 01 00 AA 01 43 5A 97</msg>
<status status="PASS" endtime="20190121 10:24:25.203" starttime="20190121 10:24:24.811"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_LAST_POWER_STATE_LEN} ${EEPROM_APP_OK} ${EEPROM_LAST_POWER_STATE_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.221">${temp1} = 1E105494000C000BEE04FFF8000100AA01435A97</msg>
<status status="PASS" endtime="20190121 10:24:25.222" starttime="20190121 10:24:25.215"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.235">${temp2} = 000100AA</msg>
<status status="PASS" endtime="20190121 10:24:25.236" starttime="20190121 10:24:25.225"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:25.244" starttime="20190121 10:24:25.239"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:25.247" starttime="20190121 10:24:25.205"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:25.249" starttime="20190121 10:24:21.063"></status>
</kw>
<kw name="TEST_WAKE_BARRIERS">
<doc>Write and read the EEPROM_WAKE_BARRIERS</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_WAKE_BARRIERS</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:25.262" starttime="20190121 10:24:25.257"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_WAKE_BARRIERS}</arg>
<arg>${EEPROM_WAKE_BARRIERS_LEN}</arg>
<arg>${EEPROM_WAKE_BARRIERS_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.281">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F7 00 02 FF FF</msg>
<status status="PASS" endtime="20190121 10:24:25.282" starttime="20190121 10:24:25.274"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.298">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F7', '00', '02', 'FF', 'FF']</msg>
<status status="PASS" endtime="20190121 10:24:25.300" starttime="20190121 10:24:25.293"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.307">Length is 16</msg>
<msg level="INFO" timestamp="20190121 10:24:25.310">${length} = 16</msg>
<status status="PASS" endtime="20190121 10:24:25.311" starttime="20190121 10:24:25.303"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:25.319" starttime="20190121 10:24:25.314"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.328">${value} = 10</msg>
<status status="PASS" endtime="20190121 10:24:25.329" starttime="20190121 10:24:25.322"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.337">${res} = 0A</msg>
<status status="PASS" endtime="20190121 10:24:25.338" starttime="20190121 10:24:25.332"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:25.346" starttime="20190121 10:24:25.341"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:25.355">${res} = 1E541094000A0000EE05FFF70002FFFF</msg>
<status status="PASS" endtime="20190121 10:24:25.356" starttime="20190121 10:24:25.349"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:25.360">${ISI_MSG_NORM} = 1E541094000A0000EE05FFF70002FFFF</msg>
<status status="PASS" endtime="20190121 10:24:25.361" starttime="20190121 10:24:25.284"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:25.369" starttime="20190121 10:24:25.364"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:26.425">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F7 00 00 01 44 5A 30</msg>
<status status="PASS" endtime="20190121 10:24:26.426" starttime="20190121 10:24:25.373"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:26.434" starttime="20190121 10:24:26.429"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:26.453">${temp1} = 1E105494000A000BEE06FFF7000001445A30</msg>
<status status="PASS" endtime="20190121 10:24:26.454" starttime="20190121 10:24:26.447"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:26.462">${temp2} = EE06FFF700</msg>
<status status="PASS" endtime="20190121 10:24:26.463" starttime="20190121 10:24:26.457"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:26.471" starttime="20190121 10:24:26.466"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:26.474" starttime="20190121 10:24:26.437"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:26.476" starttime="20190121 10:24:25.264"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_WAKE_BARRIERS}</arg>
<arg>${EEPROM_WAKE_BARRIERS_LEN}</arg>
<arg>${EEPROM_WAKE_BARRIERS_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:26.495">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F7 00 02 AA BB</msg>
<status status="PASS" endtime="20190121 10:24:26.496" starttime="20190121 10:24:26.488"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:26.511">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F7', '00', '02', 'AA', 'BB']</msg>
<status status="PASS" endtime="20190121 10:24:26.512" starttime="20190121 10:24:26.506"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:26.518">Length is 16</msg>
<msg level="INFO" timestamp="20190121 10:24:26.520">${length} = 16</msg>
<status status="PASS" endtime="20190121 10:24:26.521" starttime="20190121 10:24:26.514"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:26.534" starttime="20190121 10:24:26.524"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:26.543">${value} = 10</msg>
<status status="PASS" endtime="20190121 10:24:26.544" starttime="20190121 10:24:26.537"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:26.552">${res} = 0A</msg>
<status status="PASS" endtime="20190121 10:24:26.553" starttime="20190121 10:24:26.547"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:26.561" starttime="20190121 10:24:26.556"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:26.572">${res} = 1E541094000A0000EE05FFF70002AABB</msg>
<status status="PASS" endtime="20190121 10:24:26.573" starttime="20190121 10:24:26.564"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:26.577">${ISI_MSG_NORM} = 1E541094000A0000EE05FFF70002AABB</msg>
<status status="PASS" endtime="20190121 10:24:26.577" starttime="20190121 10:24:26.498"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:26.586" starttime="20190121 10:24:26.580"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:27.017">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F7 00 00 01 45 5A 31</msg>
<status status="PASS" endtime="20190121 10:24:27.018" starttime="20190121 10:24:26.589"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:27.065" starttime="20190121 10:24:27.033"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:27.115">${temp1} = 1E105494000A000BEE06FFF7000001455A31</msg>
<status status="PASS" endtime="20190121 10:24:27.116" starttime="20190121 10:24:27.102"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:27.144">${temp2} = EE06FFF700</msg>
<status status="PASS" endtime="20190121 10:24:27.145" starttime="20190121 10:24:27.119"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:27.167" starttime="20190121 10:24:27.161"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:27.177" starttime="20190121 10:24:27.068"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:27.179" starttime="20190121 10:24:26.478"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:27.282" starttime="20190121 10:24:27.200"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:27.386" starttime="20190121 10:24:27.285"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:29.396">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:24:29.398" starttime="20190121 10:24:27.390"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:29.446" starttime="20190121 10:24:29.401"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:29.496" starttime="20190121 10:24:29.450"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:29.499" starttime="20190121 10:24:27.181"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_WAKE_BARRIERS}</arg>
<arg>${EEPROM_WAKE_BARRIERS_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:29.517">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F7 00 02</msg>
<status status="PASS" endtime="20190121 10:24:29.518" starttime="20190121 10:24:29.510"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:29.526" starttime="20190121 10:24:29.520"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:29.839">${resp} = 1E 10 54 94 00 0D 00 0B EE 04 FF F7 00 02 00 AA BB 01 43 00 A3 D8</msg>
<status status="PASS" endtime="20190121 10:24:29.839" starttime="20190121 10:24:29.529"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:29.848" starttime="20190121 10:24:29.843"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:29.867">${temp1} = 1E105494000D000BEE04FFF7000200AABB014300A3D8</msg>
<status status="PASS" endtime="20190121 10:24:29.868" starttime="20190121 10:24:29.861"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:29.877">${temp2} = EE04FFF7000200</msg>
<status status="PASS" endtime="20190121 10:24:29.878" starttime="20190121 10:24:29.871"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:29.886" starttime="20190121 10:24:29.881"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:29.888" starttime="20190121 10:24:29.851"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:29.892">${RESP} = 1E 10 54 94 00 0D 00 0B EE 04 FF F7 00 02 00 AA BB 01 43 00 A3 D8</msg>
<status status="PASS" endtime="20190121 10:24:29.893" starttime="20190121 10:24:29.501"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_WAKE_BARRIERS_LEN} ${EEPROM_APP_OK} ${EEPROM_WAKE_BARRIERS_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:29.911">${temp1} = 1E105494000D000BEE04FFF7000200AABB014300A3D8</msg>
<status status="PASS" endtime="20190121 10:24:29.912" starttime="20190121 10:24:29.905"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:29.921">${temp2} = 000200AABB</msg>
<status status="PASS" endtime="20190121 10:24:29.922" starttime="20190121 10:24:29.915"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:29.934" starttime="20190121 10:24:29.925"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:29.936" starttime="20190121 10:24:29.895"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:29.939" starttime="20190121 10:24:25.251"></status>
</kw>
<kw name="TEST_DIAG_CODING">
<doc>Write and read the EEPROM_DIAG_CODING</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_DIAG_CODING</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:29.952" starttime="20190121 10:24:29.947"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_DIAG_CODING}</arg>
<arg>${EEPROM_DIAG_CODING_LEN}</arg>
<arg>${EEPROM_DIAG_CODING_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:29.971">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F6 00 0C 11 15 05 15 01 FF 00 01 7C FF 00 00</msg>
<status status="PASS" endtime="20190121 10:24:29.972" starttime="20190121 10:24:29.964"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:29.988">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F6', '00', '0C', '11', '15', '05', '15', '01', 'FF', '00', '01', '7C', 'FF', '00', '00']</msg>
<status status="PASS" endtime="20190121 10:24:29.989" starttime="20190121 10:24:29.983"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:29.995">Length is 26</msg>
<msg level="INFO" timestamp="20190121 10:24:29.997">${length} = 26</msg>
<status status="PASS" endtime="20190121 10:24:29.998" starttime="20190121 10:24:29.991"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:30.007" starttime="20190121 10:24:30.001"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:30.015">${value} = 20</msg>
<status status="PASS" endtime="20190121 10:24:30.016" starttime="20190121 10:24:30.010"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:30.025">${res} = 14</msg>
<status status="PASS" endtime="20190121 10:24:30.026" starttime="20190121 10:24:30.019"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:30.034" starttime="20190121 10:24:30.029"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:30.044">${res} = 1E54109400140000EE05FFF6000C1115051501FF00017CFF0000</msg>
<status status="PASS" endtime="20190121 10:24:30.045" starttime="20190121 10:24:30.037"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:30.049">${ISI_MSG_NORM} = 1E54109400140000EE05FFF6000C1115051501FF00017CFF0000</msg>
<status status="PASS" endtime="20190121 10:24:30.050" starttime="20190121 10:24:29.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:30.058" starttime="20190121 10:24:30.052"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.119">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F6 00 00 01 44 5A 31</msg>
<status status="PASS" endtime="20190121 10:24:31.121" starttime="20190121 10:24:30.061"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:31.129" starttime="20190121 10:24:31.124"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.148">${temp1} = 1E105494000A000BEE06FFF6000001445A31</msg>
<status status="PASS" endtime="20190121 10:24:31.149" starttime="20190121 10:24:31.142"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.157">${temp2} = EE06FFF600</msg>
<status status="PASS" endtime="20190121 10:24:31.158" starttime="20190121 10:24:31.151"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:31.166" starttime="20190121 10:24:31.161"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:31.169" starttime="20190121 10:24:31.131"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:31.171" starttime="20190121 10:24:29.954"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_DIAG_CODING}</arg>
<arg>${EEPROM_DIAG_CODING_LEN}</arg>
<arg>${EEPROM_DIAG_CODING_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.191">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F6 00 0C 11 15 05 15 01 FF 00 01 7C FF 00 CC</msg>
<status status="PASS" endtime="20190121 10:24:31.192" starttime="20190121 10:24:31.183"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.207">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F6', '00', '0C', '11', '15', '05', '15', '01', 'FF', '00', '01', '7C', 'FF', '00', 'CC']</msg>
<status status="PASS" endtime="20190121 10:24:31.208" starttime="20190121 10:24:31.202"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.217">Length is 26</msg>
<msg level="INFO" timestamp="20190121 10:24:31.219">${length} = 26</msg>
<status status="PASS" endtime="20190121 10:24:31.222" starttime="20190121 10:24:31.211"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:31.234" starttime="20190121 10:24:31.225"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.242">${value} = 20</msg>
<status status="PASS" endtime="20190121 10:24:31.243" starttime="20190121 10:24:31.237"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.252">${res} = 14</msg>
<status status="PASS" endtime="20190121 10:24:31.253" starttime="20190121 10:24:31.246"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:31.261" starttime="20190121 10:24:31.255"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.270">${res} = 1E54109400140000EE05FFF6000C1115051501FF00017CFF00CC</msg>
<status status="PASS" endtime="20190121 10:24:31.271" starttime="20190121 10:24:31.263"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:31.274">${ISI_MSG_NORM} = 1E54109400140000EE05FFF6000C1115051501FF00017CFF00CC</msg>
<status status="PASS" endtime="20190121 10:24:31.275" starttime="20190121 10:24:31.194"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:31.284" starttime="20190121 10:24:31.278"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.595">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F6 00 00 01 45 5A 30</msg>
<status status="PASS" endtime="20190121 10:24:31.596" starttime="20190121 10:24:31.287"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:31.604" starttime="20190121 10:24:31.599"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.623">${temp1} = 1E105494000A000BEE06FFF6000001455A30</msg>
<status status="PASS" endtime="20190121 10:24:31.624" starttime="20190121 10:24:31.617"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:31.632">${temp2} = EE06FFF600</msg>
<status status="PASS" endtime="20190121 10:24:31.633" starttime="20190121 10:24:31.627"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:31.642" starttime="20190121 10:24:31.636"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:31.644" starttime="20190121 10:24:31.607"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:31.646" starttime="20190121 10:24:31.173"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:31.702" starttime="20190121 10:24:31.654"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:31.753" starttime="20190121 10:24:31.706"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:33.761">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:24:33.763" starttime="20190121 10:24:31.756"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:33.812" starttime="20190121 10:24:33.766"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:33.861" starttime="20190121 10:24:33.815"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:33.863" starttime="20190121 10:24:31.648"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_DIAG_CODING}</arg>
<arg>${EEPROM_DIAG_CODING_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:33.883">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F6 00 0C</msg>
<status status="PASS" endtime="20190121 10:24:33.884" starttime="20190121 10:24:33.877"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:33.893" starttime="20190121 10:24:33.887"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.213">${resp} = 1E 10 54 94 00 17 00 0B EE 04 FF F6 00 0C 00 11 15 05 15 01 FF 00 01 7C FF 00 CC 01 43 00 D5 0E</msg>
<status status="PASS" endtime="20190121 10:24:34.214" starttime="20190121 10:24:33.897"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:34.222" starttime="20190121 10:24:34.217"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.241">${temp1} = 1E1054940017000BEE04FFF6000C001115051501FF00017CFF00CC014300D50E</msg>
<status status="PASS" endtime="20190121 10:24:34.242" starttime="20190121 10:24:34.235"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.250">${temp2} = EE04FFF6000C00</msg>
<status status="PASS" endtime="20190121 10:24:34.251" starttime="20190121 10:24:34.245"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:34.260" starttime="20190121 10:24:34.254"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:34.262" starttime="20190121 10:24:34.224"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:34.265">${RESP} = 1E 10 54 94 00 17 00 0B EE 04 FF F6 00 0C 00 11 15 05 15 01 FF 00 01 7C FF 00 CC 01 43 00 D5 0E</msg>
<status status="PASS" endtime="20190121 10:24:34.266" starttime="20190121 10:24:33.866"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_DIAG_CODING_LEN} ${EEPROM_APP_OK} ${EEPROM_DIAG_CODING_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.284">${temp1} = 1E1054940017000BEE04FFF6000C001115051501FF00017CFF00CC014300D50E</msg>
<status status="PASS" endtime="20190121 10:24:34.285" starttime="20190121 10:24:34.278"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.298">${temp2} = 000C001115051501FF00017CFF00CC</msg>
<status status="PASS" endtime="20190121 10:24:34.298" starttime="20190121 10:24:34.288"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:34.307" starttime="20190121 10:24:34.301"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:34.310" starttime="20190121 10:24:34.268"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:34.312" starttime="20190121 10:24:29.941"></status>
</kw>
<kw name="TEST_RESET_BUFFER">
<doc>Write and read the EEPROM_RESET_BUFFER</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_RESET_BUFFER</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:34.325" starttime="20190121 10:24:34.321"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_RESET_BUFFER}</arg>
<arg>${EEPROM_RESET_BUFFER_LEN}</arg>
<arg>${EEPROM_RESET_BUFFER_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.344">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F5 00 42 00000000 00000000 00000000 000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status status="PASS" endtime="20190121 10:24:34.345" starttime="20190121 10:24:34.338"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.360">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F5', '00', '42', '00000000', '00000000', '00000000', '000000000000000000000000060000000000000600000000000006000000000000060000000000...</msg>
<status status="PASS" endtime="20190121 10:24:34.361" starttime="20190121 10:24:34.355"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.368">Length is 18</msg>
<msg level="INFO" timestamp="20190121 10:24:34.370">${length} = 18</msg>
<status status="PASS" endtime="20190121 10:24:34.371" starttime="20190121 10:24:34.364"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:34.379" starttime="20190121 10:24:34.374"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.388">${value} = 12</msg>
<status status="PASS" endtime="20190121 10:24:34.389" starttime="20190121 10:24:34.382"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.397">${res} = 0C</msg>
<status status="PASS" endtime="20190121 10:24:34.398" starttime="20190121 10:24:34.392"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:34.407" starttime="20190121 10:24:34.401"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:34.416">${res} = 1E541094000C0000EE05FFF50042000000000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status status="PASS" endtime="20190121 10:24:34.418" starttime="20190121 10:24:34.410"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:34.422">${ISI_MSG_NORM} = 1E541094000C0000EE05FFF50042000000000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status status="PASS" endtime="20190121 10:24:34.423" starttime="20190121 10:24:34.347"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:34.431" starttime="20190121 10:24:34.425"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.499">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F5 00 00 01 44 5A 32</msg>
<status status="PASS" endtime="20190121 10:24:35.501" starttime="20190121 10:24:34.434"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:35.509" starttime="20190121 10:24:35.504"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.528">${temp1} = 1E105494000A000BEE06FFF5000001445A32</msg>
<status status="PASS" endtime="20190121 10:24:35.529" starttime="20190121 10:24:35.522"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.544">${temp2} = EE06FFF500</msg>
<status status="PASS" endtime="20190121 10:24:35.545" starttime="20190121 10:24:35.537"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:35.553" starttime="20190121 10:24:35.548"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:35.555" starttime="20190121 10:24:35.511"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:35.558" starttime="20190121 10:24:34.328"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_RESET_BUFFER}</arg>
<arg>${EEPROM_RESET_BUFFER_LEN}</arg>
<arg>${EEPROM_RESET_BUFFER_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.577">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F5 00 42 AABB0000 00000000 00000000 000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status status="PASS" endtime="20190121 10:24:35.578" starttime="20190121 10:24:35.570"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.593">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F5', '00', '42', 'AABB0000', '00000000', '00000000', '000000000000000000000000060000000000000600000000000006000000000000060000000000...</msg>
<status status="PASS" endtime="20190121 10:24:35.594" starttime="20190121 10:24:35.588"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.601">Length is 18</msg>
<msg level="INFO" timestamp="20190121 10:24:35.603">${length} = 18</msg>
<status status="PASS" endtime="20190121 10:24:35.604" starttime="20190121 10:24:35.597"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:35.615" starttime="20190121 10:24:35.606"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.624">${value} = 12</msg>
<status status="PASS" endtime="20190121 10:24:35.625" starttime="20190121 10:24:35.618"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.637">${res} = 0C</msg>
<status status="PASS" endtime="20190121 10:24:35.638" starttime="20190121 10:24:35.628"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:35.646" starttime="20190121 10:24:35.640"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.655">${res} = 1E541094000C0000EE05FFF50042AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status status="PASS" endtime="20190121 10:24:35.656" starttime="20190121 10:24:35.648"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:35.659">${ISI_MSG_NORM} = 1E541094000C0000EE05FFF50042AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status status="PASS" endtime="20190121 10:24:35.660" starttime="20190121 10:24:35.580"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:35.669" starttime="20190121 10:24:35.663"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:35.985">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F5 00 00 01 45 5A 33</msg>
<status status="PASS" endtime="20190121 10:24:35.986" starttime="20190121 10:24:35.672"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:35.994" starttime="20190121 10:24:35.989"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:36.014">${temp1} = 1E105494000A000BEE06FFF5000001455A33</msg>
<status status="PASS" endtime="20190121 10:24:36.015" starttime="20190121 10:24:36.008"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:36.023">${temp2} = EE06FFF500</msg>
<status status="PASS" endtime="20190121 10:24:36.024" starttime="20190121 10:24:36.018"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:36.034" starttime="20190121 10:24:36.027"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:36.037" starttime="20190121 10:24:35.996"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:36.041" starttime="20190121 10:24:35.560"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:36.097" starttime="20190121 10:24:36.050"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:36.149" starttime="20190121 10:24:36.099"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:38.162">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:24:38.164" starttime="20190121 10:24:36.153"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:38.286" starttime="20190121 10:24:38.167"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:38.364" starttime="20190121 10:24:38.289"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:38.366" starttime="20190121 10:24:36.044"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_RESET_BUFFER}</arg>
<arg>${EEPROM_RESET_BUFFER_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:38.385">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F5 00 42</msg>
<status status="PASS" endtime="20190121 10:24:38.386" starttime="20190121 10:24:38.377"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:38.410" starttime="20190121 10:24:38.389"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:39.837">${resp} = 1E 10 54 94 00 4D 00 0B EE 04 FF F5 00 42 00 AA BB 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00...</msg>
<status status="PASS" endtime="20190121 10:24:39.838" starttime="20190121 10:24:38.413"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:39.847" starttime="20190121 10:24:39.841"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:39.866">${temp1} = 1E105494004D000BEE04FFF5004200AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000014300A5DC</msg>
<status status="PASS" endtime="20190121 10:24:39.867" starttime="20190121 10:24:39.860"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:39.875">${temp2} = EE04FFF5004200</msg>
<status status="PASS" endtime="20190121 10:24:39.876" starttime="20190121 10:24:39.870"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:39.884" starttime="20190121 10:24:39.879"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:39.887" starttime="20190121 10:24:39.849"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:24:39.890">${RESP} = 1E 10 54 94 00 4D 00 0B EE 04 FF F5 00 42 00 AA BB 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00...</msg>
<status status="PASS" endtime="20190121 10:24:39.891" starttime="20190121 10:24:38.368"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_RESET_BUFFER_LEN} ${EEPROM_APP_OK} ${EEPROM_RESET_BUFFER_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:39.909">${temp1} = 1E105494004D000BEE04FFF5004200AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000014300A5DC</msg>
<status status="PASS" endtime="20190121 10:24:39.910" starttime="20190121 10:24:39.903"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:39.928">${temp2} = 004200AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status status="PASS" endtime="20190121 10:24:39.929" starttime="20190121 10:24:39.913"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:39.938" starttime="20190121 10:24:39.932"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:39.940" starttime="20190121 10:24:39.893"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:39.943" starttime="20190121 10:24:34.314"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<doc>Teardown, Switch power off and close the Serial port, Switch off the CanController</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Teardown call</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:39.958" starttime="20190121 10:24:39.954"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:40.009" starttime="20190121 10:24:39.961"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:40.059" starttime="20190121 10:24:40.013"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:40.127" starttime="20190121 10:24:40.063"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:40.132" starttime="20190121 10:24:39.947"></status>
</kw>
<doc>Implements Test Task SKTB-41553</doc>
<tags>
<tag>EEPROM</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:24:40.134" starttime="20190121 10:24:06.708"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:24:41.648">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:24:41.669">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:24:41.671" starttime="20190121 10:24:40.195"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:41.672" starttime="20190121 10:24:40.156"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:41.692" starttime="20190121 10:24:40.151"></status>
</kw>
<doc>EEPROM write read test</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:24:41.693" starttime="20190121 10:24:03.883"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-56663.robot" name="SKTB-56663" id="s1-s14">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:42.330">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:24:42.339" starttime="20190121 10:24:42.314"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:42.362">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:24:42.364">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:24:44.485">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:24:44.487" starttime="20190121 10:24:42.342"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:44.514" starttime="20190121 10:24:42.309"></status>
</kw>
<test name="SKTB-56663" id="s1-s14-t1">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:44.701" starttime="20190121 10:24:44.573"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:44.785" starttime="20190121 10:24:44.703"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:44.908" starttime="20190121 10:24:44.788"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:46.928">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:24:46.930" starttime="20190121 10:24:44.911"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:46.979" starttime="20190121 10:24:46.933"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:47.030" starttime="20190121 10:24:46.983"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:47.078" starttime="20190121 10:24:47.033"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:47.129" starttime="20190121 10:24:47.082"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:47.183" starttime="20190121 10:24:47.132"></status>
</kw>
<kw name="Fbus Set State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${10000}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:47.312" starttime="20190121 10:24:47.186"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:49.341">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:24:49.344" starttime="20190121 10:24:47.316"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:49.346" starttime="20190121 10:24:44.567"></status>
</kw>
<kw name="Step_1">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_GET_REQ} ${SCA_VOLTAGE_CARBAT}</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:49.604">${resp} = 1E 14 54 8E 00 0A 00 0D 01 02 00 01 2F DE 01 43 65 03</msg>
<status status="PASS" endtime="20190121 10:24:49.605" starttime="20190121 10:24:49.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:49.612">1E 14 54 8E 00 0A 00 0D 01 02 00 01 2F DE 01 43 65 03</msg>
<status status="PASS" endtime="20190121 10:24:49.627" starttime="20190121 10:24:49.608"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_VOLTAGE_GET_RESP} ${SCA_RESULT_OK} ${SCA_VOLTAGE_CARBAT}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:49.649" starttime="20190121 10:24:49.630"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:49.652" starttime="20190121 10:24:49.349"></status>
</kw>
<kw name="Step_2">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_GET_REQ} 00</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:49.934">${resp} = 1E 14 54 8E 00 0A 00 0D 01 02 01 00 FF FF 01 44 B4 24</msg>
<status status="PASS" endtime="20190121 10:24:49.935" starttime="20190121 10:24:49.661"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:49.952">1E 14 54 8E 00 0A 00 0D 01 02 01 00 FF FF 01 44 B4 24</msg>
<status status="PASS" endtime="20190121 10:24:49.963" starttime="20190121 10:24:49.948"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_VOLTAGE_GET_RESP} ${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:49.994" starttime="20190121 10:24:49.966"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:49.997" starttime="20190121 10:24:49.654"></status>
</kw>
<kw name="Step_3">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_REQ} ${SCA_VOLTAGE_CARBAT} ${SCA_THRESHOLD_FALL_BELOW} ${THRESHOLD} ${HYSTERESIS}</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:50.251">${info} = 1E 14 54 8E 00 08 00 0D 01 04 00 01 01 47 4A DD</msg>
<status status="PASS" endtime="20190121 10:24:50.253" starttime="20190121 10:24:50.018"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:50.260">1E 14 54 8E 00 08 00 0D 01 04 00 01 01 47 4A DD</msg>
<status status="PASS" endtime="20190121 10:24:50.263" starttime="20190121 10:24:50.256"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_RESP} ${SCA_RESULT_OK} ${SCA_VOLTAGE_CARBAT}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:50.273" starttime="20190121 10:24:50.266"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:50.275" starttime="20190121 10:24:49.999"></status>
</kw>
<kw name="Step_4">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_REQ} ${SCA_VOLTAGE_CARBAT} ${SCA_THRESHOLD_EXCEED} ${THRESHOLD} ${HYSTERESIS}</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:24:50.493">${info} = 1E 14 54 8E 00 08 00 0D 01 04 00 01 01 40 4A DA</msg>
<status status="PASS" endtime="20190121 10:24:50.494" starttime="20190121 10:24:50.283"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:24:50.501">1E 14 54 8E 00 08 00 0D 01 04 00 01 01 40 4A DA</msg>
<status status="PASS" endtime="20190121 10:24:50.504" starttime="20190121 10:24:50.497"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_RESP} ${SCA_RESULT_OK} ${SCA_VOLTAGE_CARBAT}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:24:50.514" starttime="20190121 10:24:50.507"></status>
</kw>
<status status="PASS" endtime="20190121 10:24:50.516" starttime="20190121 10:24:50.277"></status>
</kw>
<kw name="Step_5">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_REQ} ${SCA_VOLTAGE_CARBAT} ${SCA_THRESHOLD_INVALID} ${THRESHOLD} ${HYSTERESIS}</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:00.682">${info} = </msg>
<status status="PASS" endtime="20190121 10:25:00.683" starttime="20190121 10:24:50.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:00.690"></msg>
<status status="PASS" endtime="20190121 10:25:00.692" starttime="20190121 10:25:00.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_RESP} ${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:25:00.703">'' does not contain '1e 14 54 8e 00 08 00 0d 01 04 01'</msg>
<status status="FAIL" endtime="20190121 10:25:00.705" starttime="20190121 10:25:00.695"></status>
</kw>
<status status="FAIL" endtime="20190121 10:25:00.707" starttime="20190121 10:24:50.518"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:00.766" starttime="20190121 10:25:00.718"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:00.815" starttime="20190121 10:25:00.769"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:00.865" starttime="20190121 10:25:00.818"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:02.872">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:25:02.874" starttime="20190121 10:25:00.868"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:02.925" starttime="20190121 10:25:02.877"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:02.973" starttime="20190121 10:25:02.929"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:02.976" starttime="20190121 10:25:00.711"></status>
</kw>
<doc>Implements SW Test Case SKTB-56663</doc>
<tags>
<tag>FBUS</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20190121 10:25:02.977" starttime="20190121 10:24:44.516">'' does not contain '1e 14 54 8e 00 08 00 0d 01 04 01'</status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:25:04.487">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:25:04.570">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:25:04.572" starttime="20190121 10:25:03.019"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:04.588" starttime="20190121 10:25:02.993"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:04.590" starttime="20190121 10:25:02.988"></status>
</kw>
<doc>Chorus Fbus Testing</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="FAIL" endtime="20190121 10:25:04.591" starttime="20190121 10:24:41.855"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-56067.robot" name="SKTB-56067" id="s1-s15">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:05.190">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:25:05.198" starttime="20190121 10:25:05.170"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:05.227">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:25:05.229">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:25:07.519">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:25:07.521" starttime="20190121 10:25:05.201"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:07.561" starttime="20190121 10:25:05.164"></status>
</kw>
<test name="SKTB-SKTB-56067" id="s1-s15-t1">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:07.731" starttime="20190121 10:25:07.628"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:07.829" starttime="20190121 10:25:07.734"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:07.953" starttime="20190121 10:25:07.831"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:09.961">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:25:09.963" starttime="20190121 10:25:07.956"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:10.013" starttime="20190121 10:25:09.966"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:11.020">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:11.022" starttime="20190121 10:25:10.016"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:11.074" starttime="20190121 10:25:11.025"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:13.082">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:25:13.084" starttime="20190121 10:25:11.077"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:13.133" starttime="20190121 10:25:13.087"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:13.194" starttime="20190121 10:25:13.136"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:13.264" starttime="20190121 10:25:13.199"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:13.315" starttime="20190121 10:25:13.270"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:13.318" starttime="20190121 10:25:07.594"></status>
</kw>
<kw name="TEST_SERIAL_COMMUNICATION">
<doc>Test serial communication and change baudrate</doc>
<kw name="Step_alive">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:13.393">${res_dict} = {'status': True, 'result': '4153', 'data': '', 'request': '41'}</msg>
<status status="PASS" endtime="20190121 10:25:13.394" starttime="20190121 10:25:13.332"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:13.420">${value} = True</msg>
<status status="PASS" endtime="20190121 10:25:13.421" starttime="20190121 10:25:13.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${value}== ${FALSE}</arg>
<arg>change_baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:13.430" starttime="20190121 10:25:13.424"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:14.437">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:14.439" starttime="20190121 10:25:13.433"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:14.441" starttime="20190121 10:25:13.326"></status>
</kw>
<kw name="Step_alive_retry">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:14.509">${res_dict} = {'status': True, 'result': '4153', 'data': '', 'request': '41'}</msg>
<status status="PASS" endtime="20190121 10:25:14.510" starttime="20190121 10:25:14.449"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:14.535">${value} = True</msg>
<status status="PASS" endtime="20190121 10:25:14.535" starttime="20190121 10:25:14.513"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:14.542" starttime="20190121 10:25:14.538"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:15.549">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:15.551" starttime="20190121 10:25:14.545"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:15.554" starttime="20190121 10:25:14.443"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:15.556" starttime="20190121 10:25:13.321"></status>
</kw>
<kw name="POWER_ON_NAD">
<doc>Test the POWER_ON_NAD functionality</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test the POWER_ON_NAD</arg>
<arg>functionality</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:15.568" starttime="20190121 10:25:15.564"></status>
</kw>
<kw name="POWERCYCLE">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:15.623" starttime="20190121 10:25:15.577"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:15.673" starttime="20190121 10:25:15.627"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:15.722" starttime="20190121 10:25:15.676"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:17.733">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:25:17.735" starttime="20190121 10:25:15.726"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:17.826" starttime="20190121 10:25:17.739"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:18.835">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:18.838" starttime="20190121 10:25:17.830"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:18.887" starttime="20190121 10:25:18.840"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:18.890" starttime="20190121 10:25:15.570"></status>
</kw>
<kw name="LOAD_AND_INIT_THE_TESTROUTINE">
<doc>Load the powertestroutine and init it</doc>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${POWER_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:18.916">Starting process:
find /home/debian/chorus_version/TestRoutinePower_OLU_*.bin</msg>
<msg level="INFO" timestamp="20190121 10:25:18.944">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:25:18.959">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:25:18.962">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:25:18.962" starttime="20190121 10:25:18.911"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:18.972">${stdout_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:25:18.973" starttime="20190121 10:25:18.966"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:18.980">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:25:18.982">${temp} = ['/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin']</msg>
<status status="PASS" endtime="20190121 10:25:18.983" starttime="20190121 10:25:18.975"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:18.991">${path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:25:18.991" starttime="20190121 10:25:18.985"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:18.999" starttime="20190121 10:25:18.994"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20190121 10:25:19.007">File '&lt;a href="file:///home/debian/chorus_version/TestRoutinePower_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20190121 10:25:19.009" starttime="20190121 10:25:19.002"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:19.013">${matched_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:25:19.014" starttime="20190121 10:25:18.903"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:19.150">${res_dict} = {'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': '2002e7cf'}</msg>
<status status="PASS" endtime="20190121 10:25:19.151" starttime="20190121 10:25:19.016"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:19.163">{'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': '2002e7cf'}</msg>
<status status="PASS" endtime="20190121 10:25:19.166" starttime="20190121 10:25:19.159"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:21.176">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:25:21.178" starttime="20190121 10:25:19.169"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:21.203">${value} = 5453</msg>
<status status="PASS" endtime="20190121 10:25:21.204" starttime="20190121 10:25:21.181"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:21.213" starttime="20190121 10:25:21.207"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:21.215" starttime="20190121 10:25:18.898"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:21.284">${res_dict} = {'status': True, 'result': '4953', 'data': '', 'request': '49'}</msg>
<status status="PASS" endtime="20190121 10:25:21.285" starttime="20190121 10:25:21.223"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:21.309">${value} = True</msg>
<status status="PASS" endtime="20190121 10:25:21.310" starttime="20190121 10:25:21.288"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:21.317" starttime="20190121 10:25:21.313"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:22.324">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:22.326" starttime="20190121 10:25:21.320"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:22.328" starttime="20190121 10:25:21.217"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:22.402">${res_dict} = {'status': True, 'result': '475653', 'data': '0100', 'request': '4756'}</msg>
<status status="PASS" endtime="20190121 10:25:22.403" starttime="20190121 10:25:22.336"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nVersion: ${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:22.412" starttime="20190121 10:25:22.406"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:23.419">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:23.421" starttime="20190121 10:25:22.415"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:23.423" starttime="20190121 10:25:22.330"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:23.426" starttime="20190121 10:25:18.893"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${PWR_POWERONNAD}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:23.508">${res_dict} = {'status': True, 'result': '520153', 'data': '', 'request': '5201'}</msg>
<status status="PASS" endtime="20190121 10:25:23.510" starttime="20190121 10:25:23.435"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:23.518" starttime="20190121 10:25:23.513"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:23.543">${value} = True</msg>
<status status="PASS" endtime="20190121 10:25:23.544" starttime="20190121 10:25:23.521"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:23.547">${value} = True</msg>
<status status="PASS" endtime="20190121 10:25:23.548" starttime="20190121 10:25:23.428"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:23.555" starttime="20190121 10:25:23.551"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:33.570">Slept 10 seconds</msg>
<status status="PASS" endtime="20190121 10:25:33.572" starttime="20190121 10:25:23.558"></status>
</kw>
<kw name="Measure_Current_kl30">
<assign>
<var>${TIMENOW}</var>
<var>${CURR_VCARBAT}</var>
<var>${CURR_KL30}</var>
</assign>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<assign>
<var>${KLEMME30}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:33.693">${KLEMME30} = [[12225, 129], [12300, 137]]</msg>
<status status="PASS" endtime="20190121 10:25:33.694" starttime="20190121 10:25:33.602"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[0][1])</arg>
</arguments>
<assign>
<var>${CURR_VCARBAT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:33.751">${CURR_VCARBAT} = 129</msg>
<status status="PASS" endtime="20190121 10:25:33.752" starttime="20190121 10:25:33.697"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[1][1])</arg>
</arguments>
<assign>
<var>${CURR_KL30}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:33.797">${CURR_KL30} = 137</msg>
<status status="PASS" endtime="20190121 10:25:33.798" starttime="20190121 10:25:33.755"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>epoch</arg>
</arguments>
<assign>
<var>${TIMENOW}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:33.826">${TIMENOW} = 1548066333</msg>
<status status="PASS" endtime="20190121 10:25:33.827" starttime="20190121 10:25:33.801"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nTime: ${TIMENOW}, Vcarbat current: ${CURR_VCARBAT} ma, Kl30 current: ${CURR_KL30} ma.</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:33.849" starttime="20190121 10:25:33.830"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:33.854">${TIMENOW} = 1548066333</msg>
<msg level="INFO" timestamp="20190121 10:25:33.856">${CURR_VCARBAT} = 129</msg>
<msg level="INFO" timestamp="20190121 10:25:33.857">${CURR_KL30} = 137</msg>
<status status="PASS" endtime="20190121 10:25:33.867" starttime="20190121 10:25:33.575"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should be true</arg>
<arg>${CURR_VCARBAT} &gt; 50</arg>
</arguments>
<assign>
<var>${fbus_resp}</var>
</assign>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${CURR_VCARBAT} &gt; 50</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:33.903" starttime="20190121 10:25:33.876"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:33.938">${fbus_resp} = None</msg>
<status status="PASS" endtime="20190121 10:25:33.939" starttime="20190121 10:25:33.870"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:33.942" starttime="20190121 10:25:15.558"></status>
</kw>
<kw name="SHUTDOWNSYSTEM">
<doc>Test the shutdownsystem functionality</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test the shutdownsystem functionality</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:33.976" starttime="20190121 10:25:33.962"></status>
</kw>
<kw name="POWERCYCLE">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:34.081" starttime="20190121 10:25:33.984"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:34.171" starttime="20190121 10:25:34.084"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:34.227" starttime="20190121 10:25:34.174"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:36.259">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:25:36.261" starttime="20190121 10:25:34.238"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:36.313" starttime="20190121 10:25:36.264"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:37.321">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:37.323" starttime="20190121 10:25:36.316"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:37.372" starttime="20190121 10:25:37.325"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:37.375" starttime="20190121 10:25:33.978"></status>
</kw>
<kw name="LOAD_AND_INIT_THE_TESTROUTINE">
<doc>Load the powertestroutine and init it</doc>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${POWER_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:37.402">Starting process:
find /home/debian/chorus_version/TestRoutinePower_OLU_*.bin</msg>
<msg level="INFO" timestamp="20190121 10:25:37.430">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:25:37.445">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:25:37.448">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:25:37.449" starttime="20190121 10:25:37.396"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:37.458">${stdout_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:25:37.459" starttime="20190121 10:25:37.453"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:37.467">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:25:37.469">${temp} = ['/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin']</msg>
<status status="PASS" endtime="20190121 10:25:37.470" starttime="20190121 10:25:37.462"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:37.477">${path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:25:37.478" starttime="20190121 10:25:37.472"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:37.487" starttime="20190121 10:25:37.481"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20190121 10:25:37.494">File '&lt;a href="file:///home/debian/chorus_version/TestRoutinePower_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20190121 10:25:37.496" starttime="20190121 10:25:37.489"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:37.500">${matched_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:25:37.501" starttime="20190121 10:25:37.389"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:37.643">${res_dict} = {'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': '2002e7cf'}</msg>
<status status="PASS" endtime="20190121 10:25:37.648" starttime="20190121 10:25:37.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:37.660">{'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': '2002e7cf'}</msg>
<status status="PASS" endtime="20190121 10:25:37.663" starttime="20190121 10:25:37.654"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:39.670">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:25:39.673" starttime="20190121 10:25:37.666"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:39.698">${value} = 5453</msg>
<status status="PASS" endtime="20190121 10:25:39.699" starttime="20190121 10:25:39.676"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:39.707" starttime="20190121 10:25:39.702"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:39.710" starttime="20190121 10:25:37.383"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:39.778">${res_dict} = {'status': True, 'result': '4953', 'data': '', 'request': '49'}</msg>
<status status="PASS" endtime="20190121 10:25:39.779" starttime="20190121 10:25:39.718"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:39.804">${value} = True</msg>
<status status="PASS" endtime="20190121 10:25:39.805" starttime="20190121 10:25:39.783"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:39.812" starttime="20190121 10:25:39.808"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:40.819">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:40.822" starttime="20190121 10:25:39.815"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:40.824" starttime="20190121 10:25:39.712"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:40.894">${res_dict} = {'status': True, 'result': '475653', 'data': '0100', 'request': '4756'}</msg>
<status status="PASS" endtime="20190121 10:25:40.895" starttime="20190121 10:25:40.832"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nVersion: ${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:40.905" starttime="20190121 10:25:40.899"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:41.912">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:41.914" starttime="20190121 10:25:40.908"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:41.917" starttime="20190121 10:25:40.826"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:41.919" starttime="20190121 10:25:37.378"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${PWR_SHUTDOWNSYSTEM}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:42.002">${res_dict} = {'status': False, 'result': '520246', 'data': '', 'request': '5202'}</msg>
<status status="PASS" endtime="20190121 10:25:42.003" starttime="20190121 10:25:41.930"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:42.012" starttime="20190121 10:25:42.006"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:42.039">${value} = False</msg>
<status status="PASS" endtime="20190121 10:25:42.040" starttime="20190121 10:25:42.015"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:42.044">${value} = False</msg>
<status status="PASS" endtime="20190121 10:25:42.044" starttime="20190121 10:25:41.922"></status>
</kw>
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:42.051" starttime="20190121 10:25:42.047"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:47.058">Slept 5 seconds</msg>
<status status="PASS" endtime="20190121 10:25:47.061" starttime="20190121 10:25:42.054"></status>
</kw>
<kw name="Measure_Current_kl30">
<assign>
<var>${TIMENOW}</var>
<var>${CURR_VCARBAT}</var>
<var>${CURR_KL30}</var>
</assign>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<assign>
<var>${KLEMME30}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:47.118">${KLEMME30} = [[12250, 78], [12325, 82]]</msg>
<status status="PASS" endtime="20190121 10:25:47.119" starttime="20190121 10:25:47.069"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[0][1])</arg>
</arguments>
<assign>
<var>${CURR_VCARBAT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:47.145">${CURR_VCARBAT} = 78</msg>
<status status="PASS" endtime="20190121 10:25:47.146" starttime="20190121 10:25:47.123"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[1][1])</arg>
</arguments>
<assign>
<var>${CURR_KL30}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:47.171">${CURR_KL30} = 82</msg>
<status status="PASS" endtime="20190121 10:25:47.172" starttime="20190121 10:25:47.149"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>epoch</arg>
</arguments>
<assign>
<var>${TIMENOW}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:47.179">${TIMENOW} = 1548066347</msg>
<status status="PASS" endtime="20190121 10:25:47.180" starttime="20190121 10:25:47.175"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nTime: ${TIMENOW}, Vcarbat current: ${CURR_VCARBAT} ma, Kl30 current: ${CURR_KL30} ma.</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:47.190" starttime="20190121 10:25:47.183"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:47.195">${TIMENOW} = 1548066347</msg>
<msg level="INFO" timestamp="20190121 10:25:47.196">${CURR_VCARBAT} = 78</msg>
<msg level="INFO" timestamp="20190121 10:25:47.197">${CURR_KL30} = 82</msg>
<status status="PASS" endtime="20190121 10:25:47.198" starttime="20190121 10:25:47.063"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should be true</arg>
<arg>${CURR_VCARBAT} &lt; 5</arg>
</arguments>
<assign>
<var>${fbus_resp}</var>
</assign>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${CURR_VCARBAT} &lt; 5</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:25:47.213">'78 &lt; 5' should be true.</msg>
<status status="FAIL" endtime="20190121 10:25:47.214" starttime="20190121 10:25:47.206"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:47.216">${fbus_resp} = None</msg>
<status status="FAIL" endtime="20190121 10:25:47.217" starttime="20190121 10:25:47.201"></status>
</kw>
<status status="FAIL" endtime="20190121 10:25:47.220" starttime="20190121 10:25:33.944"></status>
</kw>
<kw name="MCUSTANDBY">
<doc>Test the mcu stanby functionality</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test the mcu stanby functionality</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:47.233" starttime="20190121 10:25:47.228"></status>
</kw>
<kw name="POWERCYCLE">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:47.288" starttime="20190121 10:25:47.241"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:47.337" starttime="20190121 10:25:47.291"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:47.387" starttime="20190121 10:25:47.340"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:49.395">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:25:49.397" starttime="20190121 10:25:47.390"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:49.447" starttime="20190121 10:25:49.399"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:50.454">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:50.457" starttime="20190121 10:25:49.450"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:50.506" starttime="20190121 10:25:50.459"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:50.510" starttime="20190121 10:25:47.235"></status>
</kw>
<kw name="LOAD_AND_INIT_THE_TESTROUTINE">
<doc>Load the powertestroutine and init it</doc>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${POWER_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:50.537">Starting process:
find /home/debian/chorus_version/TestRoutinePower_OLU_*.bin</msg>
<msg level="INFO" timestamp="20190121 10:25:50.564">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:25:50.589">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:25:50.592">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:25:50.593" starttime="20190121 10:25:50.530"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:50.603">${stdout_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:25:50.604" starttime="20190121 10:25:50.598"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:50.614">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:25:50.616">${temp} = ['/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin']</msg>
<status status="PASS" endtime="20190121 10:25:50.617" starttime="20190121 10:25:50.607"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:50.625">${path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:25:50.626" starttime="20190121 10:25:50.620"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:50.634" starttime="20190121 10:25:50.629"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20190121 10:25:50.641">File '&lt;a href="file:///home/debian/chorus_version/TestRoutinePower_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20190121 10:25:50.643" starttime="20190121 10:25:50.637"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:50.647">${matched_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:25:50.648" starttime="20190121 10:25:50.522"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:50.783">${res_dict} = {'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': '2002e7cf'}</msg>
<status status="PASS" endtime="20190121 10:25:50.783" starttime="20190121 10:25:50.651"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:50.796">{'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': '2002e7cf'}</msg>
<status status="PASS" endtime="20190121 10:25:50.799" starttime="20190121 10:25:50.791"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:52.806">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:25:52.809" starttime="20190121 10:25:50.802"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:52.833">${value} = 5453</msg>
<status status="PASS" endtime="20190121 10:25:52.834" starttime="20190121 10:25:52.811"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:52.843" starttime="20190121 10:25:52.837"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:52.845" starttime="20190121 10:25:50.517"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:52.914">${res_dict} = {'status': True, 'result': '4953', 'data': '', 'request': '49'}</msg>
<status status="PASS" endtime="20190121 10:25:52.915" starttime="20190121 10:25:52.853"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:52.940">${value} = True</msg>
<status status="PASS" endtime="20190121 10:25:52.941" starttime="20190121 10:25:52.919"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:52.948" starttime="20190121 10:25:52.944"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:53.956">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:53.958" starttime="20190121 10:25:52.951"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:53.961" starttime="20190121 10:25:52.847"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:54.034">${res_dict} = {'status': True, 'result': '475653', 'data': '0100', 'request': '4756'}</msg>
<status status="PASS" endtime="20190121 10:25:54.035" starttime="20190121 10:25:53.968"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nVersion: ${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:54.045" starttime="20190121 10:25:54.038"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:25:55.052">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:25:55.054" starttime="20190121 10:25:54.047"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:55.056" starttime="20190121 10:25:53.962"></status>
</kw>
<status status="PASS" endtime="20190121 10:25:55.058" starttime="20190121 10:25:50.512"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${PWR_MCUSTANDBY}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:55.142">${res_dict} = {'status': False, 'result': '520346', 'data': '', 'request': '5203'}</msg>
<status status="PASS" endtime="20190121 10:25:55.142" starttime="20190121 10:25:55.068"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:55.151" starttime="20190121 10:25:55.146"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:25:55.176">${value} = False</msg>
<status status="PASS" endtime="20190121 10:25:55.176" starttime="20190121 10:25:55.154"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:25:55.181">${value} = False</msg>
<status status="PASS" endtime="20190121 10:25:55.182" starttime="20190121 10:25:55.060"></status>
</kw>
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:25:55.189" starttime="20190121 10:25:55.185"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:00.197">Slept 5 seconds</msg>
<status status="PASS" endtime="20190121 10:26:00.199" starttime="20190121 10:25:55.191"></status>
</kw>
<kw name="Measure_Current_kl30">
<assign>
<var>${TIMENOW}</var>
<var>${CURR_VCARBAT}</var>
<var>${CURR_KL30}</var>
</assign>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<assign>
<var>${KLEMME30}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:00.258">${KLEMME30} = [[12250, 78], [12325, 82]]</msg>
<status status="PASS" endtime="20190121 10:26:00.258" starttime="20190121 10:26:00.207"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[0][1])</arg>
</arguments>
<assign>
<var>${CURR_VCARBAT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:00.283">${CURR_VCARBAT} = 78</msg>
<status status="PASS" endtime="20190121 10:26:00.284" starttime="20190121 10:26:00.261"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[1][1])</arg>
</arguments>
<assign>
<var>${CURR_KL30}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:00.308">${CURR_KL30} = 82</msg>
<status status="PASS" endtime="20190121 10:26:00.309" starttime="20190121 10:26:00.286"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>epoch</arg>
</arguments>
<assign>
<var>${TIMENOW}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:00.317">${TIMENOW} = 1548066360</msg>
<status status="PASS" endtime="20190121 10:26:00.317" starttime="20190121 10:26:00.312"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nTime: ${TIMENOW}, Vcarbat current: ${CURR_VCARBAT} ma, Kl30 current: ${CURR_KL30} ma.</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:00.327" starttime="20190121 10:26:00.320"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:26:00.332">${TIMENOW} = 1548066360</msg>
<msg level="INFO" timestamp="20190121 10:26:00.333">${CURR_VCARBAT} = 78</msg>
<msg level="INFO" timestamp="20190121 10:26:00.334">${CURR_KL30} = 82</msg>
<status status="PASS" endtime="20190121 10:26:00.335" starttime="20190121 10:26:00.201"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should be true</arg>
<arg>${CURR_VCARBAT} &lt; 5</arg>
</arguments>
<assign>
<var>${fbus_resp}</var>
</assign>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${CURR_VCARBAT} &lt; 5</arg>
</arguments>
<msg level="FAIL" timestamp="20190121 10:26:00.350">'78 &lt; 5' should be true.</msg>
<status status="FAIL" endtime="20190121 10:26:00.352" starttime="20190121 10:26:00.344"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:26:00.354">${fbus_resp} = None</msg>
<status status="FAIL" endtime="20190121 10:26:00.355" starttime="20190121 10:26:00.338"></status>
</kw>
<status status="FAIL" endtime="20190121 10:26:00.358" starttime="20190121 10:25:47.222"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:00.419" starttime="20190121 10:26:00.369"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:00.469" starttime="20190121 10:26:00.422"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:00.518" starttime="20190121 10:26:00.472"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:01.526">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:26:01.528" starttime="20190121 10:26:00.522"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:01.576" starttime="20190121 10:26:01.531"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:01.579" starttime="20190121 10:26:00.362"></status>
</kw>
<doc>Implements Test Task SKTB-SKTB-56067 Power testroutine</doc>
<tags>
<tag>Power testroutine</tag>
</tags>
<status status="FAIL" critical="yes" endtime="20190121 10:26:01.580" starttime="20190121 10:25:07.563">Several failures occurred:

1) '78 &lt; 5' should be true.

2) '78 &lt; 5' should be true.</status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:26:03.050">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:26:03.072">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:26:03.093" starttime="20190121 10:26:01.620"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:03.095" starttime="20190121 10:26:01.597"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:03.097" starttime="20190121 10:26:01.591"></status>
</kw>
<doc>Power testroutine testcase</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="FAIL" endtime="20190121 10:26:03.098" starttime="20190121 10:25:04.720"></status>
</suite>
<suite source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-56094.robot" name="SKTB-56094" id="s1-s16">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:03.836">Connecting to tnt-server localhost...</msg>
<status status="PASS" endtime="20190121 10:26:03.860" starttime="20190121 10:26:03.825"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:03.869">Using robot-framework-tnt-client v1.3.1</msg>
<msg level="INFO" timestamp="20190121 10:26:03.881">Connecting to server localhost:5554</msg>
<msg level="INFO" timestamp="20190121 10:26:06.002">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status status="PASS" endtime="20190121 10:26:06.033" starttime="20190121 10:26:03.863"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:06.036" starttime="20190121 10:26:03.819"></status>
</kw>
<test name="SKTB-SKTB-56094" id="s1-s16-t1">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:06.175" starttime="20190121 10:26:06.087"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:06.304" starttime="20190121 10:26:06.188"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:06.393" starttime="20190121 10:26:06.307"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:08.401">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:26:08.403" starttime="20190121 10:26:06.396"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:08.453" starttime="20190121 10:26:08.406"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:09.460">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:26:09.463" starttime="20190121 10:26:08.456"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:09.514" starttime="20190121 10:26:09.465"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:11.522">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:26:11.525" starttime="20190121 10:26:09.518"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:11.573" starttime="20190121 10:26:11.527"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:11.622" starttime="20190121 10:26:11.577"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:11.672" starttime="20190121 10:26:11.626"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:11.721" starttime="20190121 10:26:11.675"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:11.724" starttime="20190121 10:26:06.081"></status>
</kw>
<kw name="TEST_SERIAL_COMMUNICATION">
<doc>Test serial communication and change baudrate if necessary</doc>
<kw name="Step_alive">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:11.797">${res_dict} = {'status': True, 'result': '4153', 'data': '', 'request': '41'}</msg>
<status status="PASS" endtime="20190121 10:26:11.798" starttime="20190121 10:26:11.738"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:11.826">${value} = True</msg>
<status status="PASS" endtime="20190121 10:26:11.827" starttime="20190121 10:26:11.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${value}== ${FALSE}</arg>
<arg>change_baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:11.835" starttime="20190121 10:26:11.830"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:12.843">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:26:12.845" starttime="20190121 10:26:11.838"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:12.847" starttime="20190121 10:26:11.732"></status>
</kw>
<kw name="Step_alive_retry">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:12.918">${res_dict} = {'status': True, 'result': '4153', 'data': '', 'request': '41'}</msg>
<status status="PASS" endtime="20190121 10:26:12.918" starttime="20190121 10:26:12.855"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:12.946">${value} = True</msg>
<status status="PASS" endtime="20190121 10:26:12.946" starttime="20190121 10:26:12.922"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:12.953" starttime="20190121 10:26:12.949"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:13.960">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:26:13.962" starttime="20190121 10:26:12.956"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:13.965" starttime="20190121 10:26:12.849"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:13.967" starttime="20190121 10:26:11.727"></status>
</kw>
<kw name="LOAD_AND_INIT_THE_TESTROUTINE">
<doc>Load the rtestroutine and init it</doc>
<kw name="Step_load">
<arguments>
<arg>${VEHICLE_TR_PATH}</arg>
</arguments>
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${TESTROUTINE_FILEPATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:13.997">Starting process:
find /home/debian/chorus_version/TestRoutineVehicleBuses_OLU_*.bin</msg>
<msg level="INFO" timestamp="20190121 10:26:14.026">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:14.042">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:14.045">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:26:14.046" starttime="20190121 10:26:13.989"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:14.055">${stdout_path} = /home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:26:14.056" starttime="20190121 10:26:14.050"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:14.063">1 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:26:14.065">${temp} = ['/home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin']</msg>
<status status="PASS" endtime="20190121 10:26:14.066" starttime="20190121 10:26:14.059"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:14.075">${path} = /home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:26:14.076" starttime="20190121 10:26:14.069"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:14.084" starttime="20190121 10:26:14.079"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" level="INFO" timestamp="20190121 10:26:14.092">File '&lt;a href="file:///home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status status="PASS" endtime="20190121 10:26:14.093" starttime="20190121 10:26:14.087"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:26:14.097">${matched_path} = /home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin</msg>
<status status="PASS" endtime="20190121 10:26:14.098" starttime="20190121 10:26:13.981"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:14.705">${res_dict} = {'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': 'd8dd0dd1'}</msg>
<status status="PASS" endtime="20190121 10:26:14.706" starttime="20190121 10:26:14.101"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:14.723">{'status': True, 'response': 'TS', 'result': '5453', 'flowctrl': '', 'request': '', 'data': 'd8dd0dd1'}</msg>
<status status="PASS" endtime="20190121 10:26:14.730" starttime="20190121 10:26:14.714"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:16.747">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:26:16.749" starttime="20190121 10:26:14.737"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:16.777">${value} = 5453</msg>
<status status="PASS" endtime="20190121 10:26:16.778" starttime="20190121 10:26:16.752"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:16.787" starttime="20190121 10:26:16.780"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:16.790" starttime="20190121 10:26:13.974"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:16.858">${res_dict} = {'status': True, 'result': '4953', 'data': '', 'request': '49'}</msg>
<status status="PASS" endtime="20190121 10:26:16.859" starttime="20190121 10:26:16.798"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:16.912">${value} = True</msg>
<status status="PASS" endtime="20190121 10:26:16.913" starttime="20190121 10:26:16.863"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:16.920" starttime="20190121 10:26:16.915"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:17.928">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:26:17.930" starttime="20190121 10:26:16.923"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:17.932" starttime="20190121 10:26:16.792"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:18.003">${res_dict} = {'status': True, 'result': '475653', 'data': '0101', 'request': '4756'}</msg>
<status status="PASS" endtime="20190121 10:26:18.005" starttime="20190121 10:26:17.940"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nVersion: ${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:18.014" starttime="20190121 10:26:18.008"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:19.021">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:26:19.023" starttime="20190121 10:26:18.016"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:19.025" starttime="20190121 10:26:17.934"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:19.027" starttime="20190121 10:26:13.969"></status>
</kw>
<kw name="CAN_SENDDATA_CAN1_TEST">
<doc>Test can send and receive data can 1</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test can send and receive data can 1</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.041" starttime="20190121 10:26:19.036"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_0}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.060" starttime="20190121 10:26:19.053"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.069">Starting process:
sudo ip link set can0 down</msg>
<msg level="INFO" timestamp="20190121 10:26:19.097">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:19.169">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:19.173">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:26:19.174" starttime="20190121 10:26:19.063"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.186" starttime="20190121 10:26:19.177"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.196">Starting process:
sudo ip link set can0 type can bitrate 250000</msg>
<msg level="INFO" timestamp="20190121 10:26:19.226">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:19.283">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:19.286">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:26:19.287" starttime="20190121 10:26:19.189"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.301" starttime="20190121 10:26:19.291"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.310">Starting process:
sudo ip link set can0 up</msg>
<msg level="INFO" timestamp="20190121 10:26:19.338">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:19.409">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:19.412">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:26:19.413" starttime="20190121 10:26:19.303"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.425" starttime="20190121 10:26:19.417"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:26:19.428" starttime="20190121 10:26:19.043"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${CAN_MSG_ID_RX}:${MASK},${CAN_MSG_ID_TX}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.439">Starting process:
candump -t a can0,767:7FF,768:7FF</msg>
<msg level="INFO" timestamp="20190121 10:26:19.469">${candump_ID} = 192</msg>
<status status="PASS" endtime="20190121 10:26:19.470" starttime="20190121 10:26:19.431"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>cangen ${${CAN_0}} -g ${CYCLE_TIME} -I ${CAN_MSG_ID_TX} -L ${DLC} -D ${CAN_MESSAGE} -n ${MSG_NUMBER}</arg>
<arg>shell=True</arg>
<arg>alias=CANGEN</arg>
</arguments>
<assign>
<var>${cangen_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.503">Starting process:
cangen can0 -g 500 -I 768 -L 8 -D AABBCCDD11223344 -n 3</msg>
<msg level="INFO" timestamp="20190121 10:26:19.533">${cangen_ID} = 193</msg>
<status status="PASS" endtime="20190121 10:26:19.535" starttime="20190121 10:26:19.481"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${CAN_SENDDATA_CAN1}</arg>
<arg>${CAN_MESSAGE}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${data}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setbuffer</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.593">${res_dict} = {'status': True, 'result': '534253', 'data': '', 'request': '53420008aabbccdd11223344'}</msg>
<status status="PASS" endtime="20190121 10:26:19.594" starttime="20190121 10:26:19.555"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.603" starttime="20190121 10:26:19.597"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.631">${value} = True</msg>
<status status="PASS" endtime="20190121 10:26:19.632" starttime="20190121 10:26:19.606"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status setbuffer: ${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.641" starttime="20190121 10:26:19.635"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${FUNC}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.679">${res_dict} = {'status': True, 'result': '520153', 'data': '', 'request': '5201'}</msg>
<status status="PASS" endtime="20190121 10:26:19.680" starttime="20190121 10:26:19.643"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.689" starttime="20190121 10:26:19.684"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.799">${value} = True</msg>
<status status="PASS" endtime="20190121 10:26:19.800" starttime="20190121 10:26:19.692"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status exec: ${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.816" starttime="20190121 10:26:19.809"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>getbuffer</arg>
<arg>some</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.883">${res_dict} = {'status': True, 'result': '474253', 'data': 'aabbccdd11223344', 'request': '4742'}</msg>
<status status="PASS" endtime="20190121 10:26:19.885" starttime="20190121 10:26:19.819"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.893" starttime="20190121 10:26:19.887"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.921">${status} = True</msg>
<status status="PASS" endtime="20190121 10:26:19.922" starttime="20190121 10:26:19.896"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status getbuffer: ${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.930" starttime="20190121 10:26:19.925"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("data")</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.958">${data} = aabbccdd11223344</msg>
<status status="PASS" endtime="20190121 10:26:19.959" starttime="20190121 10:26:19.933"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:26:19.963">${status} = True</msg>
<msg level="INFO" timestamp="20190121 10:26:19.964">${data} = aabbccdd11223344</msg>
<status status="PASS" endtime="20190121 10:26:19.965" starttime="20190121 10:26:19.545"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.972" starttime="20190121 10:26:19.968"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data}</arg>
<arg>${CAN_MESSAGE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:19.982" starttime="20190121 10:26:19.975"></status>
</kw>
<kw name="Check_test_result">
<arguments>
<arg>${CAN_MESSAGE}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=0.5 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:19.996">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:20.500">Process did not complete in 500 milliseconds.</msg>
<msg level="INFO" timestamp="20190121 10:26:20.502">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:26:20.506">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:20.509">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:26:20.509" starttime="20190121 10:26:19.992"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.518">3 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:26:20.520">${temp} = [' (1548066379.542920)  can0  768   [8]  AA BB CC DD 11 22 33 44', ' (1548066379.663999)  can0  767   [8]  AA BB CC DD 11 22 33 44', ' (1548066380.043094)  can0  768   [8]  AA BB CC DD 11 22 33 44']</msg>
<status status="PASS" endtime="20190121 10:26:20.521" starttime="20190121 10:26:20.512"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>withoutfilter</arg>
</arguments>
<assign>
<var>${FILTER}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.527">${FILTER} = ['withoutfilter']</msg>
<status status="PASS" endtime="20190121 10:26:20.528" starttime="20190121 10:26:20.523"></status>
</kw>
<kw name="Set Canid Status And Filter" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>Set  pass and stop ID filter for</doc>
<arguments>
<arg>status</arg>
<arg>${FILTER}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:20.536" starttime="20190121 10:26:20.531"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.544">(1548066379.542920)  can0  768   [8]  AA BB CC DD 11 22 33 44
 (1548066379.663999)  can0  767   [8]  AA BB CC DD 11 22 33 44
 (1548066380.043094)  can0  768   [8]  AA BB CC DD 11 22 33 44</msg>
<msg level="INFO" timestamp="20190121 10:26:20.546">${ret_list} = [{'payload': 'AABBCCDD11223344', 'id': '768', 'timestamp': '1548066379.542920', 'channel': 'can0'}, {'payload': 'AABBCCDD11223344', 'id': '767', 'timestamp': '1548066379.663999', 'channel': 'can0'}, {...</msg>
<status status="PASS" endtime="20190121 10:26:20.547" starttime="20190121 10:26:20.539"></status>
</kw>
<kw name="CHECK_EXISTENS_OF_CAN_MESSAGES_WITH_CANID">
<doc>This keyword Check CAN_Messages if payload with canID exist and return TRUE if exist</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${CAN_MSG_ID_RX}</arg>
<arg>${can_msg}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.563">${RESULT} = False</msg>
<status status="PASS" endtime="20190121 10:26:20.564" starttime="20190121 10:26:20.558"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.571">Length is 3</msg>
<msg level="INFO" timestamp="20190121 10:26:20.573">${count} = 3</msg>
<status status="PASS" endtime="20190121 10:26:20.574" starttime="20190121 10:26:20.567"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:20.582" starttime="20190121 10:26:20.576"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.590">${msgcount} = 0</msg>
<status status="PASS" endtime="20190121 10:26:20.590" starttime="20190121 10:26:20.585"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'payload': 'AABBCCDD11223344', 'id': '768', 'timestamp': '1548066379.542920', 'channel': 'can0'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.603">${payload} = AABBCCDD11223344</msg>
<status status="PASS" endtime="20190121 10:26:20.604" starttime="20190121 10:26:20.598"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${can_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.615">${can_id} = 768</msg>
<status status="PASS" endtime="20190121 10:26:20.616" starttime="20190121 10:26:20.607"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_msg}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.626">${count_msg} = 1</msg>
<status status="PASS" endtime="20190121 10:26:20.627" starttime="20190121 10:26:20.619"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${can_id}' == '${expected_canid}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.638">${count_id} = 0</msg>
<status status="PASS" endtime="20190121 10:26:20.639" starttime="20190121 10:26:20.630"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${count_msg} + ${count_id}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.648">${msgcount} = 1</msg>
<status status="PASS" endtime="20190121 10:26:20.649" starttime="20190121 10:26:20.642"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.659">${RESULT} = False</msg>
<status status="PASS" endtime="20190121 10:26:20.660" starttime="20190121 10:26:20.652"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:20.669" starttime="20190121 10:26:20.662"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:20.670" starttime="20190121 10:26:20.595"></status>
</kw>
<kw name="${item_dict} = {'payload': 'AABBCCDD11223344', 'id': '767', 'timestamp': '1548066379.663999', 'channel': 'can0'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.680">${payload} = AABBCCDD11223344</msg>
<status status="PASS" endtime="20190121 10:26:20.681" starttime="20190121 10:26:20.675"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${can_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.689">${can_id} = 767</msg>
<status status="PASS" endtime="20190121 10:26:20.690" starttime="20190121 10:26:20.684"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_msg}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.700">${count_msg} = 1</msg>
<status status="PASS" endtime="20190121 10:26:20.701" starttime="20190121 10:26:20.693"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${can_id}' == '${expected_canid}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.711">${count_id} = 1</msg>
<status status="PASS" endtime="20190121 10:26:20.712" starttime="20190121 10:26:20.704"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${count_msg} + ${count_id}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.725">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:26:20.726" starttime="20190121 10:26:20.718"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:20.735">${RESULT} = True</msg>
<status status="PASS" endtime="20190121 10:26:20.736" starttime="20190121 10:26:20.728"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:20.747">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190121 10:26:20.750" starttime="20190121 10:26:20.741"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:20.751" starttime="20190121 10:26:20.671"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:20.751" starttime="20190121 10:26:20.592"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:26:20.755">${res} = True</msg>
<status status="PASS" endtime="20190121 10:26:20.756" starttime="20190121 10:26:20.549"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Liste: ${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:20.764" starttime="20190121 10:26:20.759"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:26:20.768">${res} = True</msg>
<status status="PASS" endtime="20190121 10:26:20.769" starttime="20190121 10:26:19.984"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:20.776" starttime="20190121 10:26:20.772"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:20.778" starttime="20190121 10:26:19.029"></status>
</kw>
<kw name="CAN_SENDDATA_CAN3_TEST">
<doc>Test can send and receive data can 2</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test can send and receive data can 2</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:20.791" starttime="20190121 10:26:20.786"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 seconds</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:22.798">Slept 2 seconds</msg>
<status status="PASS" endtime="20190121 10:26:22.801" starttime="20190121 10:26:20.793"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_2}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:22.822" starttime="20190121 10:26:22.814"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:22.831">Starting process:
sudo ip link set can2 down</msg>
<msg level="INFO" timestamp="20190121 10:26:22.859">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:22.932">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:22.935">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:26:22.936" starttime="20190121 10:26:22.825"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:22.948" starttime="20190121 10:26:22.940"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:22.958">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg level="INFO" timestamp="20190121 10:26:22.986">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:23.042">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:23.046">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:26:23.047" starttime="20190121 10:26:22.951"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.059" starttime="20190121 10:26:23.050"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.069">Starting process:
sudo ip link set can2 up</msg>
<msg level="INFO" timestamp="20190121 10:26:23.097">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:23.182">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:23.185">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" endtime="20190121 10:26:23.186" starttime="20190121 10:26:23.062"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.198" starttime="20190121 10:26:23.189"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status status="PASS" endtime="20190121 10:26:23.201" starttime="20190121 10:26:22.804"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_2},${CAN_MSG_ID_RX}:${MASK},${CAN_MSG_ID_TX}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.213">Starting process:
candump -t a can2,767:7FF,768:7FF</msg>
<msg level="INFO" timestamp="20190121 10:26:23.243">${candump_ID} = 197</msg>
<status status="PASS" endtime="20190121 10:26:23.248" starttime="20190121 10:26:23.205"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>cangen ${${CAN_2}} -g ${CYCLE_TIME} -I ${CAN_MSG_ID_TX} -L ${DLC} -D ${CAN_MESSAGE} -n ${MSG_NUMBER}</arg>
<arg>shell=True</arg>
<arg>alias=CANGEN</arg>
</arguments>
<assign>
<var>${cangen_ID}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.275">Starting process:
cangen can2 -g 500 -I 768 -L 8 -D AABBCCDD11223344 -n 3</msg>
<msg level="INFO" timestamp="20190121 10:26:23.306">${cangen_ID} = 198</msg>
<status status="PASS" endtime="20190121 10:26:23.307" starttime="20190121 10:26:23.252"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${CAN_SENDDATA_CAN3}</arg>
<arg>${CAN_MESSAGE}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${data}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setbuffer</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.404">${res_dict} = {'status': False, 'result': '1efd54', 'data': '', 'request': '53420008aabbccdd11223344'}</msg>
<status status="PASS" endtime="20190121 10:26:23.405" starttime="20190121 10:26:23.328"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.418" starttime="20190121 10:26:23.409"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.446">${value} = False</msg>
<status status="PASS" endtime="20190121 10:26:23.447" starttime="20190121 10:26:23.421"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status setbuffer: ${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.457" starttime="20190121 10:26:23.450"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${FUNC}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.533">${res_dict} = {'status': True, 'result': '520353', 'data': '', 'request': '5203'}</msg>
<status status="PASS" endtime="20190121 10:26:23.534" starttime="20190121 10:26:23.462"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.542" starttime="20190121 10:26:23.537"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.572">${value} = True</msg>
<status status="PASS" endtime="20190121 10:26:23.573" starttime="20190121 10:26:23.545"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status exec: ${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.582" starttime="20190121 10:26:23.576"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>getbuffer</arg>
<arg>some</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.649">${res_dict} = {'status': True, 'result': '474253', 'data': 'aabbccdd11223344', 'request': '4742'}</msg>
<status status="PASS" endtime="20190121 10:26:23.650" starttime="20190121 10:26:23.584"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.658" starttime="20190121 10:26:23.653"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.690">${status} = True</msg>
<status status="PASS" endtime="20190121 10:26:23.690" starttime="20190121 10:26:23.661"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status getbuffer: ${value}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.699" starttime="20190121 10:26:23.693"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("data")</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.727">${data} = aabbccdd11223344</msg>
<status status="PASS" endtime="20190121 10:26:23.728" starttime="20190121 10:26:23.702"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:26:23.732">${status} = True</msg>
<msg level="INFO" timestamp="20190121 10:26:23.733">${data} = aabbccdd11223344</msg>
<status status="PASS" endtime="20190121 10:26:23.734" starttime="20190121 10:26:23.318"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.744" starttime="20190121 10:26:23.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data}</arg>
<arg>${CAN_MESSAGE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:23.753" starttime="20190121 10:26:23.747"></status>
</kw>
<kw name="Check_test_result">
<arguments>
<arg>${CAN_MESSAGE}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=0.5 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:23.769">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:24.273">Process did not complete in 500 milliseconds.</msg>
<msg level="INFO" timestamp="20190121 10:26:24.274">Gracefully terminating process.</msg>
<msg level="INFO" timestamp="20190121 10:26:24.279">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:24.282">${candump} = &lt;result object with rc -15&gt;</msg>
<status status="PASS" endtime="20190121 10:26:24.282" starttime="20190121 10:26:23.765"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.290">3 lines returned</msg>
<msg level="INFO" timestamp="20190121 10:26:24.293">${temp} = [' (1548066383.315580)  can2  768   [8]  AA BB CC DD 11 22 33 44', ' (1548066383.502885)  can2  767   [8]  AA BB CC DD 11 22 33 44', ' (1548066383.820873)  can2  768   [8]  AA BB CC DD 11 22 33 44']</msg>
<status status="PASS" endtime="20190121 10:26:24.293" starttime="20190121 10:26:24.285"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>withoutfilter</arg>
</arguments>
<assign>
<var>${FILTER}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.302">${FILTER} = ['withoutfilter']</msg>
<status status="PASS" endtime="20190121 10:26:24.303" starttime="20190121 10:26:24.296"></status>
</kw>
<kw name="Set Canid Status And Filter" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>Set  pass and stop ID filter for</doc>
<arguments>
<arg>status</arg>
<arg>${FILTER}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:24.310" starttime="20190121 10:26:24.306"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.318">(1548066383.315580)  can2  768   [8]  AA BB CC DD 11 22 33 44
 (1548066383.502885)  can2  767   [8]  AA BB CC DD 11 22 33 44
 (1548066383.820873)  can2  768   [8]  AA BB CC DD 11 22 33 44</msg>
<msg level="INFO" timestamp="20190121 10:26:24.321">${ret_list} = [{'payload': 'AABBCCDD11223344', 'id': '768', 'timestamp': '1548066383.315580', 'channel': 'can2'}, {'payload': 'AABBCCDD11223344', 'id': '767', 'timestamp': '1548066383.502885', 'channel': 'can2'}, {...</msg>
<status status="PASS" endtime="20190121 10:26:24.322" starttime="20190121 10:26:24.313"></status>
</kw>
<kw name="CHECK_EXISTENS_OF_CAN_MESSAGES_WITH_CANID">
<doc>This keyword Check CAN_Messages if payload with canID exist and return TRUE if exist</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${CAN_MSG_ID_RX}</arg>
<arg>${can_msg}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.339">${RESULT} = False</msg>
<status status="PASS" endtime="20190121 10:26:24.339" starttime="20190121 10:26:24.334"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.346">Length is 3</msg>
<msg level="INFO" timestamp="20190121 10:26:24.348">${count} = 3</msg>
<status status="PASS" endtime="20190121 10:26:24.349" starttime="20190121 10:26:24.342"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:24.357" starttime="20190121 10:26:24.352"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.365">${msgcount} = 0</msg>
<status status="PASS" endtime="20190121 10:26:24.365" starttime="20190121 10:26:24.360"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'payload': 'AABBCCDD11223344', 'id': '768', 'timestamp': '1548066383.315580', 'channel': 'can2'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.378">${payload} = AABBCCDD11223344</msg>
<status status="PASS" endtime="20190121 10:26:24.379" starttime="20190121 10:26:24.373"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${can_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.386">${can_id} = 768</msg>
<status status="PASS" endtime="20190121 10:26:24.387" starttime="20190121 10:26:24.381"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_msg}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.398">${count_msg} = 1</msg>
<status status="PASS" endtime="20190121 10:26:24.399" starttime="20190121 10:26:24.390"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${can_id}' == '${expected_canid}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.410">${count_id} = 0</msg>
<status status="PASS" endtime="20190121 10:26:24.410" starttime="20190121 10:26:24.402"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${count_msg} + ${count_id}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.419">${msgcount} = 1</msg>
<status status="PASS" endtime="20190121 10:26:24.420" starttime="20190121 10:26:24.413"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.430">${RESULT} = False</msg>
<status status="PASS" endtime="20190121 10:26:24.431" starttime="20190121 10:26:24.423"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:24.444" starttime="20190121 10:26:24.434"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:24.445" starttime="20190121 10:26:24.370"></status>
</kw>
<kw name="${item_dict} = {'payload': 'AABBCCDD11223344', 'id': '767', 'timestamp': '1548066383.502885', 'channel': 'can2'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.454">${payload} = AABBCCDD11223344</msg>
<status status="PASS" endtime="20190121 10:26:24.455" starttime="20190121 10:26:24.449"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${can_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.462">${can_id} = 767</msg>
<status status="PASS" endtime="20190121 10:26:24.463" starttime="20190121 10:26:24.458"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_msg}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.473">${count_msg} = 1</msg>
<status status="PASS" endtime="20190121 10:26:24.474" starttime="20190121 10:26:24.466"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${can_id}' == '${expected_canid}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_id}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.484">${count_id} = 1</msg>
<status status="PASS" endtime="20190121 10:26:24.485" starttime="20190121 10:26:24.477"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${count_msg} + ${count_id}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.502">${msgcount} = 2</msg>
<status status="PASS" endtime="20190121 10:26:24.503" starttime="20190121 10:26:24.488"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:24.513">${RESULT} = True</msg>
<status status="PASS" endtime="20190121 10:26:24.514" starttime="20190121 10:26:24.506"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:24.523">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190121 10:26:24.525" starttime="20190121 10:26:24.517"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:24.526" starttime="20190121 10:26:24.446"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:24.527" starttime="20190121 10:26:24.367"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:26:24.530">${res} = True</msg>
<status status="PASS" endtime="20190121 10:26:24.531" starttime="20190121 10:26:24.324"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Liste: ${ret_list}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:24.539" starttime="20190121 10:26:24.534"></status>
</kw>
<msg level="INFO" timestamp="20190121 10:26:24.543">${res} = True</msg>
<status status="PASS" endtime="20190121 10:26:24.544" starttime="20190121 10:26:23.755"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:24.551" starttime="20190121 10:26:24.547"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:24.553" starttime="20190121 10:26:20.780"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:24.610" starttime="20190121 10:26:24.563"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:24.659" starttime="20190121 10:26:24.613"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:24.710" starttime="20190121 10:26:24.663"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg level="INFO" timestamp="20190121 10:26:25.725">Slept 1 second</msg>
<status status="PASS" endtime="20190121 10:26:25.727" starttime="20190121 10:26:24.713"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status status="PASS" endtime="20190121 10:26:25.825" starttime="20190121 10:26:25.734"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>pkill candump</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${rm_res}</var>
</assign>
<msg level="INFO" timestamp="20190121 10:26:25.858">Starting process:
pkill candump</msg>
<msg level="INFO" timestamp="20190121 10:26:25.918">Waiting for process to complete.</msg>
<msg level="INFO" timestamp="20190121 10:26:25.983">Process completed.</msg>
<msg level="INFO" timestamp="20190121 10:26:25.986">${rm_res} = &lt;result object with rc 1&gt;</msg>
<status status="PASS" endtime="20190121 10:26:25.987" starttime="20190121 10:26:25.828"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:25.990" starttime="20190121 10:26:24.557"></status>
</kw>
<doc>Implements Test Task SKTB-56094 Vehicle buses testroutine</doc>
<tags>
<tag>Vehicle buses testroutine</tag>
</tags>
<status status="PASS" critical="yes" endtime="20190121 10:26:25.991" starttime="20190121 10:26:06.038"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg level="INFO" timestamp="20190121 10:26:27.734">Disconnecting from server, keeping session: False</msg>
<msg level="INFO" timestamp="20190121 10:26:27.812">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status status="PASS" endtime="20190121 10:26:27.819" starttime="20190121 10:26:26.187"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:27.821" starttime="20190121 10:26:26.040"></status>
</kw>
<status status="PASS" endtime="20190121 10:26:27.858" starttime="20190121 10:26:26.012"></status>
</kw>
<doc>Vehicle buses testroutine</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status status="PASS" endtime="20190121 10:26:27.859" starttime="20190121 10:26:03.277"></status>
</suite>
<status status="FAIL" endtime="20190121 10:26:28.258" starttime="20190121 10:16:37.264"></status>
</suite>
<statistics>
<total>
<stat pass="11" fail="5">Critical Tests</stat>
<stat pass="11" fail="5">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">CAN 1 diagnose test</stat>
<stat pass="1" fail="0">CAN 3 test</stat>
<stat pass="1" fail="0">CAN 3 test TX</stat>
<stat pass="1" fail="0">EEPROM</stat>
<stat pass="3" fail="1">FBUS</stat>
<stat pass="1" fail="0">Flashing</stat>
<stat pass="0" fail="2">GpioAdc testroutine</stat>
<stat pass="2" fail="1">GPIO Test</stat>
<stat pass="0" fail="1">Power testroutine</stat>
<stat pass="1" fail="0">Vehicle buses testroutine</stat>
</tag>
<suite>
<stat pass="11" name="Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094" fail="5" id="s1">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094</stat>
<stat pass="1" name="Update-Nad" fail="0" id="s1-s1">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.Update-Nad</stat>
<stat pass="1" name="CI update chorus" fail="0" id="s1-s2">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.CI update chorus</stat>
<stat pass="0" name="SKTB-31405" fail="1" id="s1-s3">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-31405</stat>
<stat pass="0" name="SKTB-33244" fail="1" id="s1-s4">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-33244</stat>
<stat pass="1" name="SKTB-13351" fail="0" id="s1-s5">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-13351</stat>
<stat pass="1" name="SKTB-34994" fail="0" id="s1-s6">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-34994</stat>
<stat pass="1" name="SKTB-41635" fail="0" id="s1-s7">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-41635</stat>
<stat pass="1" name="SKTB-46886" fail="0" id="s1-s8">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-46886</stat>
<stat pass="1" name="SKTB-47669" fail="0" id="s1-s9">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-47669</stat>
<stat pass="1" name="SKTB-48413" fail="0" id="s1-s10">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-48413</stat>
<stat pass="0" name="SKTB-49038" fail="1" id="s1-s11">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-49038</stat>
<stat pass="1" name="SKTB-49357" fail="0" id="s1-s12">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-49357</stat>
<stat pass="1" name="SKTB-41553" fail="0" id="s1-s13">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-41553</stat>
<stat pass="0" name="SKTB-56663" fail="1" id="s1-s14">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-56663</stat>
<stat pass="0" name="SKTB-56067" fail="1" id="s1-s15">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-56067</stat>
<stat pass="1" name="SKTB-56094" fail="0" id="s1-s16">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-56094</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
