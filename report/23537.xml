<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190121 15:22:51.453" generator="Robot 3.0.2 (Python 3.5.3 on linux)">
<suite id="s1" name="Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094">
<suite id="s1-s1" source="/usr/share/robot-framework-scripts/robot-framework-chorus/update-nad.robot" name="Update-Nad">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:22:56.955" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:22:56.957" status="PASS" starttime="20190121 15:22:56.950"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:22:56.969" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:22:56.970" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:22:59.011" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:22:59.013" status="PASS" starttime="20190121 15:22:56.960"></status>
</kw>
<status endtime="20190121 15:22:59.015" status="PASS" starttime="20190121 15:22:56.944"></status>
</kw>
<test id="s1-s1-t1" name="SKTB-13351 FBUS test">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:22:59.095" status="PASS" starttime="20190121 15:22:59.039"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:22:59.145" status="PASS" starttime="20190121 15:22:59.098"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:22:59.195" status="PASS" starttime="20190121 15:22:59.148"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:23:01.203" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:23:01.205" status="PASS" starttime="20190121 15:22:59.198"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:23:01.255" status="PASS" starttime="20190121 15:23:01.207"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:23:01.305" status="PASS" starttime="20190121 15:23:01.258"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>45s</arg>
</arguments>
<msg timestamp="20190121 15:23:46.312" level="INFO">Slept 45 seconds</msg>
<status endtime="20190121 15:23:46.314" status="PASS" starttime="20190121 15:23:01.308"></status>
</kw>
<status endtime="20190121 15:23:46.317" status="PASS" starttime="20190121 15:22:59.034"></status>
</kw>
<kw name="Step_1">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get update'</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:23:46.330" level="INFO">Starting process:
ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get update'</msg>
<msg timestamp="20190121 15:23:46.355" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:23:52.077" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:23:52.080" level="INFO">${info} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:23:52.081" status="PASS" starttime="20190121 15:23:46.326"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info.stdout}</arg>
</arguments>
<status endtime="20190121 15:23:52.092" status="PASS" starttime="20190121 15:23:52.085"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get upgrade -y'</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:23:52.100" level="INFO">Starting process:
ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get upgrade -y'</msg>
<msg timestamp="20190121 15:23:52.123" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:23:53.173" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:23:53.176" level="INFO">${info} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:23:53.177" status="PASS" starttime="20190121 15:23:52.095"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info.stdout}</arg>
</arguments>
<status endtime="20190121 15:23:53.188" status="PASS" starttime="20190121 15:23:53.181"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get install -y can-utils'</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:23:53.195" level="INFO">Starting process:
ssh -i ~/.ssh/id_rsa_tnt_max root@192.168.1.101 'apt-get install -y can-utils'</msg>
<msg timestamp="20190121 15:23:53.219" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:23:54.035" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:23:54.038" level="INFO">${info} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:23:54.039" status="PASS" starttime="20190121 15:23:53.191"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info.stdout}</arg>
</arguments>
<status endtime="20190121 15:23:54.052" status="PASS" starttime="20190121 15:23:54.044"></status>
</kw>
<status endtime="20190121 15:23:54.054" status="PASS" starttime="20190121 15:23:46.319"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:23:54.116" status="PASS" starttime="20190121 15:23:54.066"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:23:54.166" status="PASS" starttime="20190121 15:23:54.119"></status>
</kw>
<status endtime="20190121 15:23:54.168" status="PASS" starttime="20190121 15:23:54.058"></status>
</kw>
<doc>Implements Test Task SKTB-update-nad</doc>
<tags>
<tag>FBUS</tag>
</tags>
<status critical="yes" endtime="20190121 15:23:54.170" status="PASS" starttime="20190121 15:22:59.017"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:23:55.812" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:23:55.856" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:23:55.857" status="PASS" starttime="20190121 15:23:54.260"></status>
</kw>
<status endtime="20190121 15:23:55.864" status="PASS" starttime="20190121 15:23:54.186"></status>
</kw>
<status endtime="20190121 15:23:55.867" status="PASS" starttime="20190121 15:23:54.180"></status>
</kw>
<doc>Chorus Fbus Testing</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:23:55.868" status="PASS" starttime="20190121 15:22:51.907"></status>
</suite>
<suite id="s1-s2" source="/usr/share/robot-framework-scripts/robot-framework-chorus/CI_update_chorus.robot" name="CI update chorus">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:23:56.398" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:23:56.415" status="PASS" starttime="20190121 15:23:56.376"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:23:56.428" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:23:56.430" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:23:58.626" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:23:58.627" status="PASS" starttime="20190121 15:23:56.418"></status>
</kw>
<status endtime="20190121 15:23:58.637" status="PASS" starttime="20190121 15:23:56.360"></status>
</kw>
<test id="s1-s2-t1" name="Ci_update_chorus Chorus SW Flashing">
<kw name="Test_precondition" type="setup">
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:23:58.802" status="PASS" starttime="20190121 15:23:58.706"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:23:58.914" status="PASS" starttime="20190121 15:23:58.805"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:23:59.117" status="PASS" starttime="20190121 15:23:58.917"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:24:01.142" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:24:01.144" status="PASS" starttime="20190121 15:23:59.120"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:24:01.191" status="PASS" starttime="20190121 15:24:01.147"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${250000}</arg>
</arguments>
<status endtime="20190121 15:24:01.240" status="PASS" starttime="20190121 15:24:01.195"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:24:01.291" status="PASS" starttime="20190121 15:24:01.244"></status>
</kw>
<status endtime="20190121 15:24:01.294" status="PASS" starttime="20190121 15:23:58.672"></status>
</kw>
<kw name="Step_1">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:24:03.306" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:24:03.309" status="PASS" starttime="20190121 15:24:01.302"></status>
</kw>
<kw name="Chorus Flash Release" library="robot_framework_tnt.Client">
<arguments>
<arg>${FD_PATH}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20190121 15:25:28.761" level="INFO">${RESULT} = Flashing sucessfully finished.</msg>
<status endtime="20190121 15:25:28.762" status="PASS" starttime="20190121 15:24:03.312"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${RESULT}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:25:28.769" level="INFO">Flashing sucessfully finished.</msg>
<status endtime="20190121 15:25:28.772" status="PASS" starttime="20190121 15:25:28.765"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${RESULT}</arg>
<arg>sucessfully</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:25:28.779" status="PASS" starttime="20190121 15:25:28.775"></status>
</kw>
<status endtime="20190121 15:25:28.782" status="PASS" starttime="20190121 15:24:01.296"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:25:28.838" status="PASS" starttime="20190121 15:25:28.791"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:25:28.887" status="PASS" starttime="20190121 15:25:28.842"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:28.937" status="PASS" starttime="20190121 15:25:28.890"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:29.002" status="PASS" starttime="20190121 15:25:28.940"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:29.081" status="PASS" starttime="20190121 15:25:29.013"></status>
</kw>
<status endtime="20190121 15:25:29.083" status="PASS" starttime="20190121 15:25:28.785"></status>
</kw>
<doc>Implements Test Task Ci_update_chorus</doc>
<tags>
<tag>Flashing</tag>
</tags>
<status critical="yes" endtime="20190121 15:25:29.089" status="PASS" starttime="20190121 15:23:58.639"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:25:30.659" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:25:30.684" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:25:30.705" status="PASS" starttime="20190121 15:25:29.133"></status>
</kw>
<status endtime="20190121 15:25:30.707" status="PASS" starttime="20190121 15:25:29.111"></status>
</kw>
<status endtime="20190121 15:25:30.709" status="PASS" starttime="20190121 15:25:29.105"></status>
</kw>
<doc>Serial flashing test fof CI</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:25:30.710" status="PASS" starttime="20190121 15:23:55.960"></status>
</suite>
<suite id="s1-s3" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-31405.robot" name="SKTB-31405">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:25:31.378" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:25:31.391" status="PASS" starttime="20190121 15:25:31.359"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:25:31.401" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:25:31.423" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:25:33.630" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:25:33.631" status="PASS" starttime="20190121 15:25:31.394"></status>
</kw>
<status endtime="20190121 15:25:33.634" status="PASS" starttime="20190121 15:25:31.353"></status>
</kw>
<test id="s1-s3-t1" name="SKTB-31405 GpioAdc testroutine">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:33.872" status="PASS" starttime="20190121 15:25:33.701"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:34.025" status="PASS" starttime="20190121 15:25:33.875"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:34.103" status="PASS" starttime="20190121 15:25:34.028"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:25:36.125" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:25:36.127" status="PASS" starttime="20190121 15:25:34.106"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:25:36.177" status="PASS" starttime="20190121 15:25:36.130"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:25:37.184" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:25:37.186" status="PASS" starttime="20190121 15:25:36.180"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:25:37.236" status="PASS" starttime="20190121 15:25:37.189"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:25:39.244" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:25:39.246" status="PASS" starttime="20190121 15:25:37.239"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:25:39.293" status="PASS" starttime="20190121 15:25:39.249"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:25:39.342" status="PASS" starttime="20190121 15:25:39.296"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:25:39.391" status="PASS" starttime="20190121 15:25:39.345"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:25:39.440" status="PASS" starttime="20190121 15:25:39.394"></status>
</kw>
<status endtime="20190121 15:25:39.443" status="PASS" starttime="20190121 15:25:33.670"></status>
</kw>
<kw name="Step_alive">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:39.511" level="INFO">${res_dict} = {'result': '4153', 'request': '41', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:25:39.512" status="PASS" starttime="20190121 15:25:39.451"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:25:39.539" level="INFO">${value} = True</msg>
<status endtime="20190121 15:25:39.540" status="PASS" starttime="20190121 15:25:39.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${value}== ${FALSE}</arg>
<arg>change_baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:25:39.549" status="PASS" starttime="20190121 15:25:39.543"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:25:40.558" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:25:40.560" status="PASS" starttime="20190121 15:25:39.552"></status>
</kw>
<status endtime="20190121 15:25:40.563" status="PASS" starttime="20190121 15:25:39.445"></status>
</kw>
<kw name="Step_alive_retry">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:40.644" level="INFO">${res_dict} = {'result': '4153', 'request': '41', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:25:40.645" status="PASS" starttime="20190121 15:25:40.584"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:25:40.672" level="INFO">${value} = True</msg>
<status endtime="20190121 15:25:40.673" status="PASS" starttime="20190121 15:25:40.648"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:25:40.680" status="PASS" starttime="20190121 15:25:40.676"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:25:41.687" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:25:41.689" status="PASS" starttime="20190121 15:25:40.682"></status>
</kw>
<status endtime="20190121 15:25:41.691" status="PASS" starttime="20190121 15:25:40.565"></status>
</kw>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${ADC_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg timestamp="20190121 15:25:41.711" level="INFO">Starting process:
find /home/debian/chorus_version/TestRoutineGpioAdc_OLU_*.bin</msg>
<msg timestamp="20190121 15:25:41.736" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:25:41.751" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:25:41.754" level="INFO">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:25:41.754" status="PASS" starttime="20190121 15:25:41.706"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg timestamp="20190121 15:25:41.764" level="INFO">${stdout_path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status endtime="20190121 15:25:41.765" status="PASS" starttime="20190121 15:25:41.758"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:25:41.773" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:25:41.775" level="INFO">${temp} = ['/home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin']</msg>
<status endtime="20190121 15:25:41.776" status="PASS" starttime="20190121 15:25:41.768"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20190121 15:25:41.784" level="INFO">${path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status endtime="20190121 15:25:41.785" status="PASS" starttime="20190121 15:25:41.779"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status endtime="20190121 15:25:41.795" status="PASS" starttime="20190121 15:25:41.787"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" timestamp="20190121 15:25:41.803" level="INFO">File '&lt;a href="file:///home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status endtime="20190121 15:25:41.805" status="PASS" starttime="20190121 15:25:41.799"></status>
</kw>
<msg timestamp="20190121 15:25:41.809" level="INFO">${matched_path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status endtime="20190121 15:25:41.810" status="PASS" starttime="20190121 15:25:41.698"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:41.963" level="INFO">${res_dict} = {'request': '', 'status': True, 'data': '0468781f', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:25:41.964" status="PASS" starttime="20190121 15:25:41.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:25:41.977" level="INFO">{'request': '', 'status': True, 'data': '0468781f', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:25:41.980" status="PASS" starttime="20190121 15:25:41.967"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:25:43.987" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:25:43.990" status="PASS" starttime="20190121 15:25:41.983"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:25:44.018" level="INFO">${value} = 5453</msg>
<status endtime="20190121 15:25:44.018" status="PASS" starttime="20190121 15:25:43.993"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:25:44.027" status="PASS" starttime="20190121 15:25:44.021"></status>
</kw>
<status endtime="20190121 15:25:44.029" status="PASS" starttime="20190121 15:25:41.693"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:44.098" level="INFO">${res_dict} = {'result': '4953', 'request': '49', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:25:44.099" status="PASS" starttime="20190121 15:25:44.037"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:25:44.125" level="INFO">${value} = True</msg>
<status endtime="20190121 15:25:44.126" status="PASS" starttime="20190121 15:25:44.102"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:25:44.133" status="PASS" starttime="20190121 15:25:44.128"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:25:45.140" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:25:45.142" status="PASS" starttime="20190121 15:25:44.135"></status>
</kw>
<status endtime="20190121 15:25:45.144" status="PASS" starttime="20190121 15:25:44.031"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:45.215" level="INFO">${res_dict} = {'result': '475653', 'request': '4756', 'status': True, 'data': '0201'}</msg>
<status endtime="20190121 15:25:45.216" status="PASS" starttime="20190121 15:25:45.152"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:25:46.224" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:25:46.226" status="PASS" starttime="20190121 15:25:45.219"></status>
</kw>
<status endtime="20190121 15:25:46.228" status="PASS" starttime="20190121 15:25:45.146"></status>
</kw>
<kw name="Step_gpio_select">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${VCC3V3_SWITCH}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:46.297" level="INFO">${res_dict} = {'result': '534653', 'request': '53460000006d', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:25:46.298" status="PASS" starttime="20190121 15:25:46.236"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:25:46.324" level="INFO">${value} = True</msg>
<status endtime="20190121 15:25:46.325" status="PASS" starttime="20190121 15:25:46.301"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:25:46.332" status="PASS" starttime="20190121 15:25:46.328"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${GpioSelect}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:46.396" level="INFO">${res_dict} = {'result': '520153', 'request': '5201', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:25:46.397" status="PASS" starttime="20190121 15:25:46.335"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:25:46.423" level="INFO">${value} = True</msg>
<status endtime="20190121 15:25:46.424" status="PASS" starttime="20190121 15:25:46.400"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:25:46.432" status="PASS" starttime="20190121 15:25:46.427"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:25:47.439" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:25:47.441" status="PASS" starttime="20190121 15:25:46.435"></status>
</kw>
<status endtime="20190121 15:25:47.443" status="PASS" starttime="20190121 15:25:46.230"></status>
</kw>
<kw name="Step_gpio_write">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${HIGH}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:47.512" level="INFO">${res_dict} = {'result': '534653', 'request': '534600000001', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:25:47.513" status="PASS" starttime="20190121 15:25:47.451"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:25:47.539" level="INFO">${value} = True</msg>
<status endtime="20190121 15:25:47.540" status="PASS" starttime="20190121 15:25:47.516"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:25:47.547" status="PASS" starttime="20190121 15:25:47.543"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${GpioWrite}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:47.610" level="INFO">${res_dict} = {'result': '520453', 'request': '5204', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:25:47.611" status="PASS" starttime="20190121 15:25:47.550"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:25:47.638" level="INFO">${value} = True</msg>
<status endtime="20190121 15:25:47.639" status="PASS" starttime="20190121 15:25:47.614"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:25:47.646" status="PASS" starttime="20190121 15:25:47.641"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:25:48.652" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:25:48.654" status="PASS" starttime="20190121 15:25:47.648"></status>
</kw>
<status endtime="20190121 15:25:48.657" status="PASS" starttime="20190121 15:25:47.445"></status>
</kw>
<kw name="Step_adc_read_channel">
<kw name="check_analog_channel">
<arguments>
<arg>${CARBAT_V_SENSE}</arg>
</arguments>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${value_address}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:25:48.749" level="INFO">${res_dict} = {'result': '1efd54', 'request': '53460000004d', 'status': False, 'data': ''}</msg>
<status endtime="20190121 15:25:48.750" status="PASS" starttime="20190121 15:25:48.671"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:25:48.777" level="INFO">${value} = False</msg>
<status endtime="20190121 15:25:48.778" status="PASS" starttime="20190121 15:25:48.753"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<msg timestamp="20190121 15:25:48.786" level="FAIL">'False' should be true.</msg>
<status endtime="20190121 15:25:48.788" status="FAIL" starttime="20190121 15:25:48.781"></status>
</kw>
<status endtime="20190121 15:25:48.790" status="FAIL" starttime="20190121 15:25:48.664"></status>
</kw>
<status endtime="20190121 15:25:48.793" status="FAIL" starttime="20190121 15:25:48.659"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:48.851" status="PASS" starttime="20190121 15:25:48.804"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:48.900" status="PASS" starttime="20190121 15:25:48.854"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:48.969" status="PASS" starttime="20190121 15:25:48.903"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:25:50.981" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:25:50.983" status="PASS" starttime="20190121 15:25:48.972"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:25:51.031" status="PASS" starttime="20190121 15:25:50.986"></status>
</kw>
<status endtime="20190121 15:25:51.034" status="PASS" starttime="20190121 15:25:48.797"></status>
</kw>
<doc>Implements Test Task SKTB-31405</doc>
<tags>
<tag>GpioAdc testroutine</tag>
</tags>
<status critical="yes" endtime="20190121 15:25:51.035" status="FAIL" starttime="20190121 15:25:33.636">'False' should be true.</status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:25:52.542" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:25:52.598" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:25:52.600" status="PASS" starttime="20190121 15:25:51.076"></status>
</kw>
<status endtime="20190121 15:25:52.601" status="PASS" starttime="20190121 15:25:51.051"></status>
</kw>
<status endtime="20190121 15:25:52.603" status="PASS" starttime="20190121 15:25:51.046"></status>
</kw>
<doc>Chorus GpioAdc testing with testroutine</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:25:52.604" status="FAIL" starttime="20190121 15:25:30.806"></status>
</suite>
<suite id="s1-s4" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-33244.robot" name="SKTB-33244">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:25:53.235" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:25:53.246" status="PASS" starttime="20190121 15:25:53.231"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:25:53.266" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:25:53.268" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:25:55.492" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:25:55.507" status="PASS" starttime="20190121 15:25:53.249"></status>
</kw>
<status endtime="20190121 15:25:55.509" status="PASS" starttime="20190121 15:25:53.212"></status>
</kw>
<test id="s1-s4-t1" name="SKTB-33244 Test ADC channels">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:55.671" status="PASS" starttime="20190121 15:25:55.548"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:55.795" status="PASS" starttime="20190121 15:25:55.678"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:25:55.909" status="PASS" starttime="20190121 15:25:55.798"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:25:57.928" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:25:57.930" status="PASS" starttime="20190121 15:25:55.913"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:25:57.979" status="PASS" starttime="20190121 15:25:57.933"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:25:58.991" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:25:58.995" status="PASS" starttime="20190121 15:25:57.983"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:25:59.076" status="PASS" starttime="20190121 15:25:58.998"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:26:01.086" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:26:01.088" status="PASS" starttime="20190121 15:25:59.079"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:26:01.135" status="PASS" starttime="20190121 15:26:01.091"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:26:01.186" status="PASS" starttime="20190121 15:26:01.139"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:26:01.235" status="PASS" starttime="20190121 15:26:01.189"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:26:01.285" status="PASS" starttime="20190121 15:26:01.239"></status>
</kw>
<status endtime="20190121 15:26:01.288" status="PASS" starttime="20190121 15:25:55.542"></status>
</kw>
<kw name="Step_alive">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:01.370" level="INFO">${res_dict} = {'result': '4153', 'request': '41', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:26:01.371" status="PASS" starttime="20190121 15:26:01.296"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:26:01.435" level="INFO">${value} = True</msg>
<status endtime="20190121 15:26:01.436" status="PASS" starttime="20190121 15:26:01.374"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${value}== ${FALSE}</arg>
<arg>change_baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:26:01.457" status="PASS" starttime="20190121 15:26:01.447"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:26:02.464" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:26:02.466" status="PASS" starttime="20190121 15:26:01.459"></status>
</kw>
<status endtime="20190121 15:26:02.468" status="PASS" starttime="20190121 15:26:01.290"></status>
</kw>
<kw name="Step_alive_retry">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:02.537" level="INFO">${res_dict} = {'result': '4153', 'request': '41', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:26:02.538" status="PASS" starttime="20190121 15:26:02.476"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:26:02.570" level="INFO">${value} = True</msg>
<status endtime="20190121 15:26:02.571" status="PASS" starttime="20190121 15:26:02.541"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:26:02.578" status="PASS" starttime="20190121 15:26:02.574"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:26:03.585" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:26:03.587" status="PASS" starttime="20190121 15:26:02.581"></status>
</kw>
<status endtime="20190121 15:26:03.593" status="PASS" starttime="20190121 15:26:02.470"></status>
</kw>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${ADC_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg timestamp="20190121 15:26:03.618" level="INFO">Starting process:
find /home/debian/chorus_version/TestRoutineGpioAdc_OLU_*.bin</msg>
<msg timestamp="20190121 15:26:03.645" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:03.660" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:03.663" level="INFO">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:26:03.663" status="PASS" starttime="20190121 15:26:03.613"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg timestamp="20190121 15:26:03.673" level="INFO">${stdout_path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status endtime="20190121 15:26:03.674" status="PASS" starttime="20190121 15:26:03.667"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:26:03.681" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:26:03.684" level="INFO">${temp} = ['/home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin']</msg>
<status endtime="20190121 15:26:03.685" status="PASS" starttime="20190121 15:26:03.677"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20190121 15:26:03.693" level="INFO">${path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status endtime="20190121 15:26:03.693" status="PASS" starttime="20190121 15:26:03.688"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status endtime="20190121 15:26:03.701" status="PASS" starttime="20190121 15:26:03.696"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" timestamp="20190121 15:26:03.709" level="INFO">File '&lt;a href="file:///home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status endtime="20190121 15:26:03.711" status="PASS" starttime="20190121 15:26:03.704"></status>
</kw>
<msg timestamp="20190121 15:26:03.715" level="INFO">${matched_path} = /home/debian/chorus_version/TestRoutineGpioAdc_OLU_C2.bin</msg>
<status endtime="20190121 15:26:03.716" status="PASS" starttime="20190121 15:26:03.601"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:03.890" level="INFO">${res_dict} = {'request': '', 'status': True, 'data': '0468781f', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:26:03.891" status="PASS" starttime="20190121 15:26:03.719"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:26:05.915" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:26:05.918" status="PASS" starttime="20190121 15:26:03.903"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:26:05.950" level="INFO">${value} = 5453</msg>
<status endtime="20190121 15:26:05.951" status="PASS" starttime="20190121 15:26:05.920"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:26:05.960" status="PASS" starttime="20190121 15:26:05.954"></status>
</kw>
<status endtime="20190121 15:26:05.962" status="PASS" starttime="20190121 15:26:03.595"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:06.032" level="INFO">${res_dict} = {'result': '4953', 'request': '49', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:26:06.033" status="PASS" starttime="20190121 15:26:05.971"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:26:06.066" level="INFO">${value} = True</msg>
<status endtime="20190121 15:26:06.066" status="PASS" starttime="20190121 15:26:06.036"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:26:06.074" status="PASS" starttime="20190121 15:26:06.070"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:26:07.082" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:26:07.084" status="PASS" starttime="20190121 15:26:06.077"></status>
</kw>
<status endtime="20190121 15:26:07.086" status="PASS" starttime="20190121 15:26:05.964"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:07.158" level="INFO">${res_dict} = {'result': '475653', 'request': '4756', 'status': True, 'data': '0201'}</msg>
<status endtime="20190121 15:26:07.158" status="PASS" starttime="20190121 15:26:07.094"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:26:08.166" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:26:08.168" status="PASS" starttime="20190121 15:26:07.162"></status>
</kw>
<status endtime="20190121 15:26:08.171" status="PASS" starttime="20190121 15:26:07.088"></status>
</kw>
<kw name="Step_gpio_select">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${VCC3V3_SWITCH}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:08.240" level="INFO">${res_dict} = {'result': '534653', 'request': '53460000006d', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:26:08.241" status="PASS" starttime="20190121 15:26:08.178"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:26:08.273" level="INFO">${value} = True</msg>
<status endtime="20190121 15:26:08.274" status="PASS" starttime="20190121 15:26:08.244"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:26:08.282" status="PASS" starttime="20190121 15:26:08.277"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${GpioSelect}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:08.363" level="INFO">${res_dict} = {'result': '520153', 'request': '5201', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:26:08.364" status="PASS" starttime="20190121 15:26:08.284"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:26:08.419" level="INFO">${value} = True</msg>
<status endtime="20190121 15:26:08.420" status="PASS" starttime="20190121 15:26:08.372"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:26:08.427" status="PASS" starttime="20190121 15:26:08.423"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:26:09.434" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:26:09.436" status="PASS" starttime="20190121 15:26:08.429"></status>
</kw>
<status endtime="20190121 15:26:09.438" status="PASS" starttime="20190121 15:26:08.172"></status>
</kw>
<kw name="Step_gpio_write">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${HIGH}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:09.509" level="INFO">${res_dict} = {'result': '534653', 'request': '534600000001', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:26:09.510" status="PASS" starttime="20190121 15:26:09.447"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:26:09.543" level="INFO">${value} = True</msg>
<status endtime="20190121 15:26:09.544" status="PASS" starttime="20190121 15:26:09.513"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:26:09.551" status="PASS" starttime="20190121 15:26:09.547"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${GpioWrite}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:09.618" level="INFO">${res_dict} = {'result': '520453', 'request': '5204', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:26:09.619" status="PASS" starttime="20190121 15:26:09.554"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:26:09.651" level="INFO">${value} = True</msg>
<status endtime="20190121 15:26:09.652" status="PASS" starttime="20190121 15:26:09.622"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:26:09.659" status="PASS" starttime="20190121 15:26:09.655"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:26:10.666" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:26:10.669" status="PASS" starttime="20190121 15:26:09.662"></status>
</kw>
<status endtime="20190121 15:26:10.671" status="PASS" starttime="20190121 15:26:09.440"></status>
</kw>
<kw name="Step_adc_read_channel">
<kw name="check_analog_channel">
<arguments>
<arg>${CARBAT_V_SENSE}</arg>
</arguments>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setparam</arg>
<arg>${value_address}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:26:10.760" level="INFO">${res_dict} = {'result': '1efd54', 'request': '53460000004d', 'status': False, 'data': ''}</msg>
<status endtime="20190121 15:26:10.761" status="PASS" starttime="20190121 15:26:10.685"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:26:10.796" level="INFO">${value} = False</msg>
<status endtime="20190121 15:26:10.797" status="PASS" starttime="20190121 15:26:10.764"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<msg timestamp="20190121 15:26:10.805" level="FAIL">'False' should be true.</msg>
<status endtime="20190121 15:26:10.806" status="FAIL" starttime="20190121 15:26:10.799"></status>
</kw>
<status endtime="20190121 15:26:10.809" status="FAIL" starttime="20190121 15:26:10.678"></status>
</kw>
<status endtime="20190121 15:26:10.812" status="FAIL" starttime="20190121 15:26:10.673"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:10.869" status="PASS" starttime="20190121 15:26:10.822"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:10.918" status="PASS" starttime="20190121 15:26:10.872"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:10.986" status="PASS" starttime="20190121 15:26:10.922"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:26:13.001" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:26:13.003" status="PASS" starttime="20190121 15:26:10.993"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:26:13.052" status="PASS" starttime="20190121 15:26:13.006"></status>
</kw>
<status endtime="20190121 15:26:13.054" status="PASS" starttime="20190121 15:26:10.816"></status>
</kw>
<doc>Implements Test Task SKTB-33244</doc>
<tags>
<tag>GpioAdc testroutine</tag>
</tags>
<status critical="yes" endtime="20190121 15:26:13.055" status="FAIL" starttime="20190121 15:25:55.512">'False' should be true.</status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:26:14.578" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:26:14.657" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:26:14.658" status="PASS" starttime="20190121 15:26:13.106"></status>
</kw>
<status endtime="20190121 15:26:14.660" status="PASS" starttime="20190121 15:26:13.073"></status>
</kw>
<status endtime="20190121 15:26:14.662" status="PASS" starttime="20190121 15:26:13.067"></status>
</kw>
<doc>Chorus GpioAdc's test with testroutine</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:26:14.663" status="FAIL" starttime="20190121 15:25:52.713"></status>
</suite>
<suite id="s1-s5" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-13351.robot" name="SKTB-13351">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:26:15.420" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:26:15.434" status="PASS" starttime="20190121 15:26:15.416"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:26:15.459" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:26:15.461" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:26:17.719" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:26:17.721" status="PASS" starttime="20190121 15:26:15.437"></status>
</kw>
<status endtime="20190121 15:26:17.723" status="PASS" starttime="20190121 15:26:15.400"></status>
</kw>
<test id="s1-s5-t1" name="SKTB-13351 FBUS test">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:17.940" status="PASS" starttime="20190121 15:26:17.813"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:18.042" status="PASS" starttime="20190121 15:26:17.954"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:18.188" status="PASS" starttime="20190121 15:26:18.045"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:26:20.216" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:26:20.218" status="PASS" starttime="20190121 15:26:18.193"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:26:20.262" status="PASS" starttime="20190121 15:26:20.223"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:26:20.297" status="PASS" starttime="20190121 15:26:20.266"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:26:20.325" status="PASS" starttime="20190121 15:26:20.300"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:26:20.356" status="PASS" starttime="20190121 15:26:20.328"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:26:20.401" status="PASS" starttime="20190121 15:26:20.360"></status>
</kw>
<kw name="Fbus Set State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${10000}</arg>
</arguments>
<status endtime="20190121 15:26:20.455" status="PASS" starttime="20190121 15:26:20.404"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:26:22.470" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:26:22.472" status="PASS" starttime="20190121 15:26:20.458"></status>
</kw>
<status endtime="20190121 15:26:22.475" status="PASS" starttime="20190121 15:26:17.777"></status>
</kw>
<kw name="Step_1">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${PN_POWER_APP}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:26:22.683" level="INFO">${info} = 1E 14 54 8D 00 08 00 0C 01 01 00 00 01 43 4A DF</msg>
<status endtime="20190121 15:26:22.684" status="PASS" starttime="20190121 15:26:22.483"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:26:22.692" level="INFO">1E 14 54 8D 00 08 00 0C 01 01 00 00 01 43 4A DF</msg>
<status endtime="20190121 15:26:22.694" status="PASS" starttime="20190121 15:26:22.687"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${PN_POWER_APP_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:26:22.703" status="PASS" starttime="20190121 15:26:22.697"></status>
</kw>
<status endtime="20190121 15:26:22.705" status="PASS" starttime="20190121 15:26:22.477"></status>
</kw>
<kw name="Step_2">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${PN_DIAG_APP}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:26:22.931" level="INFO">${info} = 1E 14 54 8F 00 0A 00 0A 01 01 00 00 00 00 01 44 4A DE</msg>
<status endtime="20190121 15:26:22.933" status="PASS" starttime="20190121 15:26:22.714"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:26:22.943" level="INFO">1E 14 54 8F 00 0A 00 0A 01 01 00 00 00 00 01 44 4A DE</msg>
<status endtime="20190121 15:26:22.947" status="PASS" starttime="20190121 15:26:22.936"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${PN_DIAG_APP_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:26:22.956" status="PASS" starttime="20190121 15:26:22.950"></status>
</kw>
<status endtime="20190121 15:26:22.958" status="PASS" starttime="20190121 15:26:22.707"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:23.052" status="PASS" starttime="20190121 15:26:22.968"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:23.138" status="PASS" starttime="20190121 15:26:23.064"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:23.191" status="PASS" starttime="20190121 15:26:23.144"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:26:25.198" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:26:25.201" status="PASS" starttime="20190121 15:26:23.194"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:26:25.253" status="PASS" starttime="20190121 15:26:25.203"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:26:25.301" status="PASS" starttime="20190121 15:26:25.256"></status>
</kw>
<status endtime="20190121 15:26:25.304" status="PASS" starttime="20190121 15:26:22.961"></status>
</kw>
<doc>Implements Test Task SKTB-13351</doc>
<tags>
<tag>FBUS</tag>
</tags>
<status critical="yes" endtime="20190121 15:26:25.305" status="PASS" starttime="20190121 15:26:17.726"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:26:26.809" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:26:26.871" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:26:26.892" status="PASS" starttime="20190121 15:26:25.343"></status>
</kw>
<status endtime="20190121 15:26:26.893" status="PASS" starttime="20190121 15:26:25.320"></status>
</kw>
<status endtime="20190121 15:26:26.895" status="PASS" starttime="20190121 15:26:25.315"></status>
</kw>
<doc>Chorus Fbus Testing</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:26:26.896" status="PASS" starttime="20190121 15:26:14.782"></status>
</suite>
<suite id="s1-s6" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-34994.robot" name="SKTB-34994">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:26:27.497" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:26:27.510" status="PASS" starttime="20190121 15:26:27.482"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:26:27.534" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:26:27.536" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:26:29.744" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:26:29.746" status="PASS" starttime="20190121 15:26:27.513"></status>
</kw>
<status endtime="20190121 15:26:29.763" status="PASS" starttime="20190121 15:26:27.476"></status>
</kw>
<test id="s1-s6-t1" name="SKTB-34994 CAN 3 testing">
<kw name="Test_precondition" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Test_precondition"</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:26:29.813" level="INFO">"Test_precondition"</msg>
<status endtime="20190121 15:26:29.834" status="PASS" starttime="20190121 15:26:29.810"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:29.948" status="PASS" starttime="20190121 15:26:29.837"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:26:30.068" status="PASS" starttime="20190121 15:26:29.951"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20190121 15:26:32.075" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:26:32.077" status="PASS" starttime="20190121 15:26:30.071"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:26:32.126" status="PASS" starttime="20190121 15:26:32.080"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190121 15:26:33.134" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:26:33.136" status="PASS" starttime="20190121 15:26:32.130"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:26:33.213" status="PASS" starttime="20190121 15:26:33.139"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3s</arg>
</arguments>
<msg timestamp="20190121 15:26:36.222" level="INFO">Slept 3 seconds</msg>
<status endtime="20190121 15:26:36.224" status="PASS" starttime="20190121 15:26:33.217"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>ping ${HOST_IP}</arg>
<arg>shell=True</arg>
</arguments>
<msg timestamp="20190121 15:26:36.232" level="INFO">Starting process:
ping 192.168.1.101</msg>
<status endtime="20190121 15:26:36.260" status="PASS" starttime="20190121 15:26:36.227"></status>
</kw>
<kw name="WAIT_UNTIL_DEVICE_IS_READY">
<doc>Waiting for device to be ready, up to 90 seconds</doc>
<assign>
<var>${status}</var>
</assign>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Waiting for device to be ready, up to 90 seconds\n</arg>
<arg>console=true</arg>
</arguments>
<msg timestamp="20190121 15:26:36.339" level="INFO">Waiting for device to be ready, up to 90 seconds
</msg>
<status endtime="20190121 15:26:36.351" status="PASS" starttime="20190121 15:26:36.335"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Wait until keyword succeeds</arg>
<arg>90</arg>
<arg>120x</arg>
<arg>check_dut_ip_ready</arg>
</arguments>
<assign>
<var>${STATUS}</var>
</assign>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>90</arg>
<arg>120x</arg>
<arg>check_dut_ip_ready</arg>
</arguments>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:36.435" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:36.498" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:36.521" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:36.524" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:36.525" status="PASS" starttime="20190121 15:26:36.401"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:36.554" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:36.555" status="PASS" starttime="20190121 15:26:36.545"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:36.566" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:36.567" status="FAIL" starttime="20190121 15:26:36.558"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:36.570" status="FAIL" starttime="20190121 15:26:36.384"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:36.711" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:36.738" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:36.758" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:36.761" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:36.762" status="PASS" starttime="20190121 15:26:36.701"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:36.777" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:36.778" status="PASS" starttime="20190121 15:26:36.767"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:36.790" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:36.791" status="FAIL" starttime="20190121 15:26:36.781"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:36.827" status="FAIL" starttime="20190121 15:26:36.694"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:37.025" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:37.082" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:37.117" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:37.120" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:37.134" status="PASS" starttime="20190121 15:26:37.003"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:37.156" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:37.157" status="PASS" starttime="20190121 15:26:37.138"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:37.186" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:37.187" status="FAIL" starttime="20190121 15:26:37.160"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:37.191" status="FAIL" starttime="20190121 15:26:36.954"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:37.328" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:37.354" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:37.374" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:37.377" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:37.378" status="PASS" starttime="20190121 15:26:37.322"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:37.391" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:37.392" status="PASS" starttime="20190121 15:26:37.382"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:37.404" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:37.405" status="FAIL" starttime="20190121 15:26:37.395"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:37.410" status="FAIL" starttime="20190121 15:26:37.314"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:37.547" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:37.574" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:37.594" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:37.597" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:37.598" status="PASS" starttime="20190121 15:26:37.541"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:37.611" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:37.612" status="PASS" starttime="20190121 15:26:37.601"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:37.623" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:37.624" status="FAIL" starttime="20190121 15:26:37.615"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:37.627" status="FAIL" starttime="20190121 15:26:37.533"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:37.768" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:37.794" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:37.814" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:37.817" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:37.818" status="PASS" starttime="20190121 15:26:37.762"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:37.831" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:37.832" status="PASS" starttime="20190121 15:26:37.822"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:37.842" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:37.844" status="FAIL" starttime="20190121 15:26:37.835"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:37.847" status="FAIL" starttime="20190121 15:26:37.751"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:37.985" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:38.010" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:38.031" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:38.034" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:38.035" status="PASS" starttime="20190121 15:26:37.978"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:38.048" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:38.049" status="PASS" starttime="20190121 15:26:38.039"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:38.060" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:38.061" status="FAIL" starttime="20190121 15:26:38.052"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:38.065" status="FAIL" starttime="20190121 15:26:37.970"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:38.231" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:38.265" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:38.285" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:38.288" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:38.289" status="PASS" starttime="20190121 15:26:38.196"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:38.304" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:38.304" status="PASS" starttime="20190121 15:26:38.293"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:38.315" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:38.317" status="FAIL" starttime="20190121 15:26:38.307"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:38.320" status="FAIL" starttime="20190121 15:26:38.188"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:38.457" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:38.483" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:38.506" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:38.511" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:38.512" status="PASS" starttime="20190121 15:26:38.451"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:38.530" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:38.530" status="PASS" starttime="20190121 15:26:38.516"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:38.541" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:38.543" status="FAIL" starttime="20190121 15:26:38.533"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:38.546" status="FAIL" starttime="20190121 15:26:38.443"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:38.687" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:38.712" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:38.737" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:38.740" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:38.741" status="PASS" starttime="20190121 15:26:38.680"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:38.754" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:38.755" status="PASS" starttime="20190121 15:26:38.745"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:38.766" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:38.767" status="FAIL" starttime="20190121 15:26:38.758"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:38.770" status="FAIL" starttime="20190121 15:26:38.669"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:38.910" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:38.936" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:38.955" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:38.958" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:38.959" status="PASS" starttime="20190121 15:26:38.902"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:38.972" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:38.973" status="PASS" starttime="20190121 15:26:38.963"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:38.984" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:38.985" status="FAIL" starttime="20190121 15:26:38.976"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:38.988" status="FAIL" starttime="20190121 15:26:38.893"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:39.127" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:39.152" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:39.172" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:39.175" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:39.177" status="PASS" starttime="20190121 15:26:39.120"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:39.189" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:39.190" status="PASS" starttime="20190121 15:26:39.180"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:39.201" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:39.202" status="FAIL" starttime="20190121 15:26:39.193"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:39.205" status="FAIL" starttime="20190121 15:26:39.112"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:39.343" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:39.368" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:39.388" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:39.391" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:39.392" status="PASS" starttime="20190121 15:26:39.336"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:39.406" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:39.407" status="PASS" starttime="20190121 15:26:39.396"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:39.418" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:39.419" status="FAIL" starttime="20190121 15:26:39.410"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:39.422" status="FAIL" starttime="20190121 15:26:39.328"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:39.568" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:39.594" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:39.614" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:39.617" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:39.618" status="PASS" starttime="20190121 15:26:39.561"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:39.631" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:39.632" status="PASS" starttime="20190121 15:26:39.622"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:39.643" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:39.644" status="FAIL" starttime="20190121 15:26:39.635"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:39.647" status="FAIL" starttime="20190121 15:26:39.545"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:39.785" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:39.812" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:39.837" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:39.840" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:39.841" status="PASS" starttime="20190121 15:26:39.778"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:39.854" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:39.854" status="PASS" starttime="20190121 15:26:39.845"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:39.865" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:39.867" status="FAIL" starttime="20190121 15:26:39.857"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:39.870" status="FAIL" starttime="20190121 15:26:39.770"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:40.007" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:40.033" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:40.053" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:40.056" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:40.057" status="PASS" starttime="20190121 15:26:40.001"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:40.070" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:40.070" status="PASS" starttime="20190121 15:26:40.061"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:40.081" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:40.083" status="FAIL" starttime="20190121 15:26:40.073"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:40.086" status="FAIL" starttime="20190121 15:26:39.993"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:40.223" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:40.249" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:40.269" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:40.272" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:40.273" status="PASS" starttime="20190121 15:26:40.217"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:40.286" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:40.287" status="PASS" starttime="20190121 15:26:40.277"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:40.298" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:40.300" status="FAIL" starttime="20190121 15:26:40.290"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:40.304" status="FAIL" starttime="20190121 15:26:40.209"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:40.444" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:40.470" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:40.490" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:40.493" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:40.494" status="PASS" starttime="20190121 15:26:40.435"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:40.507" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:40.508" status="PASS" starttime="20190121 15:26:40.498"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:40.520" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:40.521" status="FAIL" starttime="20190121 15:26:40.511"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:40.524" status="FAIL" starttime="20190121 15:26:40.427"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:40.662" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:40.688" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:40.709" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:40.712" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:40.713" status="PASS" starttime="20190121 15:26:40.655"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:40.731" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:40.732" status="PASS" starttime="20190121 15:26:40.720"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:40.743" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:40.744" status="FAIL" starttime="20190121 15:26:40.735"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:40.747" status="FAIL" starttime="20190121 15:26:40.647"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:40.886" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:40.911" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:40.931" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:40.934" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:40.935" status="PASS" starttime="20190121 15:26:40.879"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:40.948" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:40.949" status="PASS" starttime="20190121 15:26:40.939"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:40.960" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:40.961" status="FAIL" starttime="20190121 15:26:40.952"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:40.964" status="FAIL" starttime="20190121 15:26:40.870"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:41.102" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:41.128" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:41.150" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:41.154" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:41.155" status="PASS" starttime="20190121 15:26:41.096"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:41.167" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:41.168" status="PASS" starttime="20190121 15:26:41.158"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:41.179" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:41.180" status="FAIL" starttime="20190121 15:26:41.171"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:41.183" status="FAIL" starttime="20190121 15:26:41.087"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:41.324" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:41.350" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:41.371" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:41.374" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:41.375" status="PASS" starttime="20190121 15:26:41.314"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:41.388" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:41.389" status="PASS" starttime="20190121 15:26:41.379"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:41.400" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:41.401" status="FAIL" starttime="20190121 15:26:41.392"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:41.404" status="FAIL" starttime="20190121 15:26:41.306"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:41.542" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:41.569" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:41.589" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:41.592" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:41.593" status="PASS" starttime="20190121 15:26:41.536"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:41.606" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:41.607" status="PASS" starttime="20190121 15:26:41.597"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:41.619" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:41.620" status="FAIL" starttime="20190121 15:26:41.610"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:41.623" status="FAIL" starttime="20190121 15:26:41.527"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:41.761" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:41.787" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:41.807" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:41.810" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:41.811" status="PASS" starttime="20190121 15:26:41.754"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:41.824" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:41.825" status="PASS" starttime="20190121 15:26:41.815"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:41.835" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:41.837" status="FAIL" starttime="20190121 15:26:41.827"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:41.840" status="FAIL" starttime="20190121 15:26:41.746"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:41.977" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:42.003" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:42.024" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:42.027" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:42.028" status="PASS" starttime="20190121 15:26:41.971"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:42.041" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:42.042" status="PASS" starttime="20190121 15:26:42.032"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:42.052" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:42.054" status="FAIL" starttime="20190121 15:26:42.045"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:42.057" status="FAIL" starttime="20190121 15:26:41.963"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:42.198" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:42.223" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:42.244" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:42.247" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:42.248" status="PASS" starttime="20190121 15:26:42.188"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:42.261" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:42.262" status="PASS" starttime="20190121 15:26:42.252"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:42.273" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:42.274" status="FAIL" starttime="20190121 15:26:42.265"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:42.277" status="FAIL" starttime="20190121 15:26:42.180"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:42.415" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:42.440" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:42.461" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:42.464" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:42.465" status="PASS" starttime="20190121 15:26:42.408"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:42.478" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:42.479" status="PASS" starttime="20190121 15:26:42.469"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:42.489" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:42.491" status="FAIL" starttime="20190121 15:26:42.482"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:42.494" status="FAIL" starttime="20190121 15:26:42.400"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:42.632" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:42.657" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:42.678" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:42.681" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:42.682" status="PASS" starttime="20190121 15:26:42.625"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:42.695" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:42.696" status="PASS" starttime="20190121 15:26:42.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:42.706" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:42.709" status="FAIL" starttime="20190121 15:26:42.698"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:42.712" status="FAIL" starttime="20190121 15:26:42.617"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:42.849" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:42.875" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:42.896" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:42.899" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:42.900" status="PASS" starttime="20190121 15:26:42.843"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:42.912" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:42.913" status="PASS" starttime="20190121 15:26:42.903"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:42.924" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:42.925" status="FAIL" starttime="20190121 15:26:42.916"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:42.928" status="FAIL" starttime="20190121 15:26:42.835"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:43.071" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:43.097" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:43.117" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:43.120" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:43.121" status="PASS" starttime="20190121 15:26:43.061"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:43.134" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:43.135" status="PASS" starttime="20190121 15:26:43.125"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:43.145" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:43.147" status="FAIL" starttime="20190121 15:26:43.138"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:43.150" status="FAIL" starttime="20190121 15:26:43.052"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:43.288" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:43.313" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:43.333" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:43.336" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:43.337" status="PASS" starttime="20190121 15:26:43.281"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:43.350" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:43.351" status="PASS" starttime="20190121 15:26:43.341"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:43.361" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:43.363" status="FAIL" starttime="20190121 15:26:43.354"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:43.366" status="FAIL" starttime="20190121 15:26:43.273"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:43.503" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:43.529" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:43.549" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:43.552" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:43.554" status="PASS" starttime="20190121 15:26:43.497"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:43.571" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:43.572" status="PASS" starttime="20190121 15:26:43.560"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:43.586" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:43.588" status="FAIL" starttime="20190121 15:26:43.575"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:43.591" status="FAIL" starttime="20190121 15:26:43.489"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:43.728" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:43.754" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:43.774" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:43.778" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:43.779" status="PASS" starttime="20190121 15:26:43.722"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:43.792" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:43.793" status="PASS" starttime="20190121 15:26:43.782"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:43.804" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:43.805" status="FAIL" starttime="20190121 15:26:43.796"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:43.808" status="FAIL" starttime="20190121 15:26:43.714"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:43.951" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:43.978" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:43.998" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:44.002" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:44.003" status="PASS" starttime="20190121 15:26:43.942"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:44.017" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:44.018" status="PASS" starttime="20190121 15:26:44.007"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:44.028" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:44.030" status="FAIL" starttime="20190121 15:26:44.021"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:44.033" status="FAIL" starttime="20190121 15:26:43.934"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:44.171" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:44.196" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:44.217" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:44.220" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:44.221" status="PASS" starttime="20190121 15:26:44.164"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:44.234" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:44.235" status="PASS" starttime="20190121 15:26:44.225"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:44.245" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:44.247" status="FAIL" starttime="20190121 15:26:44.238"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:44.250" status="FAIL" starttime="20190121 15:26:44.156"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:44.389" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:44.414" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:44.434" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:44.438" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:44.439" status="PASS" starttime="20190121 15:26:44.382"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:44.451" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:44.452" status="PASS" starttime="20190121 15:26:44.442"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:44.463" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:44.465" status="FAIL" starttime="20190121 15:26:44.455"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:44.467" status="FAIL" starttime="20190121 15:26:44.373"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:44.605" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:44.631" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:44.651" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:44.654" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:44.655" status="PASS" starttime="20190121 15:26:44.599"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:44.668" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:44.669" status="PASS" starttime="20190121 15:26:44.659"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:44.679" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:44.681" status="FAIL" starttime="20190121 15:26:44.671"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:44.684" status="FAIL" starttime="20190121 15:26:44.591"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:44.825" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:44.851" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:44.871" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:44.874" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:44.875" status="PASS" starttime="20190121 15:26:44.815"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:44.888" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:44.889" status="PASS" starttime="20190121 15:26:44.879"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:44.900" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:44.902" status="FAIL" starttime="20190121 15:26:44.892"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:44.905" status="FAIL" starttime="20190121 15:26:44.807"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:45.043" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:45.070" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:45.090" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:45.094" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:45.095" status="PASS" starttime="20190121 15:26:45.037"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:45.109" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:45.110" status="PASS" starttime="20190121 15:26:45.099"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:45.121" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:45.122" status="FAIL" starttime="20190121 15:26:45.113"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:45.125" status="FAIL" starttime="20190121 15:26:45.028"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:45.263" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:45.289" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:45.309" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:45.312" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:45.313" status="PASS" starttime="20190121 15:26:45.256"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:45.326" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:45.327" status="PASS" starttime="20190121 15:26:45.317"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:45.337" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:45.339" status="FAIL" starttime="20190121 15:26:45.330"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:45.342" status="FAIL" starttime="20190121 15:26:45.248"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:45.479" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:45.505" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:45.526" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:45.529" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:45.530" status="PASS" starttime="20190121 15:26:45.473"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:45.544" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:45.545" status="PASS" starttime="20190121 15:26:45.534"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:45.555" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:45.557" status="FAIL" starttime="20190121 15:26:45.547"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:45.560" status="FAIL" starttime="20190121 15:26:45.465"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:45.701" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:45.727" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:45.747" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:45.750" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:45.751" status="PASS" starttime="20190121 15:26:45.691"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:45.764" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:45.765" status="PASS" starttime="20190121 15:26:45.755"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:45.776" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:45.777" status="FAIL" starttime="20190121 15:26:45.768"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:45.780" status="FAIL" starttime="20190121 15:26:45.683"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:45.918" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:45.944" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:45.964" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:45.967" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:45.968" status="PASS" starttime="20190121 15:26:45.911"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:45.981" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:45.982" status="PASS" starttime="20190121 15:26:45.972"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:45.993" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:45.994" status="FAIL" starttime="20190121 15:26:45.985"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:45.997" status="FAIL" starttime="20190121 15:26:45.903"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:46.137" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:46.162" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:46.182" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:46.186" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:46.187" status="PASS" starttime="20190121 15:26:46.129"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:46.199" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:46.200" status="PASS" starttime="20190121 15:26:46.191"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:46.211" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:46.212" status="FAIL" starttime="20190121 15:26:46.203"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:46.215" status="FAIL" starttime="20190121 15:26:46.120"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:46.353" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:46.379" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:46.399" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:46.402" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:46.403" status="PASS" starttime="20190121 15:26:46.346"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:46.416" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:46.417" status="PASS" starttime="20190121 15:26:46.407"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:46.428" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:46.430" status="FAIL" starttime="20190121 15:26:46.420"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:46.433" status="FAIL" starttime="20190121 15:26:46.339"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:46.584" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:46.610" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:46.631" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:46.634" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:46.635" status="PASS" starttime="20190121 15:26:46.564"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:46.647" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:46.648" status="PASS" starttime="20190121 15:26:46.639"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:46.659" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:46.661" status="FAIL" starttime="20190121 15:26:46.651"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:46.664" status="FAIL" starttime="20190121 15:26:46.556"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:46.802" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:46.827" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:46.848" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:46.851" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:46.852" status="PASS" starttime="20190121 15:26:46.795"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:46.865" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:46.866" status="PASS" starttime="20190121 15:26:46.856"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:46.876" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:46.878" status="FAIL" starttime="20190121 15:26:46.869"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:46.881" status="FAIL" starttime="20190121 15:26:46.787"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:47.019" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:47.044" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:47.065" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:47.067" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:47.069" status="PASS" starttime="20190121 15:26:47.012"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:47.081" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:47.082" status="PASS" starttime="20190121 15:26:47.072"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:47.093" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:47.095" status="FAIL" starttime="20190121 15:26:47.085"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:47.099" status="FAIL" starttime="20190121 15:26:47.004"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:47.236" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:47.264" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:47.284" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:47.287" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:47.288" status="PASS" starttime="20190121 15:26:47.230"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:47.302" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:47.303" status="PASS" starttime="20190121 15:26:47.292"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:47.313" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:47.315" status="FAIL" starttime="20190121 15:26:47.305"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:47.318" status="FAIL" starttime="20190121 15:26:47.222"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:47.456" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:47.481" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:47.507" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:47.510" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:47.512" status="PASS" starttime="20190121 15:26:47.449"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:47.524" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:47.525" status="PASS" starttime="20190121 15:26:47.515"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:47.536" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:47.537" status="FAIL" starttime="20190121 15:26:47.528"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:47.540" status="FAIL" starttime="20190121 15:26:47.441"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:47.677" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:47.704" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:47.724" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:47.727" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:47.728" status="PASS" starttime="20190121 15:26:47.671"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:47.741" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:47.742" status="PASS" starttime="20190121 15:26:47.732"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:47.752" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:47.754" status="FAIL" starttime="20190121 15:26:47.745"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:47.757" status="FAIL" starttime="20190121 15:26:47.663"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:47.895" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:47.922" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:47.943" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:47.946" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:47.947" status="PASS" starttime="20190121 15:26:47.888"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:47.959" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:47.960" status="PASS" starttime="20190121 15:26:47.951"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:47.971" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:47.972" status="FAIL" starttime="20190121 15:26:47.963"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:47.975" status="FAIL" starttime="20190121 15:26:47.880"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:48.114" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:48.139" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:48.160" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:48.163" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:48.164" status="PASS" starttime="20190121 15:26:48.107"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:48.176" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:48.177" status="PASS" starttime="20190121 15:26:48.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:48.188" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:48.190" status="FAIL" starttime="20190121 15:26:48.180"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:48.193" status="FAIL" starttime="20190121 15:26:48.099"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:48.332" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:48.358" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:48.379" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:48.387" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:48.389" status="PASS" starttime="20190121 15:26:48.324"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:48.405" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:48.406" status="PASS" starttime="20190121 15:26:48.392"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:48.417" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:48.418" status="FAIL" starttime="20190121 15:26:48.409"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:48.421" status="FAIL" starttime="20190121 15:26:48.316"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:48.558" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:48.584" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:48.605" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:48.608" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:48.609" status="PASS" starttime="20190121 15:26:48.552"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:48.622" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:48.623" status="PASS" starttime="20190121 15:26:48.613"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:48.634" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:48.635" status="FAIL" starttime="20190121 15:26:48.626"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:48.638" status="FAIL" starttime="20190121 15:26:48.544"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:48.776" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:48.802" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:48.823" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:48.826" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:48.827" status="PASS" starttime="20190121 15:26:48.769"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:48.839" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:48.840" status="PASS" starttime="20190121 15:26:48.830"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:48.851" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:48.852" status="FAIL" starttime="20190121 15:26:48.843"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:48.855" status="FAIL" starttime="20190121 15:26:48.761"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:48.993" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:49.019" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:49.040" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:49.043" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:49.044" status="PASS" starttime="20190121 15:26:48.986"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:49.057" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:49.058" status="PASS" starttime="20190121 15:26:49.048"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:49.068" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:49.070" status="FAIL" starttime="20190121 15:26:49.060"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:49.073" status="FAIL" starttime="20190121 15:26:48.978"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:49.210" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:49.236" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:49.256" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:49.259" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:49.260" status="PASS" starttime="20190121 15:26:49.204"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:49.273" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:49.274" status="PASS" starttime="20190121 15:26:49.264"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:49.288" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:49.290" status="FAIL" starttime="20190121 15:26:49.277"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:49.293" status="FAIL" starttime="20190121 15:26:49.196"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:49.430" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:49.456" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:49.477" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:49.480" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:49.481" status="PASS" starttime="20190121 15:26:49.424"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:49.495" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:49.496" status="PASS" starttime="20190121 15:26:49.486"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:49.507" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:49.508" status="FAIL" starttime="20190121 15:26:49.499"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:49.511" status="FAIL" starttime="20190121 15:26:49.416"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:49.648" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:49.674" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:49.694" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:49.697" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:49.699" status="PASS" starttime="20190121 15:26:49.642"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:49.711" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:49.712" status="PASS" starttime="20190121 15:26:49.702"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:49.723" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:49.725" status="FAIL" starttime="20190121 15:26:49.715"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:49.729" status="FAIL" starttime="20190121 15:26:49.634"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:49.866" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:49.892" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:49.913" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:49.916" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:49.917" status="PASS" starttime="20190121 15:26:49.860"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:49.930" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:49.931" status="PASS" starttime="20190121 15:26:49.921"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:49.942" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:49.943" status="FAIL" starttime="20190121 15:26:49.933"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:49.946" status="FAIL" starttime="20190121 15:26:49.852"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:50.084" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:50.110" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:50.130" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:50.133" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:50.134" status="PASS" starttime="20190121 15:26:50.077"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:50.147" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:50.148" status="PASS" starttime="20190121 15:26:50.138"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:50.163" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:50.164" status="FAIL" starttime="20190121 15:26:50.151"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:50.167" status="FAIL" starttime="20190121 15:26:50.069"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:50.305" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:50.330" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:50.351" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:50.354" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:50.355" status="PASS" starttime="20190121 15:26:50.298"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:50.368" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:50.369" status="PASS" starttime="20190121 15:26:50.359"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:50.380" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:50.381" status="FAIL" starttime="20190121 15:26:50.372"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:50.384" status="FAIL" starttime="20190121 15:26:50.290"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:50.523" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:50.548" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:50.569" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:50.571" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:50.573" status="PASS" starttime="20190121 15:26:50.516"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:50.586" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:50.587" status="PASS" starttime="20190121 15:26:50.576"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:50.598" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:50.599" status="FAIL" starttime="20190121 15:26:50.590"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:50.603" status="FAIL" starttime="20190121 15:26:50.507"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:50.740" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:50.766" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:50.786" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:50.790" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:50.791" status="PASS" starttime="20190121 15:26:50.733"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:50.804" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:50.804" status="PASS" starttime="20190121 15:26:50.794"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:50.815" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:50.816" status="FAIL" starttime="20190121 15:26:50.807"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:50.819" status="FAIL" starttime="20190121 15:26:50.726"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:50.957" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:50.982" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:51.003" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:51.006" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:51.007" status="PASS" starttime="20190121 15:26:50.950"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:51.020" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:51.021" status="PASS" starttime="20190121 15:26:51.011"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:51.032" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:51.033" status="FAIL" starttime="20190121 15:26:51.024"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:51.036" status="FAIL" starttime="20190121 15:26:50.943"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:51.177" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:51.203" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:51.223" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:51.226" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:51.227" status="PASS" starttime="20190121 15:26:51.171"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:51.240" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:51.241" status="PASS" starttime="20190121 15:26:51.231"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:51.252" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:51.253" status="FAIL" starttime="20190121 15:26:51.244"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:51.256" status="FAIL" starttime="20190121 15:26:51.159"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:51.406" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:51.432" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:51.452" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:51.455" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:51.456" status="PASS" starttime="20190121 15:26:51.399"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:51.469" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:51.470" status="PASS" starttime="20190121 15:26:51.460"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:51.481" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:51.482" status="FAIL" starttime="20190121 15:26:51.472"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:51.485" status="FAIL" starttime="20190121 15:26:51.391"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:51.624" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:51.650" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:51.670" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:51.673" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:51.674" status="PASS" starttime="20190121 15:26:51.616"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:51.687" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:51.689" status="PASS" starttime="20190121 15:26:51.678"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:51.700" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:51.701" status="FAIL" starttime="20190121 15:26:51.692"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:51.704" status="FAIL" starttime="20190121 15:26:51.608"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:51.842" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:51.867" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:51.888" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:51.891" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:51.892" status="PASS" starttime="20190121 15:26:51.835"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:51.905" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:51.906" status="PASS" starttime="20190121 15:26:51.895"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:51.916" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:51.918" status="FAIL" starttime="20190121 15:26:51.908"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:51.921" status="FAIL" starttime="20190121 15:26:51.827"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:52.063" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:52.088" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:52.109" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:52.112" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:52.113" status="PASS" starttime="20190121 15:26:52.056"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:52.126" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:52.127" status="PASS" starttime="20190121 15:26:52.117"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:52.138" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:52.140" status="FAIL" starttime="20190121 15:26:52.130"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:52.143" status="FAIL" starttime="20190121 15:26:52.044"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:52.280" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:52.306" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:52.327" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:52.330" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:52.331" status="PASS" starttime="20190121 15:26:52.274"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:52.346" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:52.347" status="PASS" starttime="20190121 15:26:52.335"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:52.359" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:52.360" status="FAIL" starttime="20190121 15:26:52.350"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:52.363" status="FAIL" starttime="20190121 15:26:52.266"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:52.503" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:52.529" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:52.550" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:52.553" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:52.555" status="PASS" starttime="20190121 15:26:52.495"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:52.569" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:52.570" status="PASS" starttime="20190121 15:26:52.558"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:52.581" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:52.583" status="FAIL" starttime="20190121 15:26:52.573"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:52.586" status="FAIL" starttime="20190121 15:26:52.487"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:52.724" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:52.750" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:52.770" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:52.773" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:52.774" status="PASS" starttime="20190121 15:26:52.717"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:52.787" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:52.788" status="PASS" starttime="20190121 15:26:52.778"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:52.799" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:52.801" status="FAIL" starttime="20190121 15:26:52.791"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:52.804" status="FAIL" starttime="20190121 15:26:52.710"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:52.945" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:52.972" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:52.994" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:52.997" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:52.998" status="PASS" starttime="20190121 15:26:52.935"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:53.011" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:53.012" status="PASS" starttime="20190121 15:26:53.002"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:53.023" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:53.024" status="FAIL" starttime="20190121 15:26:53.015"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:53.027" status="FAIL" starttime="20190121 15:26:52.927"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:53.165" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:53.190" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:53.211" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:53.214" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:53.215" status="PASS" starttime="20190121 15:26:53.158"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:53.229" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:53.229" status="PASS" starttime="20190121 15:26:53.220"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:53.240" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:53.241" status="FAIL" starttime="20190121 15:26:53.232"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:53.245" status="FAIL" starttime="20190121 15:26:53.150"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:53.382" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:53.408" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:53.428" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:53.431" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:53.432" status="PASS" starttime="20190121 15:26:53.376"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:53.446" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:53.446" status="PASS" starttime="20190121 15:26:53.437"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:53.457" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:53.459" status="FAIL" starttime="20190121 15:26:53.450"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:53.462" status="FAIL" starttime="20190121 15:26:53.368"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:53.600" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:53.626" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:53.646" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:53.649" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:53.650" status="PASS" starttime="20190121 15:26:53.593"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:53.663" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:53.664" status="PASS" starttime="20190121 15:26:53.654"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:53.675" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:53.676" status="FAIL" starttime="20190121 15:26:53.667"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:53.679" status="FAIL" starttime="20190121 15:26:53.585"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:53.820" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:53.846" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:53.866" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:53.870" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:53.871" status="PASS" starttime="20190121 15:26:53.810"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:53.886" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:53.887" status="PASS" starttime="20190121 15:26:53.874"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:53.899" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:53.901" status="FAIL" starttime="20190121 15:26:53.890"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:53.904" status="FAIL" starttime="20190121 15:26:53.802"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:54.042" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:54.067" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:54.088" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:54.091" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:54.092" status="PASS" starttime="20190121 15:26:54.035"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:54.105" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:54.106" status="PASS" starttime="20190121 15:26:54.096"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:54.117" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:54.118" status="FAIL" starttime="20190121 15:26:54.109"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:54.121" status="FAIL" starttime="20190121 15:26:54.027"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:54.260" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:54.287" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:54.307" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:54.311" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:54.312" status="PASS" starttime="20190121 15:26:54.253"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:54.324" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:54.325" status="PASS" starttime="20190121 15:26:54.315"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:54.336" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:54.338" status="FAIL" starttime="20190121 15:26:54.329"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:54.341" status="FAIL" starttime="20190121 15:26:54.245"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:54.479" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:54.505" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:54.526" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:54.529" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:54.530" status="PASS" starttime="20190121 15:26:54.472"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:54.544" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:54.545" status="PASS" starttime="20190121 15:26:54.534"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:54.555" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:54.557" status="FAIL" starttime="20190121 15:26:54.547"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:54.560" status="FAIL" starttime="20190121 15:26:54.464"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:54.698" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:54.728" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:54.748" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:54.751" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:54.752" status="PASS" starttime="20190121 15:26:54.691"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:54.765" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:54.766" status="PASS" starttime="20190121 15:26:54.756"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:54.777" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:54.778" status="FAIL" starttime="20190121 15:26:54.769"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:54.781" status="FAIL" starttime="20190121 15:26:54.683"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:54.919" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:54.945" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:54.965" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:54.968" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:54.969" status="PASS" starttime="20190121 15:26:54.912"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:54.982" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:54.983" status="PASS" starttime="20190121 15:26:54.973"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:54.994" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:54.996" status="FAIL" starttime="20190121 15:26:54.986"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:55.000" status="FAIL" starttime="20190121 15:26:54.904"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:55.138" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:55.165" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:55.185" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:55.188" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:55.189" status="PASS" starttime="20190121 15:26:55.132"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:55.202" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:55.202" status="PASS" starttime="20190121 15:26:55.193"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:55.214" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:55.215" status="FAIL" starttime="20190121 15:26:55.205"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:55.218" status="FAIL" starttime="20190121 15:26:55.124"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:55.355" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:55.381" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:55.402" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:55.405" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:55.406" status="PASS" starttime="20190121 15:26:55.349"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:55.426" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:55.427" status="PASS" starttime="20190121 15:26:55.410"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:55.438" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:55.439" status="FAIL" starttime="20190121 15:26:55.430"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:55.443" status="FAIL" starttime="20190121 15:26:55.341"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:55.595" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:55.621" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:55.642" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:55.645" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:55.646" status="PASS" starttime="20190121 15:26:55.585"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:55.659" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:55.660" status="PASS" starttime="20190121 15:26:55.650"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:55.672" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:55.673" status="FAIL" starttime="20190121 15:26:55.662"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:55.676" status="FAIL" starttime="20190121 15:26:55.567"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:55.814" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:55.840" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:55.860" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:55.863" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:55.864" status="PASS" starttime="20190121 15:26:55.807"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:55.877" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:55.878" status="PASS" starttime="20190121 15:26:55.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:55.889" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:55.890" status="FAIL" starttime="20190121 15:26:55.881"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:55.893" status="FAIL" starttime="20190121 15:26:55.799"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:56.031" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:56.057" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:56.077" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:56.080" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:56.082" status="PASS" starttime="20190121 15:26:56.025"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:56.095" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:56.096" status="PASS" starttime="20190121 15:26:56.086"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:56.107" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:56.108" status="FAIL" starttime="20190121 15:26:56.099"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:56.111" status="FAIL" starttime="20190121 15:26:56.016"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:56.250" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:56.276" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:56.296" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:56.299" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:56.300" status="PASS" starttime="20190121 15:26:56.243"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:56.313" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:56.314" status="PASS" starttime="20190121 15:26:56.304"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:56.325" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:56.326" status="FAIL" starttime="20190121 15:26:56.317"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:56.329" status="FAIL" starttime="20190121 15:26:56.235"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:56.467" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:56.497" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:56.519" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:56.522" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:56.523" status="PASS" starttime="20190121 15:26:56.461"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:56.537" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:56.537" status="PASS" starttime="20190121 15:26:56.527"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:56.549" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:56.550" status="FAIL" starttime="20190121 15:26:56.541"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:56.553" status="FAIL" starttime="20190121 15:26:56.453"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:56.691" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:56.716" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:56.737" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:56.740" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:56.741" status="PASS" starttime="20190121 15:26:56.684"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:56.754" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:56.755" status="PASS" starttime="20190121 15:26:56.745"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:56.765" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:56.767" status="FAIL" starttime="20190121 15:26:56.758"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:56.770" status="FAIL" starttime="20190121 15:26:56.676"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:56.907" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:56.933" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:56.953" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:56.957" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:56.958" status="PASS" starttime="20190121 15:26:56.901"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:56.970" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:56.971" status="PASS" starttime="20190121 15:26:56.961"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:56.982" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:56.983" status="FAIL" starttime="20190121 15:26:56.974"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:56.986" status="FAIL" starttime="20190121 15:26:56.893"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:57.125" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:57.150" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:57.171" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:57.174" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:57.175" status="PASS" starttime="20190121 15:26:57.118"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:57.188" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:57.189" status="PASS" starttime="20190121 15:26:57.179"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:57.200" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:57.201" status="FAIL" starttime="20190121 15:26:57.192"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:57.204" status="FAIL" starttime="20190121 15:26:57.110"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:57.355" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:57.382" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:57.403" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:57.406" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:57.407" status="PASS" starttime="20190121 15:26:57.336"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:57.420" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:57.421" status="PASS" starttime="20190121 15:26:57.411"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:57.432" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:57.433" status="FAIL" starttime="20190121 15:26:57.424"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:57.436" status="FAIL" starttime="20190121 15:26:57.328"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:57.574" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:57.600" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:57.621" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:57.623" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:57.625" status="PASS" starttime="20190121 15:26:57.567"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:57.637" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:57.638" status="PASS" starttime="20190121 15:26:57.628"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:57.649" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:57.650" status="FAIL" starttime="20190121 15:26:57.641"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:57.653" status="FAIL" starttime="20190121 15:26:57.560"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:57.791" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:57.817" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:57.838" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:57.841" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:57.842" status="PASS" starttime="20190121 15:26:57.784"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:57.855" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:57.856" status="PASS" starttime="20190121 15:26:57.846"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:57.866" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:57.868" status="FAIL" starttime="20190121 15:26:57.859"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:57.871" status="FAIL" starttime="20190121 15:26:57.777"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:58.009" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:58.035" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:58.056" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:58.059" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:58.060" status="PASS" starttime="20190121 15:26:58.002"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:58.073" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:58.073" status="PASS" starttime="20190121 15:26:58.063"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:58.085" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:58.086" status="FAIL" starttime="20190121 15:26:58.076"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:58.089" status="FAIL" starttime="20190121 15:26:57.994"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:58.227" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:58.253" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:58.274" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:58.277" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:58.278" status="PASS" starttime="20190121 15:26:58.220"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:58.294" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:58.295" status="PASS" starttime="20190121 15:26:58.282"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:58.306" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:58.307" status="FAIL" starttime="20190121 15:26:58.298"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:58.310" status="FAIL" starttime="20190121 15:26:58.212"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:58.447" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:58.474" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:58.495" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:58.498" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:58.499" status="PASS" starttime="20190121 15:26:58.441"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:58.512" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:58.513" status="PASS" starttime="20190121 15:26:58.503"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:58.524" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:58.526" status="FAIL" starttime="20190121 15:26:58.516"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:58.529" status="FAIL" starttime="20190121 15:26:58.433"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:58.666" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:58.692" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:58.712" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:58.715" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:58.717" status="PASS" starttime="20190121 15:26:58.660"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:58.729" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:58.730" status="PASS" starttime="20190121 15:26:58.720"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:58.741" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:58.742" status="FAIL" starttime="20190121 15:26:58.733"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:58.745" status="FAIL" starttime="20190121 15:26:58.652"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:58.883" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:58.909" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:58.929" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:58.933" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:58.934" status="PASS" starttime="20190121 15:26:58.876"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:58.946" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:58.947" status="PASS" starttime="20190121 15:26:58.937"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:58.958" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:58.959" status="FAIL" starttime="20190121 15:26:58.950"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:58.962" status="FAIL" starttime="20190121 15:26:58.868"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:59.101" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:59.128" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:59.148" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:59.151" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:59.152" status="PASS" starttime="20190121 15:26:59.094"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:59.165" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:59.166" status="PASS" starttime="20190121 15:26:59.156"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:59.181" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:59.182" status="FAIL" starttime="20190121 15:26:59.169"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:59.185" status="FAIL" starttime="20190121 15:26:59.086"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:59.322" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:59.348" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:59.369" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:59.372" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:59.373" status="PASS" starttime="20190121 15:26:59.316"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:59.386" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:59.386" status="PASS" starttime="20190121 15:26:59.377"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:59.397" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:59.399" status="FAIL" starttime="20190121 15:26:59.389"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:59.402" status="FAIL" starttime="20190121 15:26:59.308"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:59.564" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:59.592" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:59.613" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:59.617" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:59.618" status="PASS" starttime="20190121 15:26:59.547"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:59.631" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:59.631" status="PASS" starttime="20190121 15:26:59.622"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:59.642" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:59.643" status="FAIL" starttime="20190121 15:26:59.634"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:59.647" status="FAIL" starttime="20190121 15:26:59.529"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:26:59.784" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:26:59.810" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:26:59.836" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:26:59.839" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:26:59.840" status="PASS" starttime="20190121 15:26:59.777"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:26:59.853" level="INFO">${resp} = </msg>
<status endtime="20190121 15:26:59.853" status="PASS" starttime="20190121 15:26:59.843"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:26:59.865" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:26:59.866" status="FAIL" starttime="20190121 15:26:59.857"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:26:59.869" status="FAIL" starttime="20190121 15:26:59.770"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:00.007" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:00.034" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:00.054" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:00.057" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:00.058" status="PASS" starttime="20190121 15:27:00.000"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:00.071" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:00.072" status="PASS" starttime="20190121 15:27:00.062"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:00.086" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:00.088" status="FAIL" starttime="20190121 15:27:00.075"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:00.091" status="FAIL" starttime="20190121 15:26:59.992"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:00.228" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:00.254" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:00.275" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:00.278" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:00.279" status="PASS" starttime="20190121 15:27:00.222"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:00.292" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:00.293" status="PASS" starttime="20190121 15:27:00.283"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:00.304" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:00.306" status="FAIL" starttime="20190121 15:27:00.296"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:00.309" status="FAIL" starttime="20190121 15:27:00.214"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:00.446" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:00.472" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:00.493" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:00.496" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:00.497" status="PASS" starttime="20190121 15:27:00.440"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:00.510" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:00.511" status="PASS" starttime="20190121 15:27:00.501"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:00.522" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:00.523" status="FAIL" starttime="20190121 15:27:00.514"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:00.527" status="FAIL" starttime="20190121 15:27:00.432"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:00.664" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:00.690" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:00.710" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:00.714" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:00.716" status="PASS" starttime="20190121 15:27:00.658"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:00.729" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:00.730" status="PASS" starttime="20190121 15:27:00.720"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:00.740" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:00.742" status="FAIL" starttime="20190121 15:27:00.733"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:00.745" status="FAIL" starttime="20190121 15:27:00.650"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:00.883" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:00.908" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:00.929" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:00.932" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:00.933" status="PASS" starttime="20190121 15:27:00.876"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:00.946" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:00.947" status="PASS" starttime="20190121 15:27:00.937"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:00.957" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:00.959" status="FAIL" starttime="20190121 15:27:00.950"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:00.962" status="FAIL" starttime="20190121 15:27:00.868"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:01.104" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:01.130" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:01.150" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:01.153" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:01.154" status="PASS" starttime="20190121 15:27:01.097"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:01.167" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:01.168" status="PASS" starttime="20190121 15:27:01.158"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:01.179" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:01.180" status="FAIL" starttime="20190121 15:27:01.171"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:01.183" status="FAIL" starttime="20190121 15:27:01.085"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:01.321" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:01.346" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:01.366" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:01.370" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:01.371" status="PASS" starttime="20190121 15:27:01.314"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:01.384" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:01.385" status="PASS" starttime="20190121 15:27:01.374"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:01.395" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:01.397" status="FAIL" starttime="20190121 15:27:01.387"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:01.400" status="FAIL" starttime="20190121 15:27:01.306"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:01.538" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:01.563" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:01.583" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:01.586" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:01.587" status="PASS" starttime="20190121 15:27:01.531"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:01.600" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:01.601" status="PASS" starttime="20190121 15:27:01.591"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:01.612" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:01.613" status="FAIL" starttime="20190121 15:27:01.604"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:01.616" status="FAIL" starttime="20190121 15:27:01.523"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:01.754" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:01.780" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:01.800" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:01.803" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:01.804" status="PASS" starttime="20190121 15:27:01.748"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:01.818" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:01.819" status="PASS" starttime="20190121 15:27:01.808"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:01.830" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:01.832" status="FAIL" starttime="20190121 15:27:01.822"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:01.835" status="FAIL" starttime="20190121 15:27:01.740"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:01.976" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:02.002" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:02.098" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:02.145" level="INFO">${ret} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:27:02.146" status="PASS" starttime="20190121 15:27:01.969"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:02.248" level="INFO">${resp} = </msg>
<status endtime="20190121 15:27:02.257" status="PASS" starttime="20190121 15:27:02.159"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<msg timestamp="20190121 15:27:02.358" level="FAIL">'' does not contain 'usb_max'</msg>
<status endtime="20190121 15:27:02.409" status="FAIL" starttime="20190121 15:27:02.260"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:02.429" status="FAIL" starttime="20190121 15:27:01.958"></status>
</kw>
<kw name="check_dut_ip_ready">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip a | grep ${DEVICE_NAME}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:02.669" level="INFO">Starting process:
ip a | grep usb_max</msg>
<msg timestamp="20190121 15:27:02.962" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:03.012" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:03.016" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:03.017" status="PASS" starttime="20190121 15:27:02.631"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${ret.stdout}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:27:03.064" level="INFO">${resp} = 76: usb_max: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    inet 192.168.1.100/24 brd 192.168.1.255 scope global usb_max</msg>
<status endtime="20190121 15:27:03.065" status="PASS" starttime="20190121 15:27:03.020"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DEVICE_NAME}</arg>
</arguments>
<status endtime="20190121 15:27:03.086" status="PASS" starttime="20190121 15:27:03.067"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:03.089" status="PASS" starttime="20190121 15:27:02.555"></status>
</kw>
<status endtime="20190121 15:27:03.090" status="PASS" starttime="20190121 15:26:36.377"></status>
</kw>
<msg timestamp="20190121 15:27:03.092" level="INFO">${STATUS} = True</msg>
<status endtime="20190121 15:27:03.093" status="PASS" starttime="20190121 15:26:36.354"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DUT ready status: ${STATUS}</arg>
</arguments>
<status endtime="20190121 15:27:03.138" status="PASS" starttime="20190121 15:27:03.096"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3 seconds</arg>
</arguments>
<msg timestamp="20190121 15:27:06.153" level="INFO">Slept 3 seconds</msg>
<status endtime="20190121 15:27:06.156" status="PASS" starttime="20190121 15:27:03.141"></status>
</kw>
<msg timestamp="20190121 15:27:06.160" level="INFO">${status} = True</msg>
<status endtime="20190121 15:27:06.160" status="PASS" starttime="20190121 15:26:36.305"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${status}</arg>
<arg>Device does not exist</arg>
</arguments>
<status endtime="20190121 15:27:06.168" status="PASS" starttime="20190121 15:27:06.163"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Setup ssh"</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:06.174" level="INFO">"Setup ssh"</msg>
<status endtime="20190121 15:27:06.177" status="PASS" starttime="20190121 15:27:06.171"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>2 min</arg>
<arg>2x</arg>
<arg>open_ssh_connection</arg>
<arg>${DUT}</arg>
<arg>&amp;{SSH}</arg>
</arguments>
<kw name="Open Ssh Connection" library="lairdcvs.testlibrary.TestLibrary">
<doc>Connect to DUT</doc>
<arguments>
<arg>${DUT}</arg>
<arg>&amp;{SSH}</arg>
</arguments>
<msg timestamp="20190121 15:27:06.194" level="INFO">Creating None ssh connection to root:toor@192.168.1.101:22</msg>
<status endtime="20190121 15:27:08.818" status="PASS" starttime="20190121 15:27:06.187"></status>
</kw>
<status endtime="20190121 15:27:08.820" status="PASS" starttime="20190121 15:27:06.180"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Setup ssh done!"</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:08.830" level="INFO">"Setup ssh done!"</msg>
<status endtime="20190121 15:27:08.833" status="PASS" starttime="20190121 15:27:08.823"></status>
</kw>
<status endtime="20190121 15:27:08.835" status="PASS" starttime="20190121 15:26:29.792"></status>
</kw>
<kw name="cansend_500k">
<doc>Can 3 send message test with baudrate 500k</doc>
<kw name="cansend_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${500000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Start test with ${CAN_CH} and bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:08.865" level="INFO">Start test with can2 and bitrate: 500000</msg>
<status endtime="20190121 15:27:08.868" status="PASS" starttime="20190121 15:27:08.856"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:27:08.887" status="PASS" starttime="20190121 15:27:08.880"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:08.898" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:27:08.926" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:09.001" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:09.005" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:09.006" status="PASS" starttime="20190121 15:27:08.890"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:09.018" status="PASS" starttime="20190121 15:27:09.010"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:09.029" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 500000</msg>
<msg timestamp="20190121 15:27:09.058" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:09.115" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:09.118" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:09.119" status="PASS" starttime="20190121 15:27:09.022"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:09.132" status="PASS" starttime="20190121 15:27:09.123"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:09.142" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:27:09.170" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:09.267" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:09.270" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:09.271" status="PASS" starttime="20190121 15:27:09.135"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:09.297" status="PASS" starttime="20190121 15:27:09.278"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:27:09.300" status="PASS" starttime="20190121 15:27:08.870"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status endtime="20190121 15:27:09.318" status="PASS" starttime="20190121 15:27:09.312"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:09.327" level="INFO">Sending command to DUT ip link set can2 down</msg>
<msg timestamp="20190121 15:27:09.428" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:09.431" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:09.431" status="PASS" starttime="20190121 15:27:09.321"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:09.947" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:09.949" status="PASS" starttime="20190121 15:27:09.434"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:09.958" level="INFO">Sending command to DUT ip link set can2 type can bitrate 500000</msg>
<msg timestamp="20190121 15:27:09.990" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:09.992" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:09.993" status="PASS" starttime="20190121 15:27:09.952"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:10.507" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:10.509" status="PASS" starttime="20190121 15:27:09.996"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:10.518" level="INFO">Sending command to DUT ip link set can2 up</msg>
<msg timestamp="20190121 15:27:10.602" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:10.607" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:10.608" status="PASS" starttime="20190121 15:27:10.512"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:11.146" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:11.148" status="PASS" starttime="20190121 15:27:10.611"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:11.151" status="PASS" starttime="20190121 15:27:09.302"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status endtime="20190121 15:27:11.305" status="PASS" starttime="20190121 15:27:11.154"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:11.362" status="PASS" starttime="20190121 15:27:11.316"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Create socket .. done</arg>
</arguments>
<status endtime="20190121 15:27:11.371" status="PASS" starttime="20190121 15:27:11.366"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:11.567" status="PASS" starttime="20190121 15:27:11.375"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>start sniffing</arg>
</arguments>
<status endtime="20190121 15:27:11.638" status="PASS" starttime="20190121 15:27:11.581"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:12.178" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:12.181" status="PASS" starttime="20190121 15:27:11.645"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message: ${CAN_FULLMSG}</arg>
</arguments>
<status endtime="20190121 15:27:12.200" status="PASS" starttime="20190121 15:27:12.189"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg timestamp="20190121 15:27:12.222" level="INFO">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:12.295" level="INFO">Returning data (, )</msg>
<status endtime="20190121 15:27:12.315" status="PASS" starttime="20190121 15:27:12.203"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg timestamp="20190121 15:27:12.339" level="INFO">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:12.417" level="INFO">Returning data (, )</msg>
<status endtime="20190121 15:27:12.419" status="PASS" starttime="20190121 15:27:12.322"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg timestamp="20190121 15:27:12.462" level="INFO">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:12.586" level="INFO">Returning data (, )</msg>
<status endtime="20190121 15:27:12.597" status="PASS" starttime="20190121 15:27:12.434"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:13.141" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:13.143" status="PASS" starttime="20190121 15:27:12.600"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg timestamp="20190121 15:27:13.207" level="INFO">${res_list} = [{'timestamp': '21-01-2019 - 15:27:12.302806', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:12.427315', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '...</msg>
<status endtime="20190121 15:27:13.209" status="PASS" starttime="20190121 15:27:13.150"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:13.218" level="INFO">[{'timestamp': '21-01-2019 - 15:27:12.302806', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:12.427315', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:12.592862', 'payload': '11223344556677BB', 'id': '0x1a'}]</msg>
<status endtime="20190121 15:27:13.221" status="PASS" starttime="20190121 15:27:13.212"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg timestamp="20190121 15:27:13.236" level="INFO">Length is 3</msg>
<msg timestamp="20190121 15:27:13.258" level="INFO">${MSG_LENGTH} = 3</msg>
<status endtime="20190121 15:27:13.259" status="PASS" starttime="20190121 15:27:13.224"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:13.297" status="PASS" starttime="20190121 15:27:13.280"></status>
</kw>
<status endtime="20190121 15:27:13.298" status="PASS" starttime="20190121 15:27:13.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: Expected CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:13.324" level="INFO">Length is 3</msg>
<msg timestamp="20190121 15:27:13.327" level="INFO">${count} = 3</msg>
<status endtime="20190121 15:27:13.327" status="PASS" starttime="20190121 15:27:13.319"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:13.337" status="PASS" starttime="20190121 15:27:13.331"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:13.348" level="INFO">${msgcount} = 0</msg>
<status endtime="20190121 15:27:13.349" status="PASS" starttime="20190121 15:27:13.340"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:12.302806', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:13.363" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:13.363" status="PASS" starttime="20190121 15:27:13.356"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:13.374" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:13.375" status="PASS" starttime="20190121 15:27:13.366"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:13.386" level="INFO">${msgcount} = 1</msg>
<status endtime="20190121 15:27:13.386" status="PASS" starttime="20190121 15:27:13.378"></status>
</kw>
<status endtime="20190121 15:27:13.387" status="PASS" starttime="20190121 15:27:13.353"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:12.427315', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:13.398" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:13.399" status="PASS" starttime="20190121 15:27:13.392"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:13.409" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:13.410" status="PASS" starttime="20190121 15:27:13.402"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:13.420" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:13.421" status="PASS" starttime="20190121 15:27:13.413"></status>
</kw>
<status endtime="20190121 15:27:13.422" status="PASS" starttime="20190121 15:27:13.389"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:12.592862', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:13.434" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:13.434" status="PASS" starttime="20190121 15:27:13.427"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:13.445" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:13.446" status="PASS" starttime="20190121 15:27:13.437"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:13.456" level="INFO">${msgcount} = 3</msg>
<status endtime="20190121 15:27:13.457" status="PASS" starttime="20190121 15:27:13.449"></status>
</kw>
<status endtime="20190121 15:27:13.458" status="PASS" starttime="20190121 15:27:13.424"></status>
</kw>
<status endtime="20190121 15:27:13.458" status="PASS" starttime="20190121 15:27:13.350"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:13.468" status="PASS" starttime="20190121 15:27:13.461"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status endtime="20190121 15:27:13.478" status="PASS" starttime="20190121 15:27:13.471"></status>
</kw>
<status endtime="20190121 15:27:13.482" status="PASS" starttime="20190121 15:27:13.309"></status>
</kw>
<status endtime="20190121 15:27:13.483" status="PASS" starttime="20190121 15:27:13.301"></status>
</kw>
<timeout value="10 seconds"></timeout>
<status endtime="20190121 15:27:13.485" status="PASS" starttime="20190121 15:27:08.846"></status>
</kw>
<status endtime="20190121 15:27:13.488" status="PASS" starttime="20190121 15:27:08.840"></status>
</kw>
<kw name="can_loopback_500k">
<doc>Can 3 loopback test with baudrate 500k</doc>
<kw name="can_loopback_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${500000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Can channel loopback: ${CAN_CH} with bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:13.508" level="INFO">Can channel loopback: can2 with bitrate: 500000</msg>
<status endtime="20190121 15:27:13.511" status="PASS" starttime="20190121 15:27:13.503"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:27:13.536" status="PASS" starttime="20190121 15:27:13.529"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:13.551" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:27:13.582" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:13.689" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:13.693" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:13.694" status="PASS" starttime="20190121 15:27:13.542"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:13.707" status="PASS" starttime="20190121 15:27:13.697"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:13.717" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 500000</msg>
<msg timestamp="20190121 15:27:13.745" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:13.803" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:13.806" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:13.807" status="PASS" starttime="20190121 15:27:13.710"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:13.819" status="PASS" starttime="20190121 15:27:13.811"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:13.829" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:27:13.857" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:13.965" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:13.968" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:13.970" status="PASS" starttime="20190121 15:27:13.822"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:13.984" status="PASS" starttime="20190121 15:27:13.975"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:27:13.986" status="PASS" starttime="20190121 15:27:13.515"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status endtime="20190121 15:27:14.006" status="PASS" starttime="20190121 15:27:13.999"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:14.015" level="INFO">Sending command to DUT ip link set can2 down</msg>
<msg timestamp="20190121 15:27:14.072" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:14.074" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:14.075" status="PASS" starttime="20190121 15:27:14.009"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:14.590" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:14.592" status="PASS" starttime="20190121 15:27:14.078"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:14.601" level="INFO">Sending command to DUT ip link set can2 type can bitrate 500000</msg>
<msg timestamp="20190121 15:27:14.655" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:14.658" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:14.658" status="PASS" starttime="20190121 15:27:14.595"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:15.171" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:15.174" status="PASS" starttime="20190121 15:27:14.661"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:15.183" level="INFO">Sending command to DUT ip link set can2 up</msg>
<msg timestamp="20190121 15:27:15.232" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:15.234" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:15.235" status="PASS" starttime="20190121 15:27:15.177"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:15.750" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:15.752" status="PASS" starttime="20190121 15:27:15.238"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:15.754" status="PASS" starttime="20190121 15:27:13.989"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:15.763" level="INFO">Starting process:
ip -details link show can2</msg>
<msg timestamp="20190121 15:27:15.791" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:15.804" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:15.806" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:15.807" status="PASS" starttime="20190121 15:27:15.757"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>TNTBOX Setting: \n${ret.stdout}\n</arg>
</arguments>
<status endtime="20190121 15:27:15.820" status="PASS" starttime="20190121 15:27:15.811"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:15.828" level="INFO">Sending command to DUT ip -details link show can2</msg>
<msg timestamp="20190121 15:27:15.880" level="INFO">Returning data (5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  	  bitrate 500000 sample-point 0.875  	  tq 125 prop-seg 6 phase-seg1 7 phase-seg2 2 sjw 1 	  can-phonet: tseg1 4..16 tseg2 2..8 sjw 1..4 brp 1..256 brp-inc 1 	  clock 64000000numtxqueues 1 numrxqueues 1, )</msg>
<msg timestamp="20190121 15:27:15.882" level="INFO">${ret} = ('5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  \t  bitrate 500000 sample-poi...</msg>
<status endtime="20190121 15:27:15.883" status="PASS" starttime="20190121 15:27:15.823"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DEVICE Setting: \n${ret}\n</arg>
</arguments>
<status endtime="20190121 15:27:15.900" status="PASS" starttime="20190121 15:27:15.886"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:15.906" level="INFO">Sending command to DUT pkill candump</msg>
<msg timestamp="20190121 15:27:16.017" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:16.020" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:16.021" status="PASS" starttime="20190121 15:27:15.903"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Cancel candump before start it again</arg>
</arguments>
<status endtime="20190121 15:27:16.035" status="PASS" starttime="20190121 15:27:16.024"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190121 15:27:17.042" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:27:17.045" status="PASS" starttime="20190121 15:27:16.038"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>nohup candump -t a -D -B ${CAN_CH} ${CAN_CH} &gt; ${CANDUMP_FILE} &amp;</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:17.054" level="INFO">Sending command to DUT nohup candump -t a -D -B can2 can2 &gt; /root/candump.txt &amp;</msg>
<msg timestamp="20190121 15:27:17.094" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:17.097" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:17.098" status="PASS" starttime="20190121 15:27:17.048"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Start candump on the NAD: ${ret}</arg>
</arguments>
<status endtime="20190121 15:27:17.116" status="PASS" starttime="20190121 15:27:17.110"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:17.622" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:17.625" status="PASS" starttime="20190121 15:27:17.119"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:17.633" level="INFO">Sending command to DUT ps aux | grep candump</msg>
<msg timestamp="20190121 15:27:17.703" level="INFO">Returning data (535 root      0:00 candump -t a -D -B can2 can2   542 root      0:00 sh -c ps aux | grep candump   544 root      0:00 grep candump, )</msg>
<msg timestamp="20190121 15:27:17.705" level="INFO">${ret} = ('535 root      0:00 candump -t a -D -B can2 can2   542 root      0:00 sh -c ps aux | grep candump   544 root      0:00 grep candump', '')</msg>
<status endtime="20190121 15:27:17.706" status="PASS" starttime="20190121 15:27:17.627"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: \n${ret}\n</arg>
</arguments>
<status endtime="20190121 15:27:17.722" status="PASS" starttime="20190121 15:27:17.709"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status endtime="20190121 15:27:17.872" status="PASS" starttime="20190121 15:27:17.725"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:17.953" status="PASS" starttime="20190121 15:27:17.890"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:18.065" status="PASS" starttime="20190121 15:27:17.961"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:18.619" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:18.621" status="PASS" starttime="20190121 15:27:18.074"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG_EXT}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:18.647" level="INFO">Starting process:
cansend can2 18EF7777#FFEEEEDDFFAA1122</msg>
<msg timestamp="20190121 15:27:18.724" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:18.755" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:18.758" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:18.759" status="PASS" starttime="20190121 15:27:18.624"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:18.806" status="PASS" starttime="20190121 15:27:18.772"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:18.844" level="INFO">Starting process:
cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:18.930" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:18.959" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:18.962" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:18.963" status="PASS" starttime="20190121 15:27:18.817"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:19.019" status="PASS" starttime="20190121 15:27:18.985"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cat ${CANDUMP_FILE}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:19.036" level="INFO">Sending command to DUT cat /root/candump.txt</msg>
<msg timestamp="20190121 15:27:19.082" level="INFO">Returning data ((1548080904.016190)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548080904.223556)  can2       01A   [8]  11 22 33 44 55 66 77 BB, )</msg>
<msg timestamp="20190121 15:27:19.089" level="INFO">${ret} = ('(1548080904.016190)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548080904.223556)  can2       01A   [8]  11 22 33 44 55 66 77 BB', '')</msg>
<status endtime="20190121 15:27:19.090" status="PASS" starttime="20190121 15:27:19.022"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get CANmsg list: \n${ret}\n</arg>
</arguments>
<status endtime="20190121 15:27:19.124" status="PASS" starttime="20190121 15:27:19.113"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:19.639" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:19.641" status="PASS" starttime="20190121 15:27:19.127"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg timestamp="20190121 15:27:19.730" level="INFO">${res_list} = [{'timestamp': '21-01-2019 - 15:27:18.979692', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'timestamp': '21-01-2019 - 15:27:18.997932', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'t...</msg>
<status endtime="20190121 15:27:19.731" status="PASS" starttime="20190121 15:27:19.644"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:19.748" level="INFO">[{'timestamp': '21-01-2019 - 15:27:18.979692', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'timestamp': '21-01-2019 - 15:27:18.997932', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'timestamp': '21-01-2019 - 15:27:19.010751', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:19.025412', 'payload': '11223344556677BB', 'id': '0x1a'}]</msg>
<status endtime="20190121 15:27:19.755" status="PASS" starttime="20190121 15:27:19.743"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg timestamp="20190121 15:27:19.770" level="INFO">Length is 4</msg>
<msg timestamp="20190121 15:27:19.772" level="INFO">${MSG_LENGTH} = 4</msg>
<status endtime="20190121 15:27:19.774" status="PASS" starttime="20190121 15:27:19.758"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:19.789" status="PASS" starttime="20190121 15:27:19.784"></status>
</kw>
<status endtime="20190121 15:27:19.792" status="PASS" starttime="20190121 15:27:19.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:19.824" level="INFO">Length is 4</msg>
<msg timestamp="20190121 15:27:19.826" level="INFO">${count} = 4</msg>
<status endtime="20190121 15:27:19.827" status="PASS" starttime="20190121 15:27:19.820"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:19.850" status="PASS" starttime="20190121 15:27:19.835"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:19.867" level="INFO">${msgcount} = 0</msg>
<status endtime="20190121 15:27:19.868" status="PASS" starttime="20190121 15:27:19.857"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:18.979692', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:19.897" level="INFO">${payload} = FFEEEEDDFFAA1122</msg>
<status endtime="20190121 15:27:19.898" status="PASS" starttime="20190121 15:27:19.883"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:19.915" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:19.916" status="PASS" starttime="20190121 15:27:19.907"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:19.937" level="INFO">${msgcount} = 1</msg>
<status endtime="20190121 15:27:19.938" status="PASS" starttime="20190121 15:27:19.919"></status>
</kw>
<status endtime="20190121 15:27:19.938" status="PASS" starttime="20190121 15:27:19.880"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:18.997932', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:19.956" level="INFO">${payload} = FFEEEEDDFFAA1122</msg>
<status endtime="20190121 15:27:19.961" status="PASS" starttime="20190121 15:27:19.947"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:19.979" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:19.985" status="PASS" starttime="20190121 15:27:19.964"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:20.002" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:20.003" status="PASS" starttime="20190121 15:27:19.987"></status>
</kw>
<status endtime="20190121 15:27:20.004" status="PASS" starttime="20190121 15:27:19.940"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:19.010751', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:20.025" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:20.027" status="PASS" starttime="20190121 15:27:20.016"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:20.050" level="INFO">${count} = 0</msg>
<status endtime="20190121 15:27:20.051" status="PASS" starttime="20190121 15:27:20.034"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:20.068" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:20.073" status="PASS" starttime="20190121 15:27:20.058"></status>
</kw>
<status endtime="20190121 15:27:20.074" status="PASS" starttime="20190121 15:27:20.009"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:19.025412', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:20.091" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:20.096" status="PASS" starttime="20190121 15:27:20.082"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:20.127" level="INFO">${count} = 0</msg>
<status endtime="20190121 15:27:20.127" status="PASS" starttime="20190121 15:27:20.100"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:20.142" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:20.143" status="PASS" starttime="20190121 15:27:20.135"></status>
</kw>
<status endtime="20190121 15:27:20.143" status="PASS" starttime="20190121 15:27:20.075"></status>
</kw>
<status endtime="20190121 15:27:20.144" status="PASS" starttime="20190121 15:27:19.873"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:20.152" status="PASS" starttime="20190121 15:27:20.147"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status endtime="20190121 15:27:20.161" status="PASS" starttime="20190121 15:27:20.155"></status>
</kw>
<status endtime="20190121 15:27:20.165" status="PASS" starttime="20190121 15:27:19.805"></status>
</kw>
<status endtime="20190121 15:27:20.166" status="PASS" starttime="20190121 15:27:19.797"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:20.173" level="INFO">Sending command to DUT ps aux | grep candump</msg>
<msg timestamp="20190121 15:27:20.232" level="INFO">Returning data (535 root      0:00 candump -t a -D -B can2 can2   555 root      0:00 sh -c ps aux | grep candump   557 root      0:00 grep candump, )</msg>
<msg timestamp="20190121 15:27:20.235" level="INFO">${ret} = ('535 root      0:00 candump -t a -D -B can2 can2   555 root      0:00 sh -c ps aux | grep candump   557 root      0:00 grep candump', '')</msg>
<status endtime="20190121 15:27:20.236" status="PASS" starttime="20190121 15:27:20.169"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: ${ret}</arg>
</arguments>
<status endtime="20190121 15:27:20.251" status="PASS" starttime="20190121 15:27:20.239"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:20.258" level="INFO">Sending command to DUT pkill candump</msg>
<msg timestamp="20190121 15:27:20.340" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:20.342" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:20.343" status="PASS" starttime="20190121 15:27:20.254"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190121 15:27:21.362" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:27:21.364" status="PASS" starttime="20190121 15:27:20.352"></status>
</kw>
<status endtime="20190121 15:27:21.368" status="PASS" starttime="20190121 15:27:13.495"></status>
</kw>
<status endtime="20190121 15:27:21.370" status="PASS" starttime="20190121 15:27:13.490"></status>
</kw>
<kw name="cansend_250k">
<doc>Can 3 send message test with baudrate 250k</doc>
<kw name="cansend_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Start test with ${CAN_CH} and bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:21.394" level="INFO">Start test with can2 and bitrate: 250000</msg>
<status endtime="20190121 15:27:21.396" status="PASS" starttime="20190121 15:27:21.387"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:27:21.421" status="PASS" starttime="20190121 15:27:21.410"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:21.448" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:27:21.506" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:21.579" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:21.582" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:21.583" status="PASS" starttime="20190121 15:27:21.428"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:21.596" status="PASS" starttime="20190121 15:27:21.587"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:21.606" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg timestamp="20190121 15:27:21.634" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:21.705" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:21.708" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:21.709" status="PASS" starttime="20190121 15:27:21.599"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:21.727" status="PASS" starttime="20190121 15:27:21.718"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:21.737" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:27:21.766" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:21.851" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:21.854" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:21.855" status="PASS" starttime="20190121 15:27:21.730"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:21.869" status="PASS" starttime="20190121 15:27:21.859"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:27:21.871" status="PASS" starttime="20190121 15:27:21.399"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status endtime="20190121 15:27:21.890" status="PASS" starttime="20190121 15:27:21.884"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:21.899" level="INFO">Sending command to DUT ip link set can2 down</msg>
<msg timestamp="20190121 15:27:21.961" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:21.963" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:21.964" status="PASS" starttime="20190121 15:27:21.893"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:22.479" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:22.482" status="PASS" starttime="20190121 15:27:21.967"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:22.491" level="INFO">Sending command to DUT ip link set can2 type can bitrate 250000</msg>
<msg timestamp="20190121 15:27:22.541" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:22.543" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:22.544" status="PASS" starttime="20190121 15:27:22.485"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:23.059" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:23.062" status="PASS" starttime="20190121 15:27:22.547"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:23.071" level="INFO">Sending command to DUT ip link set can2 up</msg>
<msg timestamp="20190121 15:27:23.117" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:23.120" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:23.121" status="PASS" starttime="20190121 15:27:23.065"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:23.636" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:23.638" status="PASS" starttime="20190121 15:27:23.124"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:23.640" status="PASS" starttime="20190121 15:27:21.874"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status endtime="20190121 15:27:23.801" status="PASS" starttime="20190121 15:27:23.643"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:23.858" status="PASS" starttime="20190121 15:27:23.804"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Create socket .. done</arg>
</arguments>
<status endtime="20190121 15:27:23.867" status="PASS" starttime="20190121 15:27:23.862"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:23.934" status="PASS" starttime="20190121 15:27:23.871"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>start sniffing</arg>
</arguments>
<status endtime="20190121 15:27:23.961" status="PASS" starttime="20190121 15:27:23.949"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:24.488" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:24.493" status="PASS" starttime="20190121 15:27:23.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message: ${CAN_FULLMSG}</arg>
</arguments>
<status endtime="20190121 15:27:24.546" status="PASS" starttime="20190121 15:27:24.496"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg timestamp="20190121 15:27:24.585" level="INFO">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:24.688" level="INFO">Returning data (, )</msg>
<status endtime="20190121 15:27:24.697" status="PASS" starttime="20190121 15:27:24.553"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg timestamp="20190121 15:27:24.766" level="INFO">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:24.878" level="INFO">Returning data (, )</msg>
<status endtime="20190121 15:27:24.880" status="PASS" starttime="20190121 15:27:24.728"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg timestamp="20190121 15:27:24.918" level="INFO">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:25.050" level="INFO">Returning data (, )</msg>
<status endtime="20190121 15:27:25.061" status="PASS" starttime="20190121 15:27:24.883"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:25.606" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:25.608" status="PASS" starttime="20190121 15:27:25.064"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg timestamp="20190121 15:27:25.668" level="INFO">${res_list} = [{'timestamp': '21-01-2019 - 15:27:24.713400', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:24.871293', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '...</msg>
<status endtime="20190121 15:27:25.670" status="PASS" starttime="20190121 15:27:25.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:25.678" level="INFO">[{'timestamp': '21-01-2019 - 15:27:24.713400', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:24.871293', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:25.053720', 'payload': '11223344556677BB', 'id': '0x1a'}]</msg>
<status endtime="20190121 15:27:25.681" status="PASS" starttime="20190121 15:27:25.673"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg timestamp="20190121 15:27:25.689" level="INFO">Length is 3</msg>
<msg timestamp="20190121 15:27:25.691" level="INFO">${MSG_LENGTH} = 3</msg>
<status endtime="20190121 15:27:25.692" status="PASS" starttime="20190121 15:27:25.684"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:25.709" status="PASS" starttime="20190121 15:27:25.702"></status>
</kw>
<status endtime="20190121 15:27:25.710" status="PASS" starttime="20190121 15:27:25.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: Expected CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:25.735" level="INFO">Length is 3</msg>
<msg timestamp="20190121 15:27:25.737" level="INFO">${count} = 3</msg>
<status endtime="20190121 15:27:25.738" status="PASS" starttime="20190121 15:27:25.730"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:25.747" status="PASS" starttime="20190121 15:27:25.741"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:25.756" level="INFO">${msgcount} = 0</msg>
<status endtime="20190121 15:27:25.757" status="PASS" starttime="20190121 15:27:25.750"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:24.713400', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:25.770" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:25.771" status="PASS" starttime="20190121 15:27:25.764"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:25.782" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:25.782" status="PASS" starttime="20190121 15:27:25.774"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:25.793" level="INFO">${msgcount} = 1</msg>
<status endtime="20190121 15:27:25.794" status="PASS" starttime="20190121 15:27:25.785"></status>
</kw>
<status endtime="20190121 15:27:25.794" status="PASS" starttime="20190121 15:27:25.761"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:24.871293', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:25.806" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:25.807" status="PASS" starttime="20190121 15:27:25.800"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:25.817" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:25.818" status="PASS" starttime="20190121 15:27:25.810"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:25.829" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:25.830" status="PASS" starttime="20190121 15:27:25.821"></status>
</kw>
<status endtime="20190121 15:27:25.831" status="PASS" starttime="20190121 15:27:25.796"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:25.053720', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:25.841" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:25.842" status="PASS" starttime="20190121 15:27:25.835"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:25.852" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:25.853" status="PASS" starttime="20190121 15:27:25.845"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:25.863" level="INFO">${msgcount} = 3</msg>
<status endtime="20190121 15:27:25.864" status="PASS" starttime="20190121 15:27:25.856"></status>
</kw>
<status endtime="20190121 15:27:25.865" status="PASS" starttime="20190121 15:27:25.832"></status>
</kw>
<status endtime="20190121 15:27:25.866" status="PASS" starttime="20190121 15:27:25.758"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:25.875" status="PASS" starttime="20190121 15:27:25.868"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status endtime="20190121 15:27:25.885" status="PASS" starttime="20190121 15:27:25.878"></status>
</kw>
<status endtime="20190121 15:27:25.888" status="PASS" starttime="20190121 15:27:25.721"></status>
</kw>
<status endtime="20190121 15:27:25.890" status="PASS" starttime="20190121 15:27:25.713"></status>
</kw>
<timeout value="10 seconds"></timeout>
<status endtime="20190121 15:27:25.892" status="PASS" starttime="20190121 15:27:21.378"></status>
</kw>
<status endtime="20190121 15:27:25.895" status="PASS" starttime="20190121 15:27:21.372"></status>
</kw>
<kw name="can_loopback_250k">
<doc>Can 3 loopback test with baudrate 250k</doc>
<kw name="can_loopback_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Can channel loopback: ${CAN_CH} with bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:25.915" level="INFO">Can channel loopback: can2 with bitrate: 250000</msg>
<status endtime="20190121 15:27:25.918" status="PASS" starttime="20190121 15:27:25.910"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:27:25.937" status="PASS" starttime="20190121 15:27:25.930"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:25.950" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:27:25.979" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:26.072" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:26.075" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:26.076" status="PASS" starttime="20190121 15:27:25.941"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:26.089" status="PASS" starttime="20190121 15:27:26.080"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:26.099" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg timestamp="20190121 15:27:26.127" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:26.185" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:26.188" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:26.189" status="PASS" starttime="20190121 15:27:26.092"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:26.202" status="PASS" starttime="20190121 15:27:26.193"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:26.211" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:27:26.240" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:26.338" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:26.341" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:26.342" status="PASS" starttime="20190121 15:27:26.205"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:26.354" status="PASS" starttime="20190121 15:27:26.346"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:27:26.357" status="PASS" starttime="20190121 15:27:25.920"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status endtime="20190121 15:27:26.376" status="PASS" starttime="20190121 15:27:26.369"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:26.385" level="INFO">Sending command to DUT ip link set can2 down</msg>
<msg timestamp="20190121 15:27:26.425" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:26.434" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:26.435" status="PASS" starttime="20190121 15:27:26.379"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:26.948" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:26.950" status="PASS" starttime="20190121 15:27:26.443"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:26.960" level="INFO">Sending command to DUT ip link set can2 type can bitrate 250000</msg>
<msg timestamp="20190121 15:27:27.010" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:27.013" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:27.014" status="PASS" starttime="20190121 15:27:26.953"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:27.527" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:27.529" status="PASS" starttime="20190121 15:27:27.017"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:27.538" level="INFO">Sending command to DUT ip link set can2 up</msg>
<msg timestamp="20190121 15:27:27.591" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:27.593" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:27.594" status="PASS" starttime="20190121 15:27:27.532"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:28.107" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:28.110" status="PASS" starttime="20190121 15:27:27.597"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:28.112" status="PASS" starttime="20190121 15:27:26.359"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:28.121" level="INFO">Starting process:
ip -details link show can2</msg>
<msg timestamp="20190121 15:27:28.149" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:28.161" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:28.164" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:28.166" status="PASS" starttime="20190121 15:27:28.116"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>TNTBOX Setting: \n${ret.stdout}\n</arg>
</arguments>
<status endtime="20190121 15:27:28.178" status="PASS" starttime="20190121 15:27:28.169"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:28.186" level="INFO">Sending command to DUT ip -details link show can2</msg>
<msg timestamp="20190121 15:27:28.237" level="INFO">Returning data (5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  	  bitrate 250000 sample-point 0.875  	  tq 250 prop-seg 6 phase-seg1 7 phase-seg2 2 sjw 1 	  can-phonet: tseg1 4..16 tseg2 2..8 sjw 1..4 brp 1..256 brp-inc 1 	  clock 64000000numtxqueues 1 numrxqueues 1, )</msg>
<msg timestamp="20190121 15:27:28.240" level="INFO">${ret} = ('5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  \t  bitrate 250000 sample-poi...</msg>
<status endtime="20190121 15:27:28.241" status="PASS" starttime="20190121 15:27:28.181"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DEVICE Setting: \n${ret}\n</arg>
</arguments>
<status endtime="20190121 15:27:28.257" status="PASS" starttime="20190121 15:27:28.244"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:28.264" level="INFO">Sending command to DUT pkill candump</msg>
<msg timestamp="20190121 15:27:28.366" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:28.368" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:28.369" status="PASS" starttime="20190121 15:27:28.260"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Cancel candump before start it again</arg>
</arguments>
<status endtime="20190121 15:27:28.381" status="PASS" starttime="20190121 15:27:28.372"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190121 15:27:29.388" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:27:29.390" status="PASS" starttime="20190121 15:27:28.384"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>nohup candump -t a -D -B ${CAN_CH} ${CAN_CH} &gt; ${CANDUMP_FILE} &amp;</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:29.399" level="INFO">Sending command to DUT nohup candump -t a -D -B can2 can2 &gt; /root/candump.txt &amp;</msg>
<msg timestamp="20190121 15:27:29.442" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:29.444" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:29.445" status="PASS" starttime="20190121 15:27:29.393"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Start candump on the NAD: ${ret}</arg>
</arguments>
<status endtime="20190121 15:27:29.459" status="PASS" starttime="20190121 15:27:29.448"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:29.965" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:29.967" status="PASS" starttime="20190121 15:27:29.462"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:29.974" level="INFO">Sending command to DUT ps aux | grep candump</msg>
<msg timestamp="20190121 15:27:30.037" level="INFO">Returning data (580 root      0:00 candump -t a -D -B can2 can2   581 root      0:00 sh -c ps aux | grep candump   583 root      0:00 grep candump, )</msg>
<msg timestamp="20190121 15:27:30.048" level="INFO">${ret} = ('580 root      0:00 candump -t a -D -B can2 can2   581 root      0:00 sh -c ps aux | grep candump   583 root      0:00 grep candump', '')</msg>
<status endtime="20190121 15:27:30.049" status="PASS" starttime="20190121 15:27:29.970"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: \n${ret}\n</arg>
</arguments>
<status endtime="20190121 15:27:30.060" status="PASS" starttime="20190121 15:27:30.052"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status endtime="20190121 15:27:30.214" status="PASS" starttime="20190121 15:27:30.063"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:30.270" status="PASS" starttime="20190121 15:27:30.218"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:30.323" status="PASS" starttime="20190121 15:27:30.274"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:30.839" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:30.840" status="PASS" starttime="20190121 15:27:30.331"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG_EXT}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:30.858" level="INFO">Starting process:
cansend can2 18EF7777#FFEEEEDDFFAA1122</msg>
<msg timestamp="20190121 15:27:30.917" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:30.938" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:30.942" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:30.943" status="PASS" starttime="20190121 15:27:30.843"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:30.974" status="PASS" starttime="20190121 15:27:30.953"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:31.005" level="INFO">Starting process:
cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:31.060" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:31.083" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:31.086" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:31.087" status="PASS" starttime="20190121 15:27:30.978"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:31.117" status="PASS" starttime="20190121 15:27:31.095"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cat ${CANDUMP_FILE}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:31.134" level="INFO">Sending command to DUT cat /root/candump.txt</msg>
<msg timestamp="20190121 15:27:31.195" level="INFO">Returning data ((1548084450.918492)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548084451.061081)  can2       01A   [8]  11 22 33 44 55 66 77 BB, )</msg>
<msg timestamp="20190121 15:27:31.202" level="INFO">${ret} = ('(1548084450.918492)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548084451.061081)  can2       01A   [8]  11 22 33 44 55 66 77 BB', '')</msg>
<status endtime="20190121 15:27:31.202" status="PASS" starttime="20190121 15:27:31.125"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get CANmsg list: \n${ret}\n</arg>
</arguments>
<status endtime="20190121 15:27:31.236" status="PASS" starttime="20190121 15:27:31.206"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:31.747" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:31.749" status="PASS" starttime="20190121 15:27:31.239"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg timestamp="20190121 15:27:31.810" level="INFO">${res_list} = [{'timestamp': '21-01-2019 - 15:27:30.957715', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'timestamp': '21-01-2019 - 15:27:30.968379', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'t...</msg>
<status endtime="20190121 15:27:31.811" status="PASS" starttime="20190121 15:27:31.752"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:31.819" level="INFO">[{'timestamp': '21-01-2019 - 15:27:30.957715', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'timestamp': '21-01-2019 - 15:27:30.968379', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'timestamp': '21-01-2019 - 15:27:31.089518', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:31.099062', 'payload': '11223344556677BB', 'id': '0x1a'}]</msg>
<status endtime="20190121 15:27:31.822" status="PASS" starttime="20190121 15:27:31.815"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg timestamp="20190121 15:27:31.829" level="INFO">Length is 4</msg>
<msg timestamp="20190121 15:27:31.831" level="INFO">${MSG_LENGTH} = 4</msg>
<status endtime="20190121 15:27:31.832" status="PASS" starttime="20190121 15:27:31.825"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:31.847" status="PASS" starttime="20190121 15:27:31.841"></status>
</kw>
<status endtime="20190121 15:27:31.848" status="PASS" starttime="20190121 15:27:31.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:31.871" level="INFO">Length is 4</msg>
<msg timestamp="20190121 15:27:31.874" level="INFO">${count} = 4</msg>
<status endtime="20190121 15:27:31.874" status="PASS" starttime="20190121 15:27:31.867"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:31.884" status="PASS" starttime="20190121 15:27:31.878"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:31.892" level="INFO">${msgcount} = 0</msg>
<status endtime="20190121 15:27:31.893" status="PASS" starttime="20190121 15:27:31.887"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:30.957715', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:31.905" level="INFO">${payload} = FFEEEEDDFFAA1122</msg>
<status endtime="20190121 15:27:31.906" status="PASS" starttime="20190121 15:27:31.900"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:31.917" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:31.918" status="PASS" starttime="20190121 15:27:31.909"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:31.927" level="INFO">${msgcount} = 1</msg>
<status endtime="20190121 15:27:31.927" status="PASS" starttime="20190121 15:27:31.921"></status>
</kw>
<status endtime="20190121 15:27:31.928" status="PASS" starttime="20190121 15:27:31.897"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:30.968379', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:31.938" level="INFO">${payload} = FFEEEEDDFFAA1122</msg>
<status endtime="20190121 15:27:31.938" status="PASS" starttime="20190121 15:27:31.933"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:31.953" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:31.953" status="PASS" starttime="20190121 15:27:31.941"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:31.963" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:31.963" status="PASS" starttime="20190121 15:27:31.956"></status>
</kw>
<status endtime="20190121 15:27:31.964" status="PASS" starttime="20190121 15:27:31.930"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:31.089518', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:31.974" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:31.974" status="PASS" starttime="20190121 15:27:31.969"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:31.985" level="INFO">${count} = 0</msg>
<status endtime="20190121 15:27:31.986" status="PASS" starttime="20190121 15:27:31.977"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:31.994" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:31.995" status="PASS" starttime="20190121 15:27:31.988"></status>
</kw>
<status endtime="20190121 15:27:31.996" status="PASS" starttime="20190121 15:27:31.966"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:31.099062', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:32.006" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:32.007" status="PASS" starttime="20190121 15:27:32.000"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:32.017" level="INFO">${count} = 0</msg>
<status endtime="20190121 15:27:32.018" status="PASS" starttime="20190121 15:27:32.010"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:32.027" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:32.028" status="PASS" starttime="20190121 15:27:32.021"></status>
</kw>
<status endtime="20190121 15:27:32.029" status="PASS" starttime="20190121 15:27:31.997"></status>
</kw>
<status endtime="20190121 15:27:32.030" status="PASS" starttime="20190121 15:27:31.894"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:32.038" status="PASS" starttime="20190121 15:27:32.032"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status endtime="20190121 15:27:32.046" status="PASS" starttime="20190121 15:27:32.040"></status>
</kw>
<status endtime="20190121 15:27:32.050" status="PASS" starttime="20190121 15:27:31.859"></status>
</kw>
<status endtime="20190121 15:27:32.051" status="PASS" starttime="20190121 15:27:31.851"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:32.058" level="INFO">Sending command to DUT ps aux | grep candump</msg>
<msg timestamp="20190121 15:27:32.147" level="INFO">Returning data (580 root      0:00 candump -t a -D -B can2 can2   585 root      0:00 sh -c ps aux | grep candump   587 root      0:00 grep candump, )</msg>
<msg timestamp="20190121 15:27:32.149" level="INFO">${ret} = ('580 root      0:00 candump -t a -D -B can2 can2   585 root      0:00 sh -c ps aux | grep candump   587 root      0:00 grep candump', '')</msg>
<status endtime="20190121 15:27:32.151" status="PASS" starttime="20190121 15:27:32.054"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: ${ret}</arg>
</arguments>
<status endtime="20190121 15:27:32.166" status="PASS" starttime="20190121 15:27:32.154"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:32.174" level="INFO">Sending command to DUT pkill candump</msg>
<msg timestamp="20190121 15:27:32.277" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:32.279" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:32.280" status="PASS" starttime="20190121 15:27:32.169"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190121 15:27:33.293" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:27:33.295" status="PASS" starttime="20190121 15:27:32.283"></status>
</kw>
<status endtime="20190121 15:27:33.298" status="PASS" starttime="20190121 15:27:25.902"></status>
</kw>
<status endtime="20190121 15:27:33.301" status="PASS" starttime="20190121 15:27:25.897"></status>
</kw>
<kw name="cansend_125k">
<doc>Can 3 send message test with baudrate 125k</doc>
<kw name="cansend_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${125000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Start test with ${CAN_CH} and bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:33.326" level="INFO">Start test with can2 and bitrate: 125000</msg>
<status endtime="20190121 15:27:33.328" status="PASS" starttime="20190121 15:27:33.319"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:27:33.348" status="PASS" starttime="20190121 15:27:33.340"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:33.357" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:27:33.386" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:33.461" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:33.466" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:33.467" status="PASS" starttime="20190121 15:27:33.351"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:33.484" status="PASS" starttime="20190121 15:27:33.473"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:33.497" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg timestamp="20190121 15:27:33.529" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:33.592" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:33.595" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:33.596" status="PASS" starttime="20190121 15:27:33.487"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:33.611" status="PASS" starttime="20190121 15:27:33.600"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:33.620" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:27:33.648" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:33.751" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:33.754" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:33.755" status="PASS" starttime="20190121 15:27:33.614"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:33.768" status="PASS" starttime="20190121 15:27:33.759"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:27:33.770" status="PASS" starttime="20190121 15:27:33.331"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status endtime="20190121 15:27:33.789" status="PASS" starttime="20190121 15:27:33.783"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:33.798" level="INFO">Sending command to DUT ip link set can2 down</msg>
<msg timestamp="20190121 15:27:33.849" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:33.852" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:33.853" status="PASS" starttime="20190121 15:27:33.792"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:34.368" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:34.370" status="PASS" starttime="20190121 15:27:33.856"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:34.380" level="INFO">Sending command to DUT ip link set can2 type can bitrate 125000</msg>
<msg timestamp="20190121 15:27:34.423" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:34.426" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:34.427" status="PASS" starttime="20190121 15:27:34.373"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:34.938" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:34.940" status="PASS" starttime="20190121 15:27:34.430"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:34.949" level="INFO">Sending command to DUT ip link set can2 up</msg>
<msg timestamp="20190121 15:27:34.980" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:34.983" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:34.983" status="PASS" starttime="20190121 15:27:34.943"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:35.499" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:35.501" status="PASS" starttime="20190121 15:27:34.993"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:35.503" status="PASS" starttime="20190121 15:27:33.773"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status endtime="20190121 15:27:35.658" status="PASS" starttime="20190121 15:27:35.507"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:35.716" status="PASS" starttime="20190121 15:27:35.669"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Create socket .. done</arg>
</arguments>
<status endtime="20190121 15:27:35.726" status="PASS" starttime="20190121 15:27:35.719"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:35.797" status="PASS" starttime="20190121 15:27:35.729"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>start sniffing</arg>
</arguments>
<status endtime="20190121 15:27:35.828" status="PASS" starttime="20190121 15:27:35.800"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:36.349" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:36.352" status="PASS" starttime="20190121 15:27:35.831"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message: ${CAN_FULLMSG}</arg>
</arguments>
<status endtime="20190121 15:27:36.406" status="PASS" starttime="20190121 15:27:36.359"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg timestamp="20190121 15:27:36.440" level="INFO">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:36.527" level="INFO">Returning data (, )</msg>
<status endtime="20190121 15:27:36.533" status="PASS" starttime="20190121 15:27:36.413"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg timestamp="20190121 15:27:36.579" level="INFO">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:36.698" level="INFO">Returning data (, )</msg>
<status endtime="20190121 15:27:36.700" status="PASS" starttime="20190121 15:27:36.536"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
</arguments>
<msg timestamp="20190121 15:27:36.748" level="INFO">Sending command to DUT cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:36.894" level="INFO">Returning data (, )</msg>
<status endtime="20190121 15:27:36.896" status="PASS" starttime="20190121 15:27:36.737"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:37.428" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:37.431" status="PASS" starttime="20190121 15:27:36.903"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg timestamp="20190121 15:27:37.496" level="INFO">${res_list} = [{'timestamp': '21-01-2019 - 15:27:36.521415', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:36.716025', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '...</msg>
<status endtime="20190121 15:27:37.498" status="PASS" starttime="20190121 15:27:37.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:37.506" level="INFO">[{'timestamp': '21-01-2019 - 15:27:36.521415', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:36.716025', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:36.872119', 'payload': '11223344556677BB', 'id': '0x1a'}]</msg>
<status endtime="20190121 15:27:37.509" status="PASS" starttime="20190121 15:27:37.501"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg timestamp="20190121 15:27:37.517" level="INFO">Length is 3</msg>
<msg timestamp="20190121 15:27:37.519" level="INFO">${MSG_LENGTH} = 3</msg>
<status endtime="20190121 15:27:37.520" status="PASS" starttime="20190121 15:27:37.512"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:37.535" status="PASS" starttime="20190121 15:27:37.529"></status>
</kw>
<status endtime="20190121 15:27:37.537" status="PASS" starttime="20190121 15:27:37.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: Expected CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_1}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:37.562" level="INFO">Length is 3</msg>
<msg timestamp="20190121 15:27:37.564" level="INFO">${count} = 3</msg>
<status endtime="20190121 15:27:37.564" status="PASS" starttime="20190121 15:27:37.557"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:37.574" status="PASS" starttime="20190121 15:27:37.567"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:37.583" level="INFO">${msgcount} = 0</msg>
<status endtime="20190121 15:27:37.584" status="PASS" starttime="20190121 15:27:37.577"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:36.521415', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:37.599" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:37.600" status="PASS" starttime="20190121 15:27:37.591"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:37.610" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:37.611" status="PASS" starttime="20190121 15:27:37.603"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:37.621" level="INFO">${msgcount} = 1</msg>
<status endtime="20190121 15:27:37.622" status="PASS" starttime="20190121 15:27:37.614"></status>
</kw>
<status endtime="20190121 15:27:37.623" status="PASS" starttime="20190121 15:27:37.588"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:36.716025', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:37.633" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:37.634" status="PASS" starttime="20190121 15:27:37.627"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:37.645" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:37.646" status="PASS" starttime="20190121 15:27:37.637"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:37.656" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:37.657" status="PASS" starttime="20190121 15:27:37.649"></status>
</kw>
<status endtime="20190121 15:27:37.658" status="PASS" starttime="20190121 15:27:37.624"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:36.872119', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:37.669" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:37.670" status="PASS" starttime="20190121 15:27:37.662"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:37.680" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:37.681" status="PASS" starttime="20190121 15:27:37.673"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:37.691" level="INFO">${msgcount} = 3</msg>
<status endtime="20190121 15:27:37.692" status="PASS" starttime="20190121 15:27:37.684"></status>
</kw>
<status endtime="20190121 15:27:37.693" status="PASS" starttime="20190121 15:27:37.659"></status>
</kw>
<status endtime="20190121 15:27:37.693" status="PASS" starttime="20190121 15:27:37.585"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:37.702" status="PASS" starttime="20190121 15:27:37.696"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status endtime="20190121 15:27:37.713" status="PASS" starttime="20190121 15:27:37.705"></status>
</kw>
<status endtime="20190121 15:27:37.717" status="PASS" starttime="20190121 15:27:37.548"></status>
</kw>
<status endtime="20190121 15:27:37.718" status="PASS" starttime="20190121 15:27:37.540"></status>
</kw>
<timeout value="10 seconds"></timeout>
<status endtime="20190121 15:27:37.721" status="PASS" starttime="20190121 15:27:33.308"></status>
</kw>
<status endtime="20190121 15:27:37.723" status="PASS" starttime="20190121 15:27:33.303"></status>
</kw>
<kw name="can_loopback_125k">
<doc>Can 3 loopback test with baudrate 125k</doc>
<kw name="can_loopback_test">
<arguments>
<arg>${CAN_2}</arg>
<arg>${125000}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Can channel loopback: ${CAN_CH} with bitrate: ${BITRATE}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:37.744" level="INFO">Can channel loopback: can2 with bitrate: 125000</msg>
<status endtime="20190121 15:27:37.746" status="PASS" starttime="20190121 15:27:37.739"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:27:37.775" status="PASS" starttime="20190121 15:27:37.759"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:37.785" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:27:37.812" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:37.904" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:37.907" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:37.908" status="PASS" starttime="20190121 15:27:37.778"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:37.921" status="PASS" starttime="20190121 15:27:37.912"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:37.931" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg timestamp="20190121 15:27:37.960" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:38.017" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:38.021" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:38.022" status="PASS" starttime="20190121 15:27:37.924"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:38.034" status="PASS" starttime="20190121 15:27:38.025"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:38.045" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:27:38.074" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:38.171" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:38.174" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:38.175" status="PASS" starttime="20190121 15:27:38.038"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:38.188" status="PASS" starttime="20190121 15:27:38.179"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:27:38.191" status="PASS" starttime="20190121 15:27:37.749"></status>
</kw>
<kw name="set_can_channel_device">
<doc>Set can channel bitrate on NAD</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set can channel bitrate on NAD</arg>
</arguments>
<status endtime="20190121 15:27:38.209" status="PASS" starttime="20190121 15:27:38.203"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} down</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:38.218" level="INFO">Sending command to DUT ip link set can2 down</msg>
<msg timestamp="20190121 15:27:38.272" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:38.275" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:38.276" status="PASS" starttime="20190121 15:27:38.212"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:38.791" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:38.793" status="PASS" starttime="20190121 15:27:38.279"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} type can bitrate ${bitrate}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:38.805" level="INFO">Sending command to DUT ip link set can2 type can bitrate 125000</msg>
<msg timestamp="20190121 15:27:38.853" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:38.856" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:38.857" status="PASS" starttime="20190121 15:27:38.796"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:39.371" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:39.374" status="PASS" starttime="20190121 15:27:38.860"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip link set ${CAN_CH} up</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:39.383" level="INFO">Sending command to DUT ip link set can2 up</msg>
<msg timestamp="20190121 15:27:39.438" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:39.440" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:39.441" status="PASS" starttime="20190121 15:27:39.377"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5s</arg>
</arguments>
<msg timestamp="20190121 15:27:39.951" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:39.953" status="PASS" starttime="20190121 15:27:39.444"></status>
</kw>
<timeout value="30 seconds"></timeout>
<status endtime="20190121 15:27:39.955" status="PASS" starttime="20190121 15:27:38.193"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:39.966" level="INFO">Starting process:
ip -details link show can2</msg>
<msg timestamp="20190121 15:27:39.994" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:40.007" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:40.010" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:40.011" status="PASS" starttime="20190121 15:27:39.959"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>TNTBOX Setting: \n${ret.stdout}\n</arg>
</arguments>
<status endtime="20190121 15:27:40.023" status="PASS" starttime="20190121 15:27:40.015"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ip -details link show ${CAN_CH}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:40.032" level="INFO">Sending command to DUT ip -details link show can2</msg>
<msg timestamp="20190121 15:27:40.075" level="INFO">Returning data (5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  	  bitrate 125000 sample-point 0.875  	  tq 500 prop-seg 6 phase-seg1 7 phase-seg2 2 sjw 1 	  can-phonet: tseg1 4..16 tseg2 2..8 sjw 1..4 brp 1..256 brp-inc 1 	  clock 64000000numtxqueues 1 numrxqueues 1, )</msg>
<msg timestamp="20190121 15:27:40.078" level="INFO">${ret} = ('5: can2: &lt;NOARP,UP,LOWER_UP,ECHO&gt; mtu 4113 qdisc pfifo_fast state UP mode DEFAULT group default qlen 10     link/can  promiscuity 0      can state STOPPED restart-ms 0  \t  bitrate 125000 sample-poi...</msg>
<status endtime="20190121 15:27:40.079" status="PASS" starttime="20190121 15:27:40.027"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DEVICE Setting: \n${ret}\n</arg>
</arguments>
<status endtime="20190121 15:27:40.095" status="PASS" starttime="20190121 15:27:40.082"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:40.102" level="INFO">Sending command to DUT pkill candump</msg>
<msg timestamp="20190121 15:27:40.210" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:40.212" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:40.214" status="PASS" starttime="20190121 15:27:40.098"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Cancel candump before start it again</arg>
</arguments>
<status endtime="20190121 15:27:40.228" status="PASS" starttime="20190121 15:27:40.217"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190121 15:27:41.235" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:27:41.238" status="PASS" starttime="20190121 15:27:40.231"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>nohup candump -t a -D -B ${CAN_CH} ${CAN_CH} &gt; ${CANDUMP_FILE} &amp;</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:41.247" level="INFO">Sending command to DUT nohup candump -t a -D -B can2 can2 &gt; /root/candump.txt &amp;</msg>
<msg timestamp="20190121 15:27:41.700" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:41.703" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:41.704" status="PASS" starttime="20190121 15:27:41.241"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Start candump on the NAD: ${ret}</arg>
</arguments>
<status endtime="20190121 15:27:41.740" status="PASS" starttime="20190121 15:27:41.707"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:42.250" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:42.253" status="PASS" starttime="20190121 15:27:41.743"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:42.259" level="INFO">Sending command to DUT ps aux | grep candump</msg>
<msg timestamp="20190121 15:27:42.348" level="INFO">Returning data (601 root      0:00 candump -t a -D -B can2 can2   602 root      0:00 sh -c ps aux | grep candump   604 root      0:00 grep candump, )</msg>
<msg timestamp="20190121 15:27:42.350" level="INFO">${ret} = ('601 root      0:00 candump -t a -D -B can2 can2   602 root      0:00 sh -c ps aux | grep candump   604 root      0:00 grep candump', '')</msg>
<status endtime="20190121 15:27:42.351" status="PASS" starttime="20190121 15:27:42.256"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: \n${ret}\n</arg>
</arguments>
<status endtime="20190121 15:27:42.367" status="PASS" starttime="20190121 15:27:42.354"></status>
</kw>
<kw name="Can Create Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<status endtime="20190121 15:27:42.523" status="PASS" starttime="20190121 15:27:42.370"></status>
</kw>
<kw name="Can Clear Socket" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:42.582" status="PASS" starttime="20190121 15:27:42.534"></status>
</kw>
<kw name="Can Start Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<status endtime="20190121 15:27:42.632" status="PASS" starttime="20190121 15:27:42.585"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:43.149" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:43.152" status="PASS" starttime="20190121 15:27:42.638"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG_EXT}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:43.173" level="INFO">Starting process:
cansend can2 18EF7777#FFEEEEDDFFAA1122</msg>
<msg timestamp="20190121 15:27:43.224" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:43.243" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:43.251" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:43.252" status="PASS" starttime="20190121 15:27:43.159"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:43.697" status="PASS" starttime="20190121 15:27:43.260"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>cansend ${CAN_CH} ${CAN_FULLMSG}</arg>
<arg>shell=TRUE</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:43.715" level="INFO">Starting process:
cansend can2 01A#11223344556677BB</msg>
<msg timestamp="20190121 15:27:43.774" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:43.796" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:43.799" level="INFO">${ret} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:43.800" status="PASS" starttime="20190121 15:27:43.705"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret.stdout} ${ret.stderr}</arg>
</arguments>
<status endtime="20190121 15:27:43.832" status="PASS" starttime="20190121 15:27:43.804"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>cat ${CANDUMP_FILE}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:43.853" level="INFO">Sending command to DUT cat /root/candump.txt</msg>
<msg timestamp="20190121 15:27:43.914" level="INFO">Returning data ((1548084463.198904)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548084463.747027)  can2       01A   [8]  11 22 33 44 55 66 77 BB, )</msg>
<msg timestamp="20190121 15:27:43.917" level="INFO">${ret} = ('(1548084463.198904)  can2  18EF7777   [8]  FF EE EE DD FF AA 11 22  (1548084463.747027)  can2       01A   [8]  11 22 33 44 55 66 77 BB', '')</msg>
<status endtime="20190121 15:27:43.918" status="PASS" starttime="20190121 15:27:43.835"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get CANmsg list: \n${ret}\n</arg>
</arguments>
<status endtime="20190121 15:27:43.954" status="PASS" starttime="20190121 15:27:43.934"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.5</arg>
</arguments>
<msg timestamp="20190121 15:27:44.465" level="INFO">Slept 500 milliseconds</msg>
<status endtime="20190121 15:27:44.467" status="PASS" starttime="20190121 15:27:43.961"></status>
</kw>
<kw name="Can Stop Sniffing Asynchronously" library="robot_framework_tnt.Client">
<arguments>
<arg>${CAN_CH}</arg>
</arguments>
<assign>
<var>${res_list}</var>
</assign>
<msg timestamp="20190121 15:27:44.527" level="INFO">${res_list} = [{'timestamp': '21-01-2019 - 15:27:43.253465', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'timestamp': '21-01-2019 - 15:27:43.264603', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'t...</msg>
<status endtime="20190121 15:27:44.528" status="PASS" starttime="20190121 15:27:44.474"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_list}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:44.536" level="INFO">[{'timestamp': '21-01-2019 - 15:27:43.253465', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'timestamp': '21-01-2019 - 15:27:43.264603', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}, {'timestamp': '21-01-2019 - 15:27:43.809052', 'payload': '11223344556677BB', 'id': '0x1a'}, {'timestamp': '21-01-2019 - 15:27:43.821426', 'payload': '11223344556677BB', 'id': '0x1a'}]</msg>
<status endtime="20190121 15:27:44.540" status="PASS" starttime="20190121 15:27:44.532"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${res_list}</arg>
</arguments>
<assign>
<var>${MSG_LENGTH}</var>
</assign>
<msg timestamp="20190121 15:27:44.547" level="INFO">Length is 4</msg>
<msg timestamp="20190121 15:27:44.549" level="INFO">${MSG_LENGTH} = 4</msg>
<status endtime="20190121 15:27:44.550" status="PASS" starttime="20190121 15:27:44.543"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should_Be_True</arg>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:44.566" status="PASS" starttime="20190121 15:27:44.560"></status>
</kw>
<status endtime="20190121 15:27:44.567" status="PASS" starttime="20190121 15:27:44.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${MSG_LENGTH} &gt; 0</arg>
<arg>Check_CAN_Messages</arg>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
<arg>ELSE</arg>
<arg>Log_to_console</arg>
<arg>"Error: CAN messages doesn't exist"</arg>
</arguments>
<kw name="Check_CAN_Messages">
<doc>This keyword Check CAN_Messages number of found messages</doc>
<arguments>
<arg>${res_list}</arg>
<arg>${CAN_MSG_2}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:44.591" level="INFO">Length is 4</msg>
<msg timestamp="20190121 15:27:44.593" level="INFO">${count} = 4</msg>
<status endtime="20190121 15:27:44.594" status="PASS" starttime="20190121 15:27:44.587"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:44.602" status="PASS" starttime="20190121 15:27:44.596"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:44.610" level="INFO">${msgcount} = 0</msg>
<status endtime="20190121 15:27:44.611" status="PASS" starttime="20190121 15:27:44.605"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:43.253465', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:44.623" level="INFO">${payload} = FFEEEEDDFFAA1122</msg>
<status endtime="20190121 15:27:44.624" status="PASS" starttime="20190121 15:27:44.618"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:44.635" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:44.635" status="PASS" starttime="20190121 15:27:44.627"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:44.645" level="INFO">${msgcount} = 1</msg>
<status endtime="20190121 15:27:44.646" status="PASS" starttime="20190121 15:27:44.638"></status>
</kw>
<status endtime="20190121 15:27:44.647" status="PASS" starttime="20190121 15:27:44.615"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:43.264603', 'payload': 'FFEEEEDDFFAA1122', 'id': '0x18ef7777'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:44.659" level="INFO">${payload} = FFEEEEDDFFAA1122</msg>
<status endtime="20190121 15:27:44.659" status="PASS" starttime="20190121 15:27:44.651"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:44.670" level="INFO">${count} = 1</msg>
<status endtime="20190121 15:27:44.671" status="PASS" starttime="20190121 15:27:44.663"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:44.681" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:44.682" status="PASS" starttime="20190121 15:27:44.674"></status>
</kw>
<status endtime="20190121 15:27:44.682" status="PASS" starttime="20190121 15:27:44.648"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:43.809052', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:44.692" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:44.693" status="PASS" starttime="20190121 15:27:44.687"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:44.703" level="INFO">${count} = 0</msg>
<status endtime="20190121 15:27:44.704" status="PASS" starttime="20190121 15:27:44.695"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:44.713" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:44.714" status="PASS" starttime="20190121 15:27:44.707"></status>
</kw>
<status endtime="20190121 15:27:44.714" status="PASS" starttime="20190121 15:27:44.684"></status>
</kw>
<kw name="${item_dict} = {'timestamp': '21-01-2019 - 15:27:43.821426', 'payload': '11223344556677BB', 'id': '0x1a'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:27:44.726" level="INFO">${payload} = 11223344556677BB</msg>
<status endtime="20190121 15:27:44.727" status="PASS" starttime="20190121 15:27:44.720"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:27:44.747" level="INFO">${count} = 0</msg>
<status endtime="20190121 15:27:44.748" status="PASS" starttime="20190121 15:27:44.730"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${msgcount} + ${count}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:27:44.757" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:27:44.758" status="PASS" starttime="20190121 15:27:44.751"></status>
</kw>
<status endtime="20190121 15:27:44.758" status="PASS" starttime="20190121 15:27:44.716"></status>
</kw>
<status endtime="20190121 15:27:44.759" status="PASS" starttime="20190121 15:27:44.612"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${msgcount} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:27:44.769" status="PASS" starttime="20190121 15:27:44.762"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can messages count: ${msgcount}\n</arg>
</arguments>
<status endtime="20190121 15:27:44.778" status="PASS" starttime="20190121 15:27:44.772"></status>
</kw>
<status endtime="20190121 15:27:44.781" status="PASS" starttime="20190121 15:27:44.578"></status>
</kw>
<status endtime="20190121 15:27:44.782" status="PASS" starttime="20190121 15:27:44.570"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>ps aux | grep candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:44.789" level="INFO">Sending command to DUT ps aux | grep candump</msg>
<msg timestamp="20190121 15:27:44.875" level="INFO">Returning data (601 root      0:00 candump -t a -D -B can2 can2   606 root      0:00 sh -c ps aux | grep candump   608 root      0:00 grep candump, )</msg>
<msg timestamp="20190121 15:27:44.877" level="INFO">${ret} = ('601 root      0:00 candump -t a -D -B can2 can2   606 root      0:00 sh -c ps aux | grep candump   608 root      0:00 grep candump', '')</msg>
<status endtime="20190121 15:27:44.878" status="PASS" starttime="20190121 15:27:44.785"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nWatch candump prozess: ${ret}</arg>
</arguments>
<status endtime="20190121 15:27:44.895" status="PASS" starttime="20190121 15:27:44.882"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>pkill candump</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:44.902" level="INFO">Sending command to DUT pkill candump</msg>
<msg timestamp="20190121 15:27:45.005" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:45.008" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:45.009" status="PASS" starttime="20190121 15:27:44.898"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190121 15:27:46.023" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:27:46.025" status="PASS" starttime="20190121 15:27:45.012"></status>
</kw>
<status endtime="20190121 15:27:46.027" status="PASS" starttime="20190121 15:27:37.730"></status>
</kw>
<status endtime="20190121 15:27:46.030" status="PASS" starttime="20190121 15:27:37.725"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>pkill ping</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:27:46.045" level="INFO">Starting process:
pkill ping</msg>
<msg timestamp="20190121 15:27:46.073" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:27:46.108" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:27:46.111" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:27:46.111" status="PASS" starttime="20190121 15:27:46.040"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Test_Teardown_Action"</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:27:46.120" level="INFO">"Test_Teardown_Action"</msg>
<status endtime="20190121 15:27:46.122" status="PASS" starttime="20190121 15:27:46.115"></status>
</kw>
<kw name="Run Ssh Command" library="lairdcvs.testlibrary.TestLibrary">
<doc>Execute command on DUT</doc>
<arguments>
<arg>systemctl poweroff</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20190121 15:27:46.130" level="INFO">Sending command to DUT systemctl poweroff</msg>
<msg timestamp="20190121 15:27:46.242" level="INFO">Returning data (, )</msg>
<msg timestamp="20190121 15:27:46.244" level="INFO">${ret} = ('', '')</msg>
<status endtime="20190121 15:27:46.245" status="PASS" starttime="20190121 15:27:46.125"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${SHUTDOWN_TIME}</arg>
</arguments>
<msg timestamp="20190121 15:28:01.259" level="INFO">Slept 15 seconds</msg>
<status endtime="20190121 15:28:01.261" status="PASS" starttime="20190121 15:27:46.253"></status>
</kw>
<kw name="Close Ssh Connection" library="lairdcvs.testlibrary.TestLibrary">
<doc>Disconnect the ssh connection</doc>
<msg timestamp="20190121 15:28:01.268" level="INFO">Closing SSH connection to 192.168.1.101</msg>
<status endtime="20190121 15:28:01.270" status="PASS" starttime="20190121 15:28:01.264"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:01.321" status="PASS" starttime="20190121 15:28:01.273"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:01.372" status="PASS" starttime="20190121 15:28:01.324"></status>
</kw>
<status endtime="20190121 15:28:01.375" status="PASS" starttime="20190121 15:27:46.033"></status>
</kw>
<doc>Implements Test Task SKTB-34994</doc>
<tags>
<tag>CAN 3 test</tag>
</tags>
<status critical="yes" endtime="20190121 15:28:01.376" status="PASS" starttime="20190121 15:26:29.769"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:28:02.935" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:28:03.033" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:28:03.034" status="PASS" starttime="20190121 15:28:01.419"></status>
</kw>
<status endtime="20190121 15:28:03.035" status="PASS" starttime="20190121 15:28:01.393"></status>
</kw>
<status endtime="20190121 15:28:03.057" status="PASS" starttime="20190121 15:28:01.387"></status>
</kw>
<doc>CAN 3 test</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:28:03.059" status="PASS" starttime="20190121 15:26:27.016"></status>
</suite>
<suite id="s1-s7" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-41635.robot" name="SKTB-41635">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:28:03.590" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:28:03.603" status="PASS" starttime="20190121 15:28:03.585"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:28:03.628" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:28:03.629" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:28:05.840" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:28:05.842" status="PASS" starttime="20190121 15:28:03.606"></status>
</kw>
<status endtime="20190121 15:28:05.844" status="PASS" starttime="20190121 15:28:03.563"></status>
</kw>
<test id="s1-s7-t1" name="can_diag_test">
<kw name="Test_precondition" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>"Test_precondition"</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:05.925" level="INFO">"Test_precondition"</msg>
<status endtime="20190121 15:28:05.935" status="PASS" starttime="20190121 15:28:05.891"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:06.059" status="PASS" starttime="20190121 15:28:05.938"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:06.175" status="PASS" starttime="20190121 15:28:06.062"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190121 15:28:07.197" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:28:07.199" status="PASS" starttime="20190121 15:28:06.183"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:28:07.250" status="PASS" starttime="20190121 15:28:07.202"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>0.1s</arg>
</arguments>
<msg timestamp="20190121 15:28:07.358" level="INFO">Slept 100 milliseconds</msg>
<status endtime="20190121 15:28:07.360" status="PASS" starttime="20190121 15:28:07.253"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:28:07.447" status="PASS" starttime="20190121 15:28:07.363"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20190121 15:28:09.457" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:28:09.460" status="PASS" starttime="20190121 15:28:07.450"></status>
</kw>
<kw name="set_can_channels">
<doc>set bitrate for channels</doc>
<arguments>
<arg>${CAN_0}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:09.478" level="INFO">Starting process:
sudo ip link set can0 down</msg>
<msg timestamp="20190121 15:28:09.506" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:09.578" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:09.581" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:09.582" status="PASS" starttime="20190121 15:28:09.472"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:09.594" level="INFO">Starting process:
sudo ip link set can0 type can bitrate 250000</msg>
<msg timestamp="20190121 15:28:09.622" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:09.678" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:09.681" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:09.682" status="PASS" starttime="20190121 15:28:09.586"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:09.696" level="INFO">Starting process:
sudo ip link set can0 up</msg>
<msg timestamp="20190121 15:28:09.725" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:09.805" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:09.808" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:09.813" status="PASS" starttime="20190121 15:28:09.686"></status>
</kw>
<timeout value="10 seconds"></timeout>
<status endtime="20190121 15:28:09.816" status="PASS" starttime="20190121 15:28:09.462"></status>
</kw>
<status endtime="20190121 15:28:09.823" status="PASS" starttime="20190121 15:28:05.885"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Start test</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:09.835" level="INFO">Start test</msg>
<status endtime="20190121 15:28:09.838" status="PASS" starttime="20190121 15:28:09.829"></status>
</kw>
<kw name="Req_1003">
<doc>Extended session</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Extended session</arg>
</arguments>
<status endtime="20190121 15:28:09.852" status="PASS" starttime="20190121 15:28:09.847"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:09.864" level="INFO">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg timestamp="20190121 15:28:09.902" level="INFO">${candump_ID} = 155</msg>
<status endtime="20190121 15:28:09.903" status="PASS" starttime="20190121 15:28:09.855"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>10 03</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg timestamp="20190121 15:28:09.931" level="INFO">Starting process:
echo 10 03 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg timestamp="20190121 15:28:09.959" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:09.973" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:09.976" level="INFO">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:09.977" status="PASS" starttime="20190121 15:28:09.922"></status>
</kw>
<status endtime="20190121 15:28:09.981" status="PASS" starttime="20190121 15:28:09.914"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:09.996" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:11.001" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:11.003" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:11.007" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:11.010" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:11.011" status="PASS" starttime="20190121 15:28:09.991"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:11.020" level="INFO">2 lines returned</msg>
<msg timestamp="20190121 15:28:11.023" level="INFO">${temp} = [' (1548084489.970529)  can0  7F8   [8]  02 10 03 00 00 00 00 00', ' (1548084489.978193)  can0  7F7   [8]  06 50 03 00 14 00 C8 AA']</msg>
<status endtime="20190121 15:28:11.024" status="PASS" starttime="20190121 15:28:11.014"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:11.034" level="INFO">(1548084489.970529)  can0  7F8   [8]  02 10 03 00 00 00 00 00
 (1548084489.978193)  can0  7F7   [8]  06 50 03 00 14 00 C8 AA</msg>
<msg timestamp="20190121 15:28:11.036" level="INFO">${ret_list} = [{'id': '7F8', 'timestamp': '1548084489.970529', 'payload': '0210030000000000', 'channel': 'can0'}, {'id': '7F7', 'timestamp': '1548084489.978193', 'payload': '065003001400C8AA', 'channel': 'can0'}]</msg>
<status endtime="20190121 15:28:11.037" status="PASS" starttime="20190121 15:28:11.028"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:11.046" status="PASS" starttime="20190121 15:28:11.040"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190121 15:28:11.057" level="INFO">${data} = True</msg>
<status endtime="20190121 15:28:11.058" status="PASS" starttime="20190121 15:28:11.050"></status>
</kw>
<msg timestamp="20190121 15:28:11.062" level="INFO">${res} = True</msg>
<status endtime="20190121 15:28:11.063" status="PASS" starttime="20190121 15:28:09.983"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:28:11.071" status="PASS" starttime="20190121 15:28:11.066"></status>
</kw>
<status endtime="20190121 15:28:11.074" status="PASS" starttime="20190121 15:28:09.840"></status>
</kw>
<kw name="Req_F100">
<doc>Active_DiagnosticInformation</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Active_DiagnosticInformation</arg>
</arguments>
<status endtime="20190121 15:28:11.088" status="PASS" starttime="20190121 15:28:11.082"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:11.100" level="INFO">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg timestamp="20190121 15:28:11.130" level="INFO">${candump_ID} = 157</msg>
<status endtime="20190121 15:28:11.131" status="PASS" starttime="20190121 15:28:11.091"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>22 F1 00</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg timestamp="20190121 15:28:11.158" level="INFO">Starting process:
echo 22 F1 00 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg timestamp="20190121 15:28:11.186" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:11.199" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:11.202" level="INFO">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:11.203" status="PASS" starttime="20190121 15:28:11.149"></status>
</kw>
<status endtime="20190121 15:28:11.207" status="PASS" starttime="20190121 15:28:11.141"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:11.223" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:12.229" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:12.231" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:12.235" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:12.237" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:12.238" status="PASS" starttime="20190121 15:28:11.217"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:12.248" level="INFO">3 lines returned</msg>
<msg timestamp="20190121 15:28:12.250" level="INFO">${temp} = [' (1548084491.204323)  can0  7F8   [8]  03 22 F1 00 00 00 00 00', ' (1548084491.218169)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA', ' (1548084491.228194)  can0  7F7   [8]  07 62 F1 00 00 01 01 03']</msg>
<status endtime="20190121 15:28:12.251" status="PASS" starttime="20190121 15:28:12.241"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:12.260" level="INFO">(1548084491.204323)  can0  7F8   [8]  03 22 F1 00 00 00 00 00
 (1548084491.218169)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA
 (1548084491.228194)  can0  7F7   [8]  07 62 F1 00 00 01 01 03</msg>
<msg timestamp="20190121 15:28:12.262" level="INFO">${ret_list} = [{'id': '7F8', 'timestamp': '1548084491.204323', 'payload': '0322F10000000000', 'channel': 'can0'}, {'id': '7F7', 'timestamp': '1548084491.218169', 'payload': '037F2278AAAAAAAA', 'channel': 'can0'}, {...</msg>
<status endtime="20190121 15:28:12.263" status="PASS" starttime="20190121 15:28:12.254"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:12.276" status="PASS" starttime="20190121 15:28:12.266"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190121 15:28:12.287" level="INFO">None</msg>
<msg timestamp="20190121 15:28:12.289" level="INFO">${data} = True</msg>
<status endtime="20190121 15:28:12.290" status="PASS" starttime="20190121 15:28:12.280"></status>
</kw>
<msg timestamp="20190121 15:28:12.294" level="INFO">${res} = True</msg>
<status endtime="20190121 15:28:12.295" status="PASS" starttime="20190121 15:28:11.210"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:28:12.303" status="PASS" starttime="20190121 15:28:12.298"></status>
</kw>
<status endtime="20190121 15:28:12.306" status="PASS" starttime="20190121 15:28:11.076"></status>
</kw>
<kw name="Req_F10D">
<doc>DDS Package Release</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>DDS Package Release</arg>
</arguments>
<status endtime="20190121 15:28:12.320" status="PASS" starttime="20190121 15:28:12.314"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:12.332" level="INFO">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg timestamp="20190121 15:28:12.363" level="INFO">${candump_ID} = 159</msg>
<status endtime="20190121 15:28:12.364" status="PASS" starttime="20190121 15:28:12.323"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>22 F1 0D</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg timestamp="20190121 15:28:12.392" level="INFO">Starting process:
echo 22 F1 0D | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg timestamp="20190121 15:28:12.421" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:12.435" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:12.438" level="INFO">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:12.439" status="PASS" starttime="20190121 15:28:12.383"></status>
</kw>
<status endtime="20190121 15:28:12.442" status="PASS" starttime="20190121 15:28:12.370"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:12.458" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:13.482" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:13.485" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:13.516" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:13.519" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:13.519" status="PASS" starttime="20190121 15:28:12.452"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:13.543" level="INFO">3 lines returned</msg>
<msg timestamp="20190121 15:28:13.553" level="INFO">${temp} = [' (1548084492.432642)  can0  7F8   [8]  03 22 F1 0D 00 00 00 00', ' (1548084492.448251)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA', ' (1548084492.458240)  can0  7F7   [8]  03 7F 22 22 AA AA AA AA']</msg>
<status endtime="20190121 15:28:13.554" status="PASS" starttime="20190121 15:28:13.536"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:13.583" level="INFO">(1548084492.432642)  can0  7F8   [8]  03 22 F1 0D 00 00 00 00
 (1548084492.448251)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA
 (1548084492.458240)  can0  7F7   [8]  03 7F 22 22 AA AA AA AA</msg>
<msg timestamp="20190121 15:28:13.585" level="INFO">${ret_list} = [{'id': '7F8', 'timestamp': '1548084492.432642', 'payload': '0322F10D00000000', 'channel': 'can0'}, {'id': '7F7', 'timestamp': '1548084492.448251', 'payload': '037F2278AAAAAAAA', 'channel': 'can0'}, {...</msg>
<status endtime="20190121 15:28:13.586" status="PASS" starttime="20190121 15:28:13.557"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:13.619" status="PASS" starttime="20190121 15:28:13.589"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190121 15:28:13.642" level="INFO">${data} = True</msg>
<status endtime="20190121 15:28:13.643" status="PASS" starttime="20190121 15:28:13.623"></status>
</kw>
<msg timestamp="20190121 15:28:13.647" level="INFO">${res} = True</msg>
<status endtime="20190121 15:28:13.648" status="PASS" starttime="20190121 15:28:12.444"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:28:13.656" status="PASS" starttime="20190121 15:28:13.650"></status>
</kw>
<status endtime="20190121 15:28:13.658" status="PASS" starttime="20190121 15:28:12.308"></status>
</kw>
<kw name="Req_F103">
<doc>Vedoc Relevant Information</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Vedoc Relevant Information</arg>
</arguments>
<status endtime="20190121 15:28:13.673" status="PASS" starttime="20190121 15:28:13.667"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:13.685" level="INFO">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg timestamp="20190121 15:28:13.715" level="INFO">${candump_ID} = 161</msg>
<status endtime="20190121 15:28:13.720" status="PASS" starttime="20190121 15:28:13.676"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>isotprecv -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${isotprecv_ID}</var>
</assign>
<msg timestamp="20190121 15:28:13.738" level="INFO">Starting process:
isotprecv -s 7F8 -d 7F7 -p 00 can0</msg>
<msg timestamp="20190121 15:28:13.768" level="INFO">${isotprecv_ID} = 162</msg>
<status endtime="20190121 15:28:13.772" status="PASS" starttime="20190121 15:28:13.724"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>22 F1 03</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg timestamp="20190121 15:28:13.797" level="INFO">Starting process:
echo 22 F1 03 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg timestamp="20190121 15:28:13.825" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:13.838" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:13.841" level="INFO">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:13.842" status="PASS" starttime="20190121 15:28:13.788"></status>
</kw>
<status endtime="20190121 15:28:13.845" status="PASS" starttime="20190121 15:28:13.775"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:13.863" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:14.894" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:14.896" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:14.901" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:14.903" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:14.904" status="PASS" starttime="20190121 15:28:13.857"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:14.914" level="INFO">3 lines returned</msg>
<msg timestamp="20190121 15:28:14.917" level="INFO">${temp} = [' (1548084493.835725)  can0  7F8   [8]  03 22 F1 03 00 00 00 00', ' (1548084493.848286)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA', ' (1548084493.858284)  can0  7F7   [8]  10 1C 62 F1 03 4C 61 69']</msg>
<status endtime="20190121 15:28:14.918" status="PASS" starttime="20190121 15:28:14.907"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:14.927" level="INFO">(1548084493.835725)  can0  7F8   [8]  03 22 F1 03 00 00 00 00
 (1548084493.848286)  can0  7F7   [8]  03 7F 22 78 AA AA AA AA
 (1548084493.858284)  can0  7F7   [8]  10 1C 62 F1 03 4C 61 69</msg>
<msg timestamp="20190121 15:28:14.929" level="INFO">${ret_list} = [{'id': '7F8', 'timestamp': '1548084493.835725', 'payload': '0322F10300000000', 'channel': 'can0'}, {'id': '7F7', 'timestamp': '1548084493.848286', 'payload': '037F2278AAAAAAAA', 'channel': 'can0'}, {...</msg>
<status endtime="20190121 15:28:14.930" status="PASS" starttime="20190121 15:28:14.921"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:14.944" status="PASS" starttime="20190121 15:28:14.933"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190121 15:28:14.955" level="INFO">${data} = True</msg>
<status endtime="20190121 15:28:14.956" status="PASS" starttime="20190121 15:28:14.947"></status>
</kw>
<msg timestamp="20190121 15:28:14.960" level="INFO">${res} = True</msg>
<status endtime="20190121 15:28:14.961" status="PASS" starttime="20190121 15:28:13.847"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:28:14.972" status="PASS" starttime="20190121 15:28:14.964"></status>
</kw>
<status endtime="20190121 15:28:14.975" status="PASS" starttime="20190121 15:28:13.661"></status>
</kw>
<kw name="Req_F1A0">
<doc>VIN Current</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>VIN Current</arg>
</arguments>
<status endtime="20190121 15:28:14.993" status="PASS" starttime="20190121 15:28:14.984"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:15.007" level="INFO">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg timestamp="20190121 15:28:15.039" level="INFO">${candump_ID} = 164</msg>
<status endtime="20190121 15:28:15.040" status="PASS" starttime="20190121 15:28:14.996"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>isotprecv -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${isotprecv_ID}</var>
</assign>
<msg timestamp="20190121 15:28:15.060" level="INFO">Starting process:
isotprecv -s 7F8 -d 7F7 -p 00 can0</msg>
<msg timestamp="20190121 15:28:15.091" level="INFO">${isotprecv_ID} = 165</msg>
<status endtime="20190121 15:28:15.092" status="PASS" starttime="20190121 15:28:15.052"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>22 F1 A0</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg timestamp="20190121 15:28:15.120" level="INFO">Starting process:
echo 22 F1 A0 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg timestamp="20190121 15:28:15.202" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:15.245" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:15.256" level="INFO">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:15.257" status="PASS" starttime="20190121 15:28:15.111"></status>
</kw>
<status endtime="20190121 15:28:15.275" status="PASS" starttime="20190121 15:28:15.100"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:15.308" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:16.318" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:16.320" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:16.324" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:16.327" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:16.328" status="PASS" starttime="20190121 15:28:15.302"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:16.337" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:28:16.339" level="INFO">${temp} = [' (1548084495.221810)  can0  7F8   [8]  03 22 F1 A0 00 00 00 00']</msg>
<status endtime="20190121 15:28:16.340" status="PASS" starttime="20190121 15:28:16.331"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:16.349" level="INFO">(1548084495.221810)  can0  7F8   [8]  03 22 F1 A0 00 00 00 00</msg>
<msg timestamp="20190121 15:28:16.351" level="INFO">${ret_list} = [{'id': '7F8', 'timestamp': '1548084495.221810', 'payload': '0322F1A000000000', 'channel': 'can0'}]</msg>
<status endtime="20190121 15:28:16.352" status="PASS" starttime="20190121 15:28:16.344"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:16.362" status="PASS" starttime="20190121 15:28:16.355"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190121 15:28:16.373" level="INFO">${data} = True</msg>
<status endtime="20190121 15:28:16.374" status="PASS" starttime="20190121 15:28:16.365"></status>
</kw>
<msg timestamp="20190121 15:28:16.378" level="INFO">${res} = True</msg>
<status endtime="20190121 15:28:16.379" status="PASS" starttime="20190121 15:28:15.281"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:28:16.387" status="PASS" starttime="20190121 15:28:16.382"></status>
</kw>
<status endtime="20190121 15:28:16.390" status="PASS" starttime="20190121 15:28:14.978"></status>
</kw>
<kw name="Req_F1A0_WRITE">
<doc>VIN Current</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>VIN Current write</arg>
</arguments>
<status endtime="20190121 15:28:16.405" status="PASS" starttime="20190121 15:28:16.399"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${RES_ID}:${MASK},${REQ_ID}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:16.417" level="INFO">Starting process:
candump -t a can0,7F7:7FF,7F8:7FF</msg>
<msg timestamp="20190121 15:28:16.448" level="INFO">${candump_ID} = 167</msg>
<status endtime="20190121 15:28:16.452" status="PASS" starttime="20190121 15:28:16.408"></status>
</kw>
<kw name="send_isotp_message">
<doc>MSG must be in form aa bb cc dd</doc>
<arguments>
<arg>2E F1 A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</arg>
</arguments>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>echo ${MSG} | isotpsend -s ${REQ_ID} -d ${RES_ID} -p 00 ${CAN_0}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${candsend_ID}</var>
</assign>
<msg timestamp="20190121 15:28:16.476" level="INFO">Starting process:
echo 2E F1 A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | isotpsend -s 7F8 -d 7F7 -p 00 can0</msg>
<msg timestamp="20190121 15:28:16.505" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:16.540" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:16.543" level="INFO">${candsend_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:16.544" status="PASS" starttime="20190121 15:28:16.468"></status>
</kw>
<status endtime="20190121 15:28:16.547" status="PASS" starttime="20190121 15:28:16.455"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1s</arg>
</arguments>
<msg timestamp="20190121 15:28:17.559" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:28:17.561" status="PASS" starttime="20190121 15:28:16.553"></status>
</kw>
<kw name="Check_test_result">
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:17.576" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:18.581" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:18.582" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:18.587" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:18.589" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:18.590" status="PASS" starttime="20190121 15:28:17.570"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:18.600" level="INFO">5 lines returned</msg>
<msg timestamp="20190121 15:28:18.602" level="INFO">${temp} = [' (1548084496.516755)  can0  7F8   [8]  10 14 2E F1 A0 00 00 00', ' (1548084496.517366)  can0  7F7   [8]  30 08 0A AA AA AA AA AA', ' (1548084496.527905)  can0  7F8   [8]  21 00 00 00 00 00 00 00', '...</msg>
<status endtime="20190121 15:28:18.603" status="PASS" starttime="20190121 15:28:18.593"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:18.612" level="INFO">(1548084496.516755)  can0  7F8   [8]  10 14 2E F1 A0 00 00 00
 (1548084496.517366)  can0  7F7   [8]  30 08 0A AA AA AA AA AA
 (1548084496.527905)  can0  7F8   [8]  21 00 00 00 00 00 00 00
 (1548084496.538431)  can0  7F8   [8]  22 00 00 00 00 00 00 00
 (1548084496.548427)  can0  7F7   [8]  03 7F 2E 33 AA AA AA AA</msg>
<msg timestamp="20190121 15:28:18.615" level="INFO">${ret_list} = [{'id': '7F8', 'timestamp': '1548084496.516755', 'payload': '10142EF1A0000000', 'channel': 'can0'}, {'id': '7F7', 'timestamp': '1548084496.517366', 'payload': '30080AAAAAAAAAAA', 'channel': 'can0'}, {...</msg>
<status endtime="20190121 15:28:18.615" status="PASS" starttime="20190121 15:28:18.606"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:18.630" status="PASS" starttime="20190121 15:28:18.619"></status>
</kw>
<kw name="Check If Response Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>check_if_response_exist for isotp uds</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${REQ_ID}</arg>
<arg>${RES_ID}</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190121 15:28:18.641" level="INFO">None</msg>
<msg timestamp="20190121 15:28:18.643" level="INFO">${data} = False</msg>
<status endtime="20190121 15:28:18.644" status="PASS" starttime="20190121 15:28:18.633"></status>
</kw>
<msg timestamp="20190121 15:28:18.648" level="INFO">${res} = False</msg>
<status endtime="20190121 15:28:18.648" status="PASS" starttime="20190121 15:28:17.564"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:18.657" level="INFO">False</msg>
<status endtime="20190121 15:28:18.659" status="PASS" starttime="20190121 15:28:18.651"></status>
</kw>
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:28:18.668" status="PASS" starttime="20190121 15:28:18.662"></status>
</kw>
<status endtime="20190121 15:28:18.670" status="PASS" starttime="20190121 15:28:16.392"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>pkill candump</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${rm_res}</var>
</assign>
<msg timestamp="20190121 15:28:18.685" level="INFO">Starting process:
pkill candump</msg>
<msg timestamp="20190121 15:28:18.715" level="INFO">${rm_res} = 169</msg>
<status endtime="20190121 15:28:18.716" status="PASS" starttime="20190121 15:28:18.680"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:18.801" status="PASS" starttime="20190121 15:28:18.723"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:18.853" status="PASS" starttime="20190121 15:28:18.805"></status>
</kw>
<status endtime="20190121 15:28:18.856" status="PASS" starttime="20190121 15:28:18.674"></status>
</kw>
<doc>Can diagnose test</doc>
<tags>
<tag>CAN 1 diagnose test</tag>
</tags>
<timeout value="50 seconds"></timeout>
<status critical="yes" endtime="20190121 15:28:18.858" status="PASS" starttime="20190121 15:28:05.865"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:28:20.388" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:28:20.506" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:28:20.550" status="PASS" starttime="20190121 15:28:18.899"></status>
</kw>
<status endtime="20190121 15:28:20.551" status="PASS" starttime="20190121 15:28:18.875"></status>
</kw>
<status endtime="20190121 15:28:20.559" status="PASS" starttime="20190121 15:28:18.869"></status>
</kw>
<doc>CAN 1 diagnose test</doc>
<status endtime="20190121 15:28:20.560" status="PASS" starttime="20190121 15:28:03.190"></status>
</suite>
<suite id="s1-s8" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-46886.robot" name="SKTB-46886">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:28:21.352" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:28:21.362" status="PASS" starttime="20190121 15:28:21.337"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:28:21.371" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:28:21.385" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:28:23.510" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:28:23.511" status="PASS" starttime="20190121 15:28:21.365"></status>
</kw>
<status endtime="20190121 15:28:23.531" status="PASS" starttime="20190121 15:28:21.331"></status>
</kw>
<test id="s1-s8-t1" name="SKTB-GPIO FBUS test">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:23.686" status="PASS" starttime="20190121 15:28:23.590"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:23.783" status="PASS" starttime="20190121 15:28:23.689"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:23.937" status="PASS" starttime="20190121 15:28:23.796"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:28:25.957" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:28:25.959" status="PASS" starttime="20190121 15:28:23.940"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:28:26.028" status="PASS" starttime="20190121 15:28:25.962"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:28:26.097" status="PASS" starttime="20190121 15:28:26.030"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:28:26.145" status="PASS" starttime="20190121 15:28:26.100"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:28:26.215" status="PASS" starttime="20190121 15:28:26.149"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:28:26.287" status="PASS" starttime="20190121 15:28:26.218"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:28:26.357" status="PASS" starttime="20190121 15:28:26.295"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:28:28.365" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:28:28.367" status="PASS" starttime="20190121 15:28:26.360"></status>
</kw>
<status endtime="20190121 15:28:28.369" status="PASS" starttime="20190121 15:28:23.568"></status>
</kw>
<kw name="Test_GPIO_00">
<doc>Test HI SIDE SWITCH 01</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test hi side switch 01</arg>
</arguments>
<status endtime="20190121 15:28:28.383" status="PASS" starttime="20190121 15:28:28.378"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_1}${ENABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:28.587" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 00 01 43 3D F5</msg>
<status endtime="20190121 15:28:28.588" status="PASS" starttime="20190121 15:28:28.386"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:28.596" level="INFO">1E 14 54 8E 00 08 01 0D 77 29 00 00 01 43 3D F5</msg>
<status endtime="20190121 15:28:28.598" status="PASS" starttime="20190121 15:28:28.592"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_1}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:28.815" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 00 00 01 01 44 3D FE</msg>
<status endtime="20190121 15:28:28.816" status="PASS" starttime="20190121 15:28:28.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:28.824" level="INFO">1E 14 54 8E 00 0A 01 0D 77 26 00 00 00 01 01 44 3D FE</msg>
<status endtime="20190121 15:28:28.827" status="PASS" starttime="20190121 15:28:28.820"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_1} ${MODE_STATIC} ${ENABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:28.838" status="PASS" starttime="20190121 15:28:28.830"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_1}${DISABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:29.070" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 00 01 45 3D F3</msg>
<status endtime="20190121 15:28:29.071" status="PASS" starttime="20190121 15:28:28.841"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:29.079" level="INFO">1E 14 54 8E 00 08 01 0D 77 29 00 00 01 45 3D F3</msg>
<status endtime="20190121 15:28:29.081" status="PASS" starttime="20190121 15:28:29.074"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_1}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:29.311" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 00 00 00 01 40 3D FB</msg>
<status endtime="20190121 15:28:29.312" status="PASS" starttime="20190121 15:28:29.084"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:29.321" level="INFO">1E 14 54 8E 00 0A 01 0D 77 26 00 00 00 00 01 40 3D FB</msg>
<status endtime="20190121 15:28:29.324" status="PASS" starttime="20190121 15:28:29.316"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_1} ${MODE_STATIC} ${DISABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:29.339" status="PASS" starttime="20190121 15:28:29.327"></status>
</kw>
<status endtime="20190121 15:28:29.341" status="PASS" starttime="20190121 15:28:28.372"></status>
</kw>
<kw name="Test_GPIO_01">
<doc>Test HI SIDE SWITCH 02</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test hi side switch 02</arg>
</arguments>
<status endtime="20190121 15:28:29.354" status="PASS" starttime="20190121 15:28:29.349"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_2}${ENABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:29.583" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 01 01 41 3D F6</msg>
<status endtime="20190121 15:28:29.584" status="PASS" starttime="20190121 15:28:29.357"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:29.592" level="INFO">1E 14 54 8E 00 08 01 0D 77 29 00 01 01 41 3D F6</msg>
<status endtime="20190121 15:28:29.594" status="PASS" starttime="20190121 15:28:29.587"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_2}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:29.823" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 01 00 01 01 42 3D F9</msg>
<status endtime="20190121 15:28:29.824" status="PASS" starttime="20190121 15:28:29.597"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:29.838" level="INFO">1E 14 54 8E 00 0A 01 0D 77 26 00 01 00 01 01 42 3D F9</msg>
<status endtime="20190121 15:28:29.841" status="PASS" starttime="20190121 15:28:29.827"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_2} ${MODE_STATIC} ${ENABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:29.851" status="PASS" starttime="20190121 15:28:29.843"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_2}${DISABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:30.080" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 01 01 43 3D F4</msg>
<status endtime="20190121 15:28:30.085" status="PASS" starttime="20190121 15:28:29.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:30.094" level="INFO">1E 14 54 8E 00 08 01 0D 77 29 00 01 01 43 3D F4</msg>
<status endtime="20190121 15:28:30.097" status="PASS" starttime="20190121 15:28:30.088"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_2}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:30.326" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 01 00 00 01 46 3D FC</msg>
<status endtime="20190121 15:28:30.327" status="PASS" starttime="20190121 15:28:30.100"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:30.340" level="INFO">1E 14 54 8E 00 0A 01 0D 77 26 00 01 00 00 01 46 3D FC</msg>
<status endtime="20190121 15:28:30.345" status="PASS" starttime="20190121 15:28:30.330"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_2} ${MODE_STATIC} ${DISABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:30.356" status="PASS" starttime="20190121 15:28:30.347"></status>
</kw>
<status endtime="20190121 15:28:30.358" status="PASS" starttime="20190121 15:28:29.343"></status>
</kw>
<kw name="Test_GPIO_02">
<doc>Test HI SIDE SWITCH 03</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test hi side switch 03</arg>
</arguments>
<status endtime="20190121 15:28:30.371" status="PASS" starttime="20190121 15:28:30.367"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_3}${ENABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:30.597" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 02 01 47 3D F3</msg>
<status endtime="20190121 15:28:30.598" status="PASS" starttime="20190121 15:28:30.374"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:30.606" level="INFO">1E 14 54 8E 00 08 01 0D 77 29 00 02 01 47 3D F3</msg>
<status endtime="20190121 15:28:30.609" status="PASS" starttime="20190121 15:28:30.602"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_3}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:30.826" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 02 00 01 01 40 3D F8</msg>
<status endtime="20190121 15:28:30.826" status="PASS" starttime="20190121 15:28:30.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:30.841" level="INFO">1E 14 54 8E 00 0A 01 0D 77 26 00 02 00 01 01 40 3D F8</msg>
<status endtime="20190121 15:28:30.849" status="PASS" starttime="20190121 15:28:30.834"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_3} ${MODE_STATIC} ${ENABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:30.865" status="PASS" starttime="20190121 15:28:30.852"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_3}${DISABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:31.086" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 02 01 41 3D F5</msg>
<status endtime="20190121 15:28:31.087" status="PASS" starttime="20190121 15:28:30.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:31.098" level="INFO">1E 14 54 8E 00 08 01 0D 77 29 00 02 01 41 3D F5</msg>
<status endtime="20190121 15:28:31.105" status="PASS" starttime="20190121 15:28:31.090"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_3}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:31.322" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 02 00 00 01 42 3D FB</msg>
<status endtime="20190121 15:28:31.323" status="PASS" starttime="20190121 15:28:31.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:31.338" level="INFO">1E 14 54 8E 00 0A 01 0D 77 26 00 02 00 00 01 42 3D FB</msg>
<status endtime="20190121 15:28:31.345" status="PASS" starttime="20190121 15:28:31.330"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_3} ${MODE_STATIC} ${DISABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:31.364" status="PASS" starttime="20190121 15:28:31.352"></status>
</kw>
<status endtime="20190121 15:28:31.366" status="PASS" starttime="20190121 15:28:30.361"></status>
</kw>
<kw name="Test_GPIO_03">
<doc>Test HI SIDE SWITCH 03</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test hi side switch 03</arg>
</arguments>
<status endtime="20190121 15:28:31.382" status="PASS" starttime="20190121 15:28:31.374"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_4}${ENABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:31.606" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 03 01 43 3D F6</msg>
<status endtime="20190121 15:28:31.606" status="PASS" starttime="20190121 15:28:31.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:31.616" level="INFO">1E 14 54 8E 00 08 01 0D 77 29 00 03 01 43 3D F6</msg>
<status endtime="20190121 15:28:31.619" status="PASS" starttime="20190121 15:28:31.612"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_4}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:31.837" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 03 00 01 01 44 3D FD</msg>
<status endtime="20190121 15:28:31.838" status="PASS" starttime="20190121 15:28:31.622"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:31.846" level="INFO">1E 14 54 8E 00 0A 01 0D 77 26 00 03 00 01 01 44 3D FD</msg>
<status endtime="20190121 15:28:31.857" status="PASS" starttime="20190121 15:28:31.842"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_4} ${MODE_STATIC} ${ENABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:31.875" status="PASS" starttime="20190121 15:28:31.864"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_SET_REQ}${HI_SIDE_SW_4}${DISABLE}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:32.130" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 03 01 45 3D F0</msg>
<status endtime="20190121 15:28:32.131" status="PASS" starttime="20190121 15:28:31.878"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:32.146" level="INFO">1E 14 54 8E 00 08 01 0D 77 29 00 03 01 45 3D F0</msg>
<status endtime="20190121 15:28:32.159" status="PASS" starttime="20190121 15:28:32.134"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_DIGITAL_IO_GET_REQ}${HI_SIDE_SW_4}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:32.386" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 03 00 00 01 46 3D FE</msg>
<status endtime="20190121 15:28:32.387" status="PASS" starttime="20190121 15:28:32.162"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:32.397" level="INFO">1E 14 54 8E 00 0A 01 0D 77 26 00 03 00 00 01 46 3D FE</msg>
<status endtime="20190121 15:28:32.400" status="PASS" starttime="20190121 15:28:32.393"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${GET_RESP} ${SCA_RESULT_OK} ${HI_SIDE_SW_4} ${MODE_STATIC} ${DISABLE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:32.410" status="PASS" starttime="20190121 15:28:32.403"></status>
</kw>
<status endtime="20190121 15:28:32.413" status="PASS" starttime="20190121 15:28:31.368"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:32.471" status="PASS" starttime="20190121 15:28:32.423"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:32.521" status="PASS" starttime="20190121 15:28:32.475"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:32.571" status="PASS" starttime="20190121 15:28:32.524"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:28:34.579" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:28:34.581" status="PASS" starttime="20190121 15:28:32.574"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:28:34.664" status="PASS" starttime="20190121 15:28:34.585"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:28:34.738" status="PASS" starttime="20190121 15:28:34.667"></status>
</kw>
<status endtime="20190121 15:28:34.741" status="PASS" starttime="20190121 15:28:32.416"></status>
</kw>
<doc>Implements Test Task SKTB-46886</doc>
<tags>
<tag>FBUS</tag>
</tags>
<status critical="yes" endtime="20190121 15:28:34.742" status="PASS" starttime="20190121 15:28:23.533"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:28:36.240" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:28:36.327" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:28:36.330" status="PASS" starttime="20190121 15:28:34.789"></status>
</kw>
<status endtime="20190121 15:28:36.332" status="PASS" starttime="20190121 15:28:34.758"></status>
</kw>
<status endtime="20190121 15:28:36.343" status="PASS" starttime="20190121 15:28:34.753"></status>
</kw>
<doc>Chorus Fbus GPIO Testing</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:28:36.359" status="PASS" starttime="20190121 15:28:20.743"></status>
</suite>
<suite id="s1-s9" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-47669.robot" name="SKTB-47669">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:28:37.004" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:28:37.014" status="PASS" starttime="20190121 15:28:36.999"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:28:37.023" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:28:37.031" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:28:39.304" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:28:39.306" status="PASS" starttime="20190121 15:28:37.017"></status>
</kw>
<status endtime="20190121 15:28:39.309" status="PASS" starttime="20190121 15:28:36.988"></status>
</kw>
<test id="s1-s9-t1" name="SKTB-47669">
<kw name="Test_precondition" type="setup">
<doc>Precondition, Switch power on and set Serial configuration</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Precondition, Switch power on and set Serial configuration</arg>
</arguments>
<status endtime="20190121 15:28:39.397" status="PASS" starttime="20190121 15:28:39.377"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:39.527" status="PASS" starttime="20190121 15:28:39.400"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:28:39.618" status="PASS" starttime="20190121 15:28:39.530"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:28:39.765" status="PASS" starttime="20190121 15:28:39.621"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${912600}</arg>
</arguments>
<status endtime="20190121 15:28:39.866" status="PASS" starttime="20190121 15:28:39.768"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:28:39.946" status="PASS" starttime="20190121 15:28:39.869"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:28:40.062" status="PASS" starttime="20190121 15:28:39.950"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:28:42.085" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:28:42.087" status="PASS" starttime="20190121 15:28:40.064"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:28:42.211" status="PASS" starttime="20190121 15:28:42.090"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:28:42.404" status="PASS" starttime="20190121 15:28:42.218"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${4}</arg>
</arguments>
<msg timestamp="20190121 15:28:46.440" level="INFO">Slept 4 seconds</msg>
<status endtime="20190121 15:28:46.442" status="PASS" starttime="20190121 15:28:42.411"></status>
</kw>
<status endtime="20190121 15:28:46.444" status="PASS" starttime="20190121 15:28:39.353"></status>
</kw>
<kw name="cansend_500k">
<doc>Trigger to send can message on can with bitrate 500000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with bitrate 500000</arg>
</arguments>
<status endtime="20190121 15:28:46.458" status="PASS" starttime="20190121 15:28:46.454"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${500000}</arg>
<arg>${500_KBAUD}</arg>
<arg>${MSG_ID}</arg>
<arg>${MSG_ID_ISI}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:28:46.487" status="PASS" starttime="20190121 15:28:46.480"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:46.497" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:28:46.525" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:46.600" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:46.603" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:46.604" status="PASS" starttime="20190121 15:28:46.490"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:46.616" status="PASS" starttime="20190121 15:28:46.607"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:46.626" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 500000</msg>
<msg timestamp="20190121 15:28:46.692" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:46.743" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:46.746" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:46.747" status="PASS" starttime="20190121 15:28:46.619"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:46.760" status="PASS" starttime="20190121 15:28:46.751"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:46.769" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:28:46.798" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:46.899" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:46.902" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:46.903" status="PASS" starttime="20190121 15:28:46.763"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:46.915" status="PASS" starttime="20190121 15:28:46.907"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:28:46.919" status="PASS" starttime="20190121 15:28:46.471"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:46.929" level="INFO">Starting process:
candump -t a can2,1FF:1FF</msg>
<msg timestamp="20190121 15:28:46.962" level="INFO">${candump_ID} = 173</msg>
<status endtime="20190121 15:28:46.963" status="PASS" starttime="20190121 15:28:46.922"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status endtime="20190121 15:28:47.039" status="PASS" starttime="20190121 15:28:47.017"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:47.054" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 02</msg>
<status endtime="20190121 15:28:47.055" status="PASS" starttime="20190121 15:28:47.042"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:47.064" status="PASS" starttime="20190121 15:28:47.058"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:47.280" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 47 E1 C1</msg>
<status endtime="20190121 15:28:47.281" status="PASS" starttime="20190121 15:28:47.067"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:47.289" level="INFO">1E 10 54 93 00 08 00 0E AA 03 00 00 01 47 E1 C1</msg>
<status endtime="20190121 15:28:47.291" status="PASS" starttime="20190121 15:28:47.284"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:47.301" status="PASS" starttime="20190121 15:28:47.294"></status>
</kw>
<status endtime="20190121 15:28:47.304" status="PASS" starttime="20190121 15:28:46.975"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status endtime="20190121 15:28:47.323" status="PASS" starttime="20190121 15:28:47.315"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:47.333" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status endtime="20190121 15:28:47.334" status="PASS" starttime="20190121 15:28:47.326"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:47.342" status="PASS" starttime="20190121 15:28:47.336"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:47.613" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 40 E3 C0</msg>
<status endtime="20190121 15:28:47.614" status="PASS" starttime="20190121 15:28:47.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:47.622" level="INFO">1E 10 54 93 00 08 00 0E AA 05 02 00 01 40 E3 C0</msg>
<status endtime="20190121 15:28:47.625" status="PASS" starttime="20190121 15:28:47.618"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:47.636" status="PASS" starttime="20190121 15:28:47.628"></status>
</kw>
<status endtime="20190121 15:28:47.638" status="PASS" starttime="20190121 15:28:47.306"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status endtime="20190121 15:28:47.646" status="PASS" starttime="20190121 15:28:47.641"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:47.665" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 00 00 01 FF 080000FF 1122334455667788</msg>
<status endtime="20190121 15:28:47.666" status="PASS" starttime="20190121 15:28:47.657"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:47.675" status="PASS" starttime="20190121 15:28:47.669"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:47.934" level="INFO">${info} = </msg>
<status endtime="20190121 15:28:47.935" status="PASS" starttime="20190121 15:28:47.678"></status>
</kw>
<status endtime="20190121 15:28:47.938" status="PASS" starttime="20190121 15:28:47.649"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:47.967" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:48.975" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:48.976" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:48.981" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:48.983" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:48.984" status="PASS" starttime="20190121 15:28:47.963"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:48.993" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:28:48.995" level="INFO">${temp} = [' (1548084527.751492)  can2  1FF   [8]  11 22 33 44 55 66 77 88']</msg>
<status endtime="20190121 15:28:48.996" status="PASS" starttime="20190121 15:28:48.988"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:49.004" level="INFO">(1548084527.751492)  can2  1FF   [8]  11 22 33 44 55 66 77 88</msg>
<msg timestamp="20190121 15:28:49.006" level="INFO">${ret_list} = [{'id': '1FF', 'timestamp': '1548084527.751492', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:49.007" status="PASS" starttime="20190121 15:28:48.999"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:49.015" status="PASS" starttime="20190121 15:28:49.010"></status>
</kw>
<msg timestamp="20190121 15:28:49.019" level="INFO">${resp_list} = [{'id': '1FF', 'timestamp': '1548084527.751492', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:49.020" status="PASS" starttime="20190121 15:28:47.940"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:28:49.029" level="INFO">${res_dict} = {'count': 1, 'status': True}</msg>
<status endtime="20190121 15:28:49.030" status="PASS" starttime="20190121 15:28:49.023"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:28:49.038" status="PASS" starttime="20190121 15:28:49.033"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:28:49.073" level="INFO">${value} = True</msg>
<status endtime="20190121 15:28:49.074" status="PASS" starttime="20190121 15:28:49.042"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:28:49.082" status="PASS" starttime="20190121 15:28:49.077"></status>
</kw>
<msg timestamp="20190121 15:28:49.086" level="INFO">${resp} = True</msg>
<status endtime="20190121 15:28:49.086" status="PASS" starttime="20190121 15:28:46.461"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:28:49.094" status="PASS" starttime="20190121 15:28:49.089"></status>
</kw>
<status endtime="20190121 15:28:49.096" status="PASS" starttime="20190121 15:28:46.447"></status>
</kw>
<kw name="cansend_500k_ex">
<doc>Trigger to send can message on can with 29 bit ID and bitrate 500000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with 29 bit ID and bitrate 500000</arg>
</arguments>
<status endtime="20190121 15:28:49.110" status="PASS" starttime="20190121 15:28:49.105"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${500000}</arg>
<arg>${500_KBAUD}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:28:49.140" status="PASS" starttime="20190121 15:28:49.131"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:49.150" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:28:49.178" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:49.249" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:49.252" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:49.253" status="PASS" starttime="20190121 15:28:49.143"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:49.265" status="PASS" starttime="20190121 15:28:49.257"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:49.281" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 500000</msg>
<msg timestamp="20190121 15:28:49.310" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:49.367" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:49.370" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:49.371" status="PASS" starttime="20190121 15:28:49.269"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:49.386" status="PASS" starttime="20190121 15:28:49.377"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:49.395" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:28:49.423" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:49.524" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:49.527" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:49.528" status="PASS" starttime="20190121 15:28:49.389"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:49.541" status="PASS" starttime="20190121 15:28:49.532"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:28:49.543" status="PASS" starttime="20190121 15:28:49.121"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:49.553" level="INFO">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg timestamp="20190121 15:28:49.588" level="INFO">${candump_ID} = 177</msg>
<status endtime="20190121 15:28:49.590" status="PASS" starttime="20190121 15:28:49.546"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status endtime="20190121 15:28:49.620" status="PASS" starttime="20190121 15:28:49.615"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:49.630" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 02</msg>
<status endtime="20190121 15:28:49.631" status="PASS" starttime="20190121 15:28:49.623"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:49.639" status="PASS" starttime="20190121 15:28:49.633"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:49.863" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 44 E1 C2</msg>
<status endtime="20190121 15:28:49.865" status="PASS" starttime="20190121 15:28:49.642"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:49.872" level="INFO">1E 10 54 93 00 08 00 0E AA 03 00 00 01 44 E1 C2</msg>
<status endtime="20190121 15:28:49.875" status="PASS" starttime="20190121 15:28:49.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:49.886" status="PASS" starttime="20190121 15:28:49.878"></status>
</kw>
<status endtime="20190121 15:28:49.888" status="PASS" starttime="20190121 15:28:49.598"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status endtime="20190121 15:28:49.903" status="PASS" starttime="20190121 15:28:49.899"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:49.913" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status endtime="20190121 15:28:49.914" status="PASS" starttime="20190121 15:28:49.906"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:49.922" status="PASS" starttime="20190121 15:28:49.917"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:50.150" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 45 E3 C5</msg>
<status endtime="20190121 15:28:50.151" status="PASS" starttime="20190121 15:28:49.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:50.159" level="INFO">1E 10 54 93 00 08 00 0E AA 05 02 00 01 45 E3 C5</msg>
<status endtime="20190121 15:28:50.161" status="PASS" starttime="20190121 15:28:50.154"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:50.172" status="PASS" starttime="20190121 15:28:50.164"></status>
</kw>
<status endtime="20190121 15:28:50.175" status="PASS" starttime="20190121 15:28:49.890"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status endtime="20190121 15:28:50.183" status="PASS" starttime="20190121 15:28:50.178"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:50.203" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:28:50.203" status="PASS" starttime="20190121 15:28:50.194"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:50.212" status="PASS" starttime="20190121 15:28:50.206"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:50.410" level="INFO">${info} = </msg>
<status endtime="20190121 15:28:50.411" status="PASS" starttime="20190121 15:28:50.215"></status>
</kw>
<status endtime="20190121 15:28:50.413" status="PASS" starttime="20190121 15:28:50.186"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:50.426" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:51.431" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:51.433" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:51.437" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:51.439" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:51.441" status="PASS" starttime="20190121 15:28:50.422"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:51.449" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:28:51.451" level="INFO">${temp} = [' (1548084530.264647)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88']</msg>
<status endtime="20190121 15:28:51.452" status="PASS" starttime="20190121 15:28:51.443"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:51.464" level="INFO">(1548084530.264647)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88</msg>
<msg timestamp="20190121 15:28:51.466" level="INFO">${ret_list} = [{'id': '18EF1B05', 'timestamp': '1548084530.264647', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:51.467" status="PASS" starttime="20190121 15:28:51.455"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:51.475" status="PASS" starttime="20190121 15:28:51.470"></status>
</kw>
<msg timestamp="20190121 15:28:51.479" level="INFO">${resp_list} = [{'id': '18EF1B05', 'timestamp': '1548084530.264647', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:51.480" status="PASS" starttime="20190121 15:28:50.415"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:28:51.490" level="INFO">${res_dict} = {'count': 1, 'status': True}</msg>
<status endtime="20190121 15:28:51.491" status="PASS" starttime="20190121 15:28:51.483"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:28:51.499" status="PASS" starttime="20190121 15:28:51.494"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:28:51.533" level="INFO">${value} = True</msg>
<status endtime="20190121 15:28:51.534" status="PASS" starttime="20190121 15:28:51.502"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:28:51.542" status="PASS" starttime="20190121 15:28:51.537"></status>
</kw>
<msg timestamp="20190121 15:28:51.546" level="INFO">${resp} = True</msg>
<status endtime="20190121 15:28:51.547" status="PASS" starttime="20190121 15:28:49.112"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:28:51.554" status="PASS" starttime="20190121 15:28:51.550"></status>
</kw>
<status endtime="20190121 15:28:51.557" status="PASS" starttime="20190121 15:28:49.098"></status>
</kw>
<kw name="cansend_250k">
<doc>Trigger to send can message on can with bitrate 250000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with bitrate 250000</arg>
</arguments>
<status endtime="20190121 15:28:51.570" status="PASS" starttime="20190121 15:28:51.565"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${250000}</arg>
<arg>${250_KBAUD}</arg>
<arg>${MSG_ID}</arg>
<arg>${MSG_ID_ISI}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:28:51.599" status="PASS" starttime="20190121 15:28:51.592"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:51.609" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:28:51.640" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:51.718" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:51.721" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:51.722" status="PASS" starttime="20190121 15:28:51.602"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:51.734" status="PASS" starttime="20190121 15:28:51.726"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:51.744" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg timestamp="20190121 15:28:51.773" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:51.830" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:51.834" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:51.835" status="PASS" starttime="20190121 15:28:51.737"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:51.847" status="PASS" starttime="20190121 15:28:51.838"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:51.857" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:28:51.886" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:51.981" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:51.984" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:51.985" status="PASS" starttime="20190121 15:28:51.850"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:52.004" status="PASS" starttime="20190121 15:28:51.994"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:28:52.007" status="PASS" starttime="20190121 15:28:51.582"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:52.017" level="INFO">Starting process:
candump -t a can2,1FF:1FF</msg>
<msg timestamp="20190121 15:28:52.047" level="INFO">${candump_ID} = 181</msg>
<status endtime="20190121 15:28:52.060" status="PASS" starttime="20190121 15:28:52.010"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status endtime="20190121 15:28:52.082" status="PASS" starttime="20190121 15:28:52.077"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:52.093" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 01</msg>
<status endtime="20190121 15:28:52.094" status="PASS" starttime="20190121 15:28:52.085"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:52.103" status="PASS" starttime="20190121 15:28:52.097"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:52.326" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 46 E1 C0</msg>
<status endtime="20190121 15:28:52.327" status="PASS" starttime="20190121 15:28:52.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:52.335" level="INFO">1E 10 54 93 00 08 00 0E AA 03 00 00 01 46 E1 C0</msg>
<status endtime="20190121 15:28:52.338" status="PASS" starttime="20190121 15:28:52.331"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:52.348" status="PASS" starttime="20190121 15:28:52.341"></status>
</kw>
<status endtime="20190121 15:28:52.351" status="PASS" starttime="20190121 15:28:52.063"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status endtime="20190121 15:28:52.370" status="PASS" starttime="20190121 15:28:52.362"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:52.380" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status endtime="20190121 15:28:52.381" status="PASS" starttime="20190121 15:28:52.373"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:52.389" status="PASS" starttime="20190121 15:28:52.384"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:52.617" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 47 E3 C7</msg>
<status endtime="20190121 15:28:52.618" status="PASS" starttime="20190121 15:28:52.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:52.625" level="INFO">1E 10 54 93 00 08 00 0E AA 05 02 00 01 47 E3 C7</msg>
<status endtime="20190121 15:28:52.628" status="PASS" starttime="20190121 15:28:52.621"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:52.638" status="PASS" starttime="20190121 15:28:52.631"></status>
</kw>
<status endtime="20190121 15:28:52.641" status="PASS" starttime="20190121 15:28:52.353"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status endtime="20190121 15:28:52.649" status="PASS" starttime="20190121 15:28:52.643"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:52.668" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 00 00 01 FF 080000FF 1122334455667788</msg>
<status endtime="20190121 15:28:52.669" status="PASS" starttime="20190121 15:28:52.660"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:52.678" status="PASS" starttime="20190121 15:28:52.672"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:52.892" level="INFO">${info} = </msg>
<status endtime="20190121 15:28:52.894" status="PASS" starttime="20190121 15:28:52.681"></status>
</kw>
<status endtime="20190121 15:28:52.897" status="PASS" starttime="20190121 15:28:52.651"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:52.911" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:53.934" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:53.936" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:53.940" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:53.943" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:53.944" status="PASS" starttime="20190121 15:28:52.906"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:53.952" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:28:53.954" level="INFO">${temp} = [' (1548084532.730464)  can2  1FF   [8]  11 22 33 44 55 66 77 88']</msg>
<status endtime="20190121 15:28:53.955" status="PASS" starttime="20190121 15:28:53.947"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:53.963" level="INFO">(1548084532.730464)  can2  1FF   [8]  11 22 33 44 55 66 77 88</msg>
<msg timestamp="20190121 15:28:53.965" level="INFO">${ret_list} = [{'id': '1FF', 'timestamp': '1548084532.730464', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:53.966" status="PASS" starttime="20190121 15:28:53.958"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:53.974" status="PASS" starttime="20190121 15:28:53.968"></status>
</kw>
<msg timestamp="20190121 15:28:53.979" level="INFO">${resp_list} = [{'id': '1FF', 'timestamp': '1548084532.730464', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:53.980" status="PASS" starttime="20190121 15:28:52.899"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:28:53.991" level="INFO">${res_dict} = {'count': 1, 'status': True}</msg>
<status endtime="20190121 15:28:53.992" status="PASS" starttime="20190121 15:28:53.983"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:28:54.001" status="PASS" starttime="20190121 15:28:53.995"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:28:54.036" level="INFO">${value} = True</msg>
<status endtime="20190121 15:28:54.036" status="PASS" starttime="20190121 15:28:54.004"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:28:54.044" status="PASS" starttime="20190121 15:28:54.039"></status>
</kw>
<msg timestamp="20190121 15:28:54.048" level="INFO">${resp} = True</msg>
<status endtime="20190121 15:28:54.049" status="PASS" starttime="20190121 15:28:51.572"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:28:54.056" status="PASS" starttime="20190121 15:28:54.052"></status>
</kw>
<status endtime="20190121 15:28:54.058" status="PASS" starttime="20190121 15:28:51.559"></status>
</kw>
<kw name="cansend_250k_ex">
<doc>Trigger to send can message on can with 29 bit ID and bitrate 250000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with 29 bit ID and bitrate 250000</arg>
</arguments>
<status endtime="20190121 15:28:54.073" status="PASS" starttime="20190121 15:28:54.068"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${250000}</arg>
<arg>${250_KBAUD}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:28:54.103" status="PASS" starttime="20190121 15:28:54.095"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:54.112" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:28:54.142" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:54.215" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:54.218" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:54.219" status="PASS" starttime="20190121 15:28:54.106"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:54.234" status="PASS" starttime="20190121 15:28:54.223"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:54.249" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg timestamp="20190121 15:28:54.278" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:54.339" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:54.342" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:54.343" status="PASS" starttime="20190121 15:28:54.237"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:54.356" status="PASS" starttime="20190121 15:28:54.347"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:54.366" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:28:54.395" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:54.493" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:54.497" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:54.498" status="PASS" starttime="20190121 15:28:54.359"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:54.510" status="PASS" starttime="20190121 15:28:54.502"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:28:54.513" status="PASS" starttime="20190121 15:28:54.085"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:54.523" level="INFO">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg timestamp="20190121 15:28:54.554" level="INFO">${candump_ID} = 185</msg>
<status endtime="20190121 15:28:54.555" status="PASS" starttime="20190121 15:28:54.516"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status endtime="20190121 15:28:54.589" status="PASS" starttime="20190121 15:28:54.583"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:54.599" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 01</msg>
<status endtime="20190121 15:28:54.599" status="PASS" starttime="20190121 15:28:54.592"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:54.608" status="PASS" starttime="20190121 15:28:54.603"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:54.982" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 42 E1 C4</msg>
<status endtime="20190121 15:28:54.983" status="PASS" starttime="20190121 15:28:54.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:55.009" level="INFO">1E 10 54 93 00 08 00 0E AA 03 00 00 01 42 E1 C4</msg>
<status endtime="20190121 15:28:55.013" status="PASS" starttime="20190121 15:28:54.987"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:55.023" status="PASS" starttime="20190121 15:28:55.016"></status>
</kw>
<status endtime="20190121 15:28:55.025" status="PASS" starttime="20190121 15:28:54.562"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status endtime="20190121 15:28:55.041" status="PASS" starttime="20190121 15:28:55.036"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:55.051" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status endtime="20190121 15:28:55.052" status="PASS" starttime="20190121 15:28:55.044"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:55.062" status="PASS" starttime="20190121 15:28:55.055"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:55.281" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 43 E3 C3</msg>
<status endtime="20190121 15:28:55.282" status="PASS" starttime="20190121 15:28:55.065"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:55.291" level="INFO">1E 10 54 93 00 08 00 0E AA 05 02 00 01 43 E3 C3</msg>
<status endtime="20190121 15:28:55.294" status="PASS" starttime="20190121 15:28:55.287"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:55.306" status="PASS" starttime="20190121 15:28:55.297"></status>
</kw>
<status endtime="20190121 15:28:55.309" status="PASS" starttime="20190121 15:28:55.027"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status endtime="20190121 15:28:55.319" status="PASS" starttime="20190121 15:28:55.312"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:55.339" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:28:55.340" status="PASS" starttime="20190121 15:28:55.330"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:55.349" status="PASS" starttime="20190121 15:28:55.343"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:55.565" level="INFO">${info} = </msg>
<status endtime="20190121 15:28:55.566" status="PASS" starttime="20190121 15:28:55.359"></status>
</kw>
<status endtime="20190121 15:28:55.569" status="PASS" starttime="20190121 15:28:55.321"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:55.582" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:56.592" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:56.594" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:56.598" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:56.601" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:56.602" status="PASS" starttime="20190121 15:28:55.577"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:56.610" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:28:56.612" level="INFO">${temp} = [' (1548084535.428308)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88']</msg>
<status endtime="20190121 15:28:56.613" status="PASS" starttime="20190121 15:28:56.605"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:56.625" level="INFO">(1548084535.428308)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88</msg>
<msg timestamp="20190121 15:28:56.627" level="INFO">${ret_list} = [{'id': '18EF1B05', 'timestamp': '1548084535.428308', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:56.627" status="PASS" starttime="20190121 15:28:56.616"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:56.636" status="PASS" starttime="20190121 15:28:56.630"></status>
</kw>
<msg timestamp="20190121 15:28:56.640" level="INFO">${resp_list} = [{'id': '18EF1B05', 'timestamp': '1548084535.428308', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:56.641" status="PASS" starttime="20190121 15:28:55.571"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:28:56.650" level="INFO">${res_dict} = {'count': 1, 'status': True}</msg>
<status endtime="20190121 15:28:56.652" status="PASS" starttime="20190121 15:28:56.644"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:28:56.661" status="PASS" starttime="20190121 15:28:56.655"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:28:56.695" level="INFO">${value} = True</msg>
<status endtime="20190121 15:28:56.696" status="PASS" starttime="20190121 15:28:56.663"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:28:56.703" status="PASS" starttime="20190121 15:28:56.699"></status>
</kw>
<msg timestamp="20190121 15:28:56.708" level="INFO">${resp} = True</msg>
<status endtime="20190121 15:28:56.709" status="PASS" starttime="20190121 15:28:54.075"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:28:56.716" status="PASS" starttime="20190121 15:28:56.711"></status>
</kw>
<status endtime="20190121 15:28:56.718" status="PASS" starttime="20190121 15:28:54.062"></status>
</kw>
<kw name="cansend_125k">
<doc>Trigger to send can message on can with bitrate 125000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with bitrate 125000</arg>
</arguments>
<status endtime="20190121 15:28:56.731" status="PASS" starttime="20190121 15:28:56.726"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${125000}</arg>
<arg>${125_KBAUD}</arg>
<arg>${MSG_ID}</arg>
<arg>${MSG_ID_ISI}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:28:56.761" status="PASS" starttime="20190121 15:28:56.753"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:56.770" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:28:56.799" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:56.873" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:56.878" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:56.879" status="PASS" starttime="20190121 15:28:56.764"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:56.891" status="PASS" starttime="20190121 15:28:56.882"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:56.901" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg timestamp="20190121 15:28:56.930" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:56.989" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:56.992" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:56.993" status="PASS" starttime="20190121 15:28:56.894"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:57.006" status="PASS" starttime="20190121 15:28:56.997"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:57.016" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:28:57.045" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:57.143" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:57.146" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:57.147" status="PASS" starttime="20190121 15:28:57.009"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:57.160" status="PASS" starttime="20190121 15:28:57.151"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:28:57.162" status="PASS" starttime="20190121 15:28:56.743"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:57.173" level="INFO">Starting process:
candump -t a can2,1FF:1FF</msg>
<msg timestamp="20190121 15:28:57.204" level="INFO">${candump_ID} = 189</msg>
<status endtime="20190121 15:28:57.205" status="PASS" starttime="20190121 15:28:57.166"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status endtime="20190121 15:28:57.240" status="PASS" starttime="20190121 15:28:57.226"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:57.252" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 00</msg>
<status endtime="20190121 15:28:57.253" status="PASS" starttime="20190121 15:28:57.243"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:57.262" status="PASS" starttime="20190121 15:28:57.256"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:57.464" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 44 E1 C2</msg>
<status endtime="20190121 15:28:57.466" status="PASS" starttime="20190121 15:28:57.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:57.473" level="INFO">1E 10 54 93 00 08 00 0E AA 03 00 00 01 44 E1 C2</msg>
<status endtime="20190121 15:28:57.475" status="PASS" starttime="20190121 15:28:57.469"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:57.487" status="PASS" starttime="20190121 15:28:57.478"></status>
</kw>
<status endtime="20190121 15:28:57.489" status="PASS" starttime="20190121 15:28:57.208"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status endtime="20190121 15:28:57.508" status="PASS" starttime="20190121 15:28:57.500"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:57.518" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status endtime="20190121 15:28:57.519" status="PASS" starttime="20190121 15:28:57.512"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:57.528" status="PASS" starttime="20190121 15:28:57.522"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:57.757" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 45 E3 C5</msg>
<status endtime="20190121 15:28:57.758" status="PASS" starttime="20190121 15:28:57.531"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:57.765" level="INFO">1E 10 54 93 00 08 00 0E AA 05 02 00 01 45 E3 C5</msg>
<status endtime="20190121 15:28:57.768" status="PASS" starttime="20190121 15:28:57.761"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:57.778" status="PASS" starttime="20190121 15:28:57.771"></status>
</kw>
<status endtime="20190121 15:28:57.781" status="PASS" starttime="20190121 15:28:57.491"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status endtime="20190121 15:28:57.789" status="PASS" starttime="20190121 15:28:57.784"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:57.808" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 00 00 01 FF 080000FF 1122334455667788</msg>
<status endtime="20190121 15:28:57.809" status="PASS" starttime="20190121 15:28:57.800"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:57.818" status="PASS" starttime="20190121 15:28:57.812"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:58.034" level="INFO">${info} = </msg>
<status endtime="20190121 15:28:58.035" status="PASS" starttime="20190121 15:28:57.821"></status>
</kw>
<status endtime="20190121 15:28:58.039" status="PASS" starttime="20190121 15:28:57.791"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:28:58.053" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:59.058" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:28:59.060" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:28:59.065" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:59.067" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:28:59.068" status="PASS" starttime="20190121 15:28:58.049"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:28:59.076" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:28:59.079" level="INFO">${temp} = [' (1548084537.871459)  can2  1FF   [8]  11 22 33 44 55 66 77 88']</msg>
<status endtime="20190121 15:28:59.079" status="PASS" starttime="20190121 15:28:59.071"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:28:59.087" level="INFO">(1548084537.871459)  can2  1FF   [8]  11 22 33 44 55 66 77 88</msg>
<msg timestamp="20190121 15:28:59.089" level="INFO">${ret_list} = [{'id': '1FF', 'timestamp': '1548084537.871459', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:59.090" status="PASS" starttime="20190121 15:28:59.082"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:28:59.098" status="PASS" starttime="20190121 15:28:59.093"></status>
</kw>
<msg timestamp="20190121 15:28:59.103" level="INFO">${resp_list} = [{'id': '1FF', 'timestamp': '1548084537.871459', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:28:59.103" status="PASS" starttime="20190121 15:28:58.041"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:28:59.113" level="INFO">${res_dict} = {'count': 1, 'status': True}</msg>
<status endtime="20190121 15:28:59.114" status="PASS" starttime="20190121 15:28:59.106"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:28:59.122" status="PASS" starttime="20190121 15:28:59.117"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:28:59.157" level="INFO">${value} = True</msg>
<status endtime="20190121 15:28:59.158" status="PASS" starttime="20190121 15:28:59.125"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:28:59.166" status="PASS" starttime="20190121 15:28:59.161"></status>
</kw>
<msg timestamp="20190121 15:28:59.170" level="INFO">${resp} = True</msg>
<status endtime="20190121 15:28:59.171" status="PASS" starttime="20190121 15:28:56.733"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:28:59.178" status="PASS" starttime="20190121 15:28:59.173"></status>
</kw>
<status endtime="20190121 15:28:59.180" status="PASS" starttime="20190121 15:28:56.720"></status>
</kw>
<kw name="cansend_125k_ex">
<doc>Trigger to send can message on can with 29 ID and bitrate 125000</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send can message on can with 29 ID and bitrate 125000</arg>
</arguments>
<status endtime="20190121 15:28:59.193" status="PASS" starttime="20190121 15:28:59.188"></status>
</kw>
<kw name="send_message">
<doc>Trigger to send a Can message with Can ID</doc>
<arguments>
<arg>${125000}</arg>
<arg>${125_KBAUD}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${BITRATE}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:28:59.222" status="PASS" starttime="20190121 15:28:59.214"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:59.231" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:28:59.260" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:59.333" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:59.336" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:59.337" status="PASS" starttime="20190121 15:28:59.225"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:59.349" status="PASS" starttime="20190121 15:28:59.341"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:59.364" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg timestamp="20190121 15:28:59.394" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:59.452" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:59.455" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:59.456" status="PASS" starttime="20190121 15:28:59.352"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:59.469" status="PASS" starttime="20190121 15:28:59.460"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:28:59.478" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:28:59.506" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:28:59.605" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:28:59.608" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:28:59.609" status="PASS" starttime="20190121 15:28:59.472"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:28:59.622" status="PASS" starttime="20190121 15:28:59.613"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:28:59.625" status="PASS" starttime="20190121 15:28:59.205"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${CAN_MSG_ID}:${CAN_MSG_ID}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:28:59.636" level="INFO">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg timestamp="20190121 15:28:59.666" level="INFO">${candump_ID} = 193</msg>
<status endtime="20190121 15:28:59.667" status="PASS" starttime="20190121 15:28:59.629"></status>
</kw>
<kw name="can_setup_bitrate">
<doc>Can setup channel and bitrate</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${BITRATE_ISIMSGVAL}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate</arg>
</arguments>
<status endtime="20190121 15:28:59.699" status="PASS" starttime="20190121 15:28:59.688"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:59.709" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 00</msg>
<status endtime="20190121 15:28:59.710" status="PASS" starttime="20190121 15:28:59.703"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:59.719" status="PASS" starttime="20190121 15:28:59.713"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:28:59.922" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 03 00 00 01 46 E1 C0</msg>
<status endtime="20190121 15:28:59.923" status="PASS" starttime="20190121 15:28:59.722"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:28:59.931" level="INFO">1E 10 54 93 00 08 00 0E AA 03 00 00 01 46 E1 C0</msg>
<status endtime="20190121 15:28:59.933" status="PASS" starttime="20190121 15:28:59.926"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:28:59.944" status="PASS" starttime="20190121 15:28:59.937"></status>
</kw>
<status endtime="20190121 15:28:59.946" status="PASS" starttime="20190121 15:28:59.678"></status>
</kw>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_ON}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status endtime="20190121 15:28:59.961" status="PASS" starttime="20190121 15:28:59.957"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:28:59.972" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 01</msg>
<status endtime="20190121 15:28:59.973" status="PASS" starttime="20190121 15:28:59.965"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:28:59.982" status="PASS" starttime="20190121 15:28:59.976"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:00.211" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 47 E3 C7</msg>
<status endtime="20190121 15:29:00.212" status="PASS" starttime="20190121 15:28:59.985"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:29:00.219" level="INFO">1E 10 54 93 00 08 00 0E AA 05 02 00 01 47 E3 C7</msg>
<status endtime="20190121 15:29:00.222" status="PASS" starttime="20190121 15:29:00.215"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:00.233" status="PASS" starttime="20190121 15:29:00.225"></status>
</kw>
<status endtime="20190121 15:29:00.235" status="PASS" starttime="20190121 15:28:59.948"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send can message with ID: ${CAN_MSG_ID}</arg>
</arguments>
<status endtime="20190121 15:29:00.244" status="PASS" starttime="20190121 15:29:00.238"></status>
</kw>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CAN_MSG_ID_ISI}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:00.267" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:00.268" status="PASS" starttime="20190121 15:29:00.257"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:00.278" status="PASS" starttime="20190121 15:29:00.271"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:00.498" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:00.498" status="PASS" starttime="20190121 15:29:00.281"></status>
</kw>
<status endtime="20190121 15:29:00.501" status="PASS" starttime="20190121 15:29:00.246"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:29:00.517" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:29:01.522" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:29:01.524" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:29:01.528" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:29:01.531" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:29:01.532" status="PASS" starttime="20190121 15:29:00.513"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:29:01.540" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:29:01.542" level="INFO">${temp} = [' (1548084540.332993)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88']</msg>
<status endtime="20190121 15:29:01.543" status="PASS" starttime="20190121 15:29:01.534"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:29:01.554" level="INFO">(1548084540.332993)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88</msg>
<msg timestamp="20190121 15:29:01.556" level="INFO">${ret_list} = [{'id': '18EF1B05', 'timestamp': '1548084540.332993', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:29:01.557" status="PASS" starttime="20190121 15:29:01.546"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:29:01.566" status="PASS" starttime="20190121 15:29:01.560"></status>
</kw>
<msg timestamp="20190121 15:29:01.570" level="INFO">${resp_list} = [{'id': '18EF1B05', 'timestamp': '1548084540.332993', 'payload': '1122334455667788', 'channel': 'can2'}]</msg>
<status endtime="20190121 15:29:01.571" status="PASS" starttime="20190121 15:29:00.503"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${CAN_MSG_ID}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:29:01.580" level="INFO">${res_dict} = {'count': 1, 'status': True}</msg>
<status endtime="20190121 15:29:01.581" status="PASS" starttime="20190121 15:29:01.574"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:29:01.589" status="PASS" starttime="20190121 15:29:01.584"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:01.624" level="INFO">${value} = True</msg>
<status endtime="20190121 15:29:01.625" status="PASS" starttime="20190121 15:29:01.592"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:29:01.633" status="PASS" starttime="20190121 15:29:01.628"></status>
</kw>
<msg timestamp="20190121 15:29:01.636" level="INFO">${resp} = True</msg>
<status endtime="20190121 15:29:01.637" status="PASS" starttime="20190121 15:28:59.195"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:01.644" status="PASS" starttime="20190121 15:29:01.640"></status>
</kw>
<status endtime="20190121 15:29:01.647" status="PASS" starttime="20190121 15:28:59.182"></status>
</kw>
<kw name="can_setup_bitrate_1000k_negativtest">
<doc>Can setup channel and not supported bitrate 1000k negativtest</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and not supported bitrate 1000k negativtest</arg>
</arguments>
<status endtime="20190121 15:29:01.661" status="PASS" starttime="20190121 15:29:01.656"></status>
</kw>
<kw name="can_setup_bitrate_negativtest">
<doc>Can setup channel and bitrate negativtest</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${1000_KBAUD}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Can setup channel and bitrate negativtest</arg>
</arguments>
<status endtime="20190121 15:29:01.676" status="PASS" starttime="20190121 15:29:01.671"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SETUP_REQ} ${CAN_BUS} ${BITRATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:01.685" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 02 02 03</msg>
<status endtime="20190121 15:29:01.686" status="PASS" starttime="20190121 15:29:01.679"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set bitrate: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:01.695" status="PASS" starttime="20190121 15:29:01.689"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:01.902" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 03 04 00 01 40 E5 C6</msg>
<status endtime="20190121 15:29:01.903" status="PASS" starttime="20190121 15:29:01.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:29:01.910" level="INFO">1E 10 54 93 00 08 00 0E AA 03 04 00 01 40 E5 C6</msg>
<status endtime="20190121 15:29:01.913" status="PASS" starttime="20190121 15:29:01.906"></status>
</kw>
<kw name="Should Not Contain" library="BuiltIn">
<doc>Fails if ``container`` contains ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SETUP_RESP} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:01.922" status="PASS" starttime="20190121 15:29:01.916"></status>
</kw>
<status endtime="20190121 15:29:01.925" status="PASS" starttime="20190121 15:29:01.663"></status>
</kw>
<status endtime="20190121 15:29:01.927" status="PASS" starttime="20190121 15:29:01.650"></status>
</kw>
<kw name="trigger_can_message_125k">
<doc>Trigger to send 5 can messages on specified can channel without change any settings</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Trigger to send 5 can messages on specified can channel without change any settings</arg>
</arguments>
<status endtime="20190121 15:29:01.940" status="PASS" starttime="20190121 15:29:01.935"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${125000}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:29:01.963" status="PASS" starttime="20190121 15:29:01.952"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:29:01.973" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:29:02.002" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:29:02.097" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:29:02.100" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:29:02.104" status="PASS" starttime="20190121 15:29:01.966"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:29:02.118" status="PASS" starttime="20190121 15:29:02.109"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:29:02.128" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg timestamp="20190121 15:29:02.158" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:29:02.215" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:29:02.218" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:29:02.219" status="PASS" starttime="20190121 15:29:02.121"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:29:02.231" status="PASS" starttime="20190121 15:29:02.223"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:29:02.241" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:29:02.270" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:29:02.366" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:29:02.369" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:29:02.371" status="PASS" starttime="20190121 15:29:02.235"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:29:02.383" status="PASS" starttime="20190121 15:29:02.374"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:29:02.386" status="PASS" starttime="20190121 15:29:01.942"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${MSG_ID_EX}:${MSG_ID_EX}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:29:02.396" level="INFO">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg timestamp="20190121 15:29:02.426" level="INFO">${candump_ID} = 197</msg>
<status endtime="20190121 15:29:02.428" status="PASS" starttime="20190121 15:29:02.389"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>5 times</arg>
<arg>trigger_to_send_can_msg</arg>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<msg timestamp="20190121 15:29:02.444" level="INFO">Repeating keyword, round 1/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:02.486" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:02.487" status="PASS" starttime="20190121 15:29:02.463"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:02.496" status="PASS" starttime="20190121 15:29:02.490"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:02.694" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:02.695" status="PASS" starttime="20190121 15:29:02.499"></status>
</kw>
<status endtime="20190121 15:29:02.697" status="PASS" starttime="20190121 15:29:02.447"></status>
</kw>
<msg timestamp="20190121 15:29:02.698" level="INFO">Repeating keyword, round 2/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:02.717" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:02.718" status="PASS" starttime="20190121 15:29:02.709"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:02.727" status="PASS" starttime="20190121 15:29:02.721"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:02.917" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:02.918" status="PASS" starttime="20190121 15:29:02.730"></status>
</kw>
<status endtime="20190121 15:29:02.920" status="PASS" starttime="20190121 15:29:02.701"></status>
</kw>
<msg timestamp="20190121 15:29:02.921" level="INFO">Repeating keyword, round 3/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:02.941" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:02.941" status="PASS" starttime="20190121 15:29:02.932"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:02.950" status="PASS" starttime="20190121 15:29:02.944"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:03.142" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:03.143" status="PASS" starttime="20190121 15:29:02.953"></status>
</kw>
<status endtime="20190121 15:29:03.146" status="PASS" starttime="20190121 15:29:02.924"></status>
</kw>
<msg timestamp="20190121 15:29:03.147" level="INFO">Repeating keyword, round 4/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:03.167" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:03.167" status="PASS" starttime="20190121 15:29:03.159"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:03.176" status="PASS" starttime="20190121 15:29:03.170"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:03.396" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:03.397" status="PASS" starttime="20190121 15:29:03.179"></status>
</kw>
<status endtime="20190121 15:29:03.399" status="PASS" starttime="20190121 15:29:03.150"></status>
</kw>
<msg timestamp="20190121 15:29:03.400" level="INFO">Repeating keyword, round 5/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:03.419" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:03.420" status="PASS" starttime="20190121 15:29:03.411"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:03.429" status="PASS" starttime="20190121 15:29:03.423"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:03.649" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:03.650" status="PASS" starttime="20190121 15:29:03.432"></status>
</kw>
<status endtime="20190121 15:29:03.652" status="PASS" starttime="20190121 15:29:03.403"></status>
</kw>
<status endtime="20190121 15:29:03.654" status="PASS" starttime="20190121 15:29:02.439"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:29:03.667" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:29:04.672" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:29:04.674" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:29:04.678" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:29:04.680" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:29:04.682" status="PASS" starttime="20190121 15:29:03.662"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:29:04.690" level="INFO">5 lines returned</msg>
<msg timestamp="20190121 15:29:04.693" level="INFO">${temp} = [' (1548084542.550172)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88', ' (1548084542.780305)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88', ' (1548084543.004819)  can2  18EF1B05   [8]  11 22 33 44 ...</msg>
<status endtime="20190121 15:29:04.694" status="PASS" starttime="20190121 15:29:04.685"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:29:04.702" level="INFO">(1548084542.550172)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88
 (1548084542.780305)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88
 (1548084543.004819)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88
 (1548084543.258615)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88
 (1548084543.510986)  can2  18EF1B05   [8]  11 22 33 44 55 66 77 88</msg>
<msg timestamp="20190121 15:29:04.704" level="INFO">${ret_list} = [{'id': '18EF1B05', 'timestamp': '1548084542.550172', 'payload': '1122334455667788', 'channel': 'can2'}, {'id': '18EF1B05', 'timestamp': '1548084542.780305', 'payload': '1122334455667788', 'channel': ...</msg>
<status endtime="20190121 15:29:04.705" status="PASS" starttime="20190121 15:29:04.697"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:29:04.714" status="PASS" starttime="20190121 15:29:04.708"></status>
</kw>
<msg timestamp="20190121 15:29:04.718" level="INFO">${resp_list} = [{'id': '18EF1B05', 'timestamp': '1548084542.550172', 'payload': '1122334455667788', 'channel': 'can2'}, {'id': '18EF1B05', 'timestamp': '1548084542.780305', 'payload': '1122334455667788', 'channel': ...</msg>
<status endtime="20190121 15:29:04.719" status="PASS" starttime="20190121 15:29:03.656"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:29:04.728" level="INFO">${res_dict} = {'count': 5, 'status': True}</msg>
<status endtime="20190121 15:29:04.729" status="PASS" starttime="20190121 15:29:04.722"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:29:04.738" status="PASS" starttime="20190121 15:29:04.732"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:04.808" level="INFO">${value} = True</msg>
<status endtime="20190121 15:29:04.808" status="PASS" starttime="20190121 15:29:04.741"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:29:04.816" status="PASS" starttime="20190121 15:29:04.811"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("count")</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:29:04.849" level="INFO">${count} = 5</msg>
<status endtime="20190121 15:29:04.850" status="PASS" starttime="20190121 15:29:04.819"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${5}</arg>
<arg>${count}</arg>
</arguments>
<status endtime="20190121 15:29:04.859" status="PASS" starttime="20190121 15:29:04.853"></status>
</kw>
<status endtime="20190121 15:29:04.862" status="PASS" starttime="20190121 15:29:01.929"></status>
</kw>
<kw name="set_controller_off">
<doc>Test controller switching off</doc>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_OFF}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status endtime="20190121 15:29:04.883" status="PASS" starttime="20190121 15:29:04.879"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:04.893" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 00</msg>
<status endtime="20190121 15:29:04.894" status="PASS" starttime="20190121 15:29:04.886"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:04.903" status="PASS" starttime="20190121 15:29:04.897"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:05.106" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 41 E3 C1</msg>
<status endtime="20190121 15:29:05.107" status="PASS" starttime="20190121 15:29:04.906"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:29:05.115" level="INFO">1E 10 54 93 00 08 00 0E AA 05 02 00 01 41 E3 C1</msg>
<status endtime="20190121 15:29:05.118" status="PASS" starttime="20190121 15:29:05.111"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:05.129" status="PASS" starttime="20190121 15:29:05.121"></status>
</kw>
<status endtime="20190121 15:29:05.131" status="PASS" starttime="20190121 15:29:04.870"></status>
</kw>
<status endtime="20190121 15:29:05.133" status="PASS" starttime="20190121 15:29:04.864"></status>
</kw>
<kw name="channel_off_trigger_can_message_125k_negativtest">
<doc>Set the channel off and trigger to send 5 can messages on specified can channel</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the channel off and trigger to send 5 can messages on specified can channel</arg>
</arguments>
<status endtime="20190121 15:29:05.147" status="PASS" starttime="20190121 15:29:05.142"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_CH}</arg>
<arg>${125000}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:29:05.166" status="PASS" starttime="20190121 15:29:05.159"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:29:05.177" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:29:05.205" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:29:05.301" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:29:05.303" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:29:05.308" status="PASS" starttime="20190121 15:29:05.169"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:29:05.322" status="PASS" starttime="20190121 15:29:05.312"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:29:05.332" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 125000</msg>
<msg timestamp="20190121 15:29:05.361" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:29:05.418" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:29:05.422" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:29:05.423" status="PASS" starttime="20190121 15:29:05.325"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:29:05.436" status="PASS" starttime="20190121 15:29:05.427"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:29:05.445" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:29:05.477" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:29:05.573" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:29:05.576" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:29:05.577" status="PASS" starttime="20190121 15:29:05.439"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:29:05.589" status="PASS" starttime="20190121 15:29:05.581"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:29:05.592" status="PASS" starttime="20190121 15:29:05.149"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_CH},${MSG_ID_EX}:${MSG_ID_EX}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:29:05.602" level="INFO">Starting process:
candump -t a can2,18EF1B05:18EF1B05</msg>
<msg timestamp="20190121 15:29:05.634" level="INFO">${candump_ID} = 201</msg>
<status endtime="20190121 15:29:05.635" status="PASS" starttime="20190121 15:29:05.595"></status>
</kw>
<kw name="Repeat Keyword" library="BuiltIn">
<doc>Executes the specified keyword multiple times.</doc>
<arguments>
<arg>5 times</arg>
<arg>trigger_to_send_can_msg</arg>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<msg timestamp="20190121 15:29:05.651" level="INFO">Repeating keyword, round 1/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:05.672" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:05.673" status="PASS" starttime="20190121 15:29:05.664"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:05.693" status="PASS" starttime="20190121 15:29:05.683"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:05.903" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:05.904" status="PASS" starttime="20190121 15:29:05.696"></status>
</kw>
<status endtime="20190121 15:29:05.908" status="PASS" starttime="20190121 15:29:05.654"></status>
</kw>
<msg timestamp="20190121 15:29:05.909" level="INFO">Repeating keyword, round 2/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:05.929" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:05.930" status="PASS" starttime="20190121 15:29:05.921"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:05.938" status="PASS" starttime="20190121 15:29:05.933"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:06.142" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:06.143" status="PASS" starttime="20190121 15:29:05.942"></status>
</kw>
<status endtime="20190121 15:29:06.150" status="PASS" starttime="20190121 15:29:05.912"></status>
</kw>
<msg timestamp="20190121 15:29:06.151" level="INFO">Repeating keyword, round 3/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:06.182" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:06.183" status="PASS" starttime="20190121 15:29:06.174"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:06.191" status="PASS" starttime="20190121 15:29:06.186"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:06.398" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:06.399" status="PASS" starttime="20190121 15:29:06.194"></status>
</kw>
<status endtime="20190121 15:29:06.402" status="PASS" starttime="20190121 15:29:06.157"></status>
</kw>
<msg timestamp="20190121 15:29:06.403" level="INFO">Repeating keyword, round 4/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:06.430" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:06.431" status="PASS" starttime="20190121 15:29:06.421"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:06.439" status="PASS" starttime="20190121 15:29:06.434"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:06.638" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:06.639" status="PASS" starttime="20190121 15:29:06.442"></status>
</kw>
<status endtime="20190121 15:29:06.646" status="PASS" starttime="20190121 15:29:06.410"></status>
</kw>
<msg timestamp="20190121 15:29:06.647" level="INFO">Repeating keyword, round 5/5.</msg>
<kw name="trigger_to_send_can_msg">
<doc>Trigger to send a Can message on specified can channel with specified Can ID</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${MSG_ID_ISI_EXT}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_TX_REQ} ${CAN_BUS} ${PADDING} ${CAN_MSG_ID_ISI} ${DLC_TS_FILL} ${MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:06.676" level="INFO">${ISI_MSG} = 1E 54 10 93 00 16 00 00 AA 00 02 FF 98EF1B05 080000FF 1122334455667788</msg>
<status endtime="20190121 15:29:06.677" status="PASS" starttime="20190121 15:29:06.668"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Isi msg trigger to send a can msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:06.686" status="PASS" starttime="20190121 15:29:06.680"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${1}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:06.885" level="INFO">${info} = </msg>
<status endtime="20190121 15:29:06.887" status="PASS" starttime="20190121 15:29:06.689"></status>
</kw>
<status endtime="20190121 15:29:06.895" status="PASS" starttime="20190121 15:29:06.653"></status>
</kw>
<status endtime="20190121 15:29:06.896" status="PASS" starttime="20190121 15:29:05.647"></status>
</kw>
<kw name="get_candump_result">
<doc>Kill candump process, get stdout and convert result into dictionary</doc>
<assign>
<var>${resp_list}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=1 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:29:06.921" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:29:07.926" level="INFO">Process did not complete in 1 second.</msg>
<msg timestamp="20190121 15:29:07.928" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:29:07.932" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:29:07.934" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:29:07.935" status="PASS" starttime="20190121 15:29:06.916"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:29:07.944" level="INFO">0 lines returned</msg>
<msg timestamp="20190121 15:29:07.946" level="INFO">${temp} = []</msg>
<status endtime="20190121 15:29:07.947" status="PASS" starttime="20190121 15:29:07.938"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:29:07.955" level="INFO">${ret_list} = []</msg>
<status endtime="20190121 15:29:07.956" status="PASS" starttime="20190121 15:29:07.950"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${ret_list}</arg>
</arguments>
<status endtime="20190121 15:29:07.964" status="PASS" starttime="20190121 15:29:07.958"></status>
</kw>
<msg timestamp="20190121 15:29:07.968" level="INFO">${resp_list} = []</msg>
<status endtime="20190121 15:29:07.969" status="PASS" starttime="20190121 15:29:06.902"></status>
</kw>
<kw name="Check If Id With Msg Exist" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>This function check if can id with this message exist</doc>
<arguments>
<arg>${resp_list}</arg>
<arg>${MSG_ID_EX}</arg>
<arg>${MSG}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:29:07.978" level="INFO">${res_dict} = {'count': 0, 'status': False}</msg>
<status endtime="20190121 15:29:07.979" status="PASS" starttime="20190121 15:29:07.972"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:29:07.987" status="PASS" starttime="20190121 15:29:07.982"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:08.021" level="INFO">${value} = False</msg>
<status endtime="20190121 15:29:08.022" status="PASS" starttime="20190121 15:29:07.990"></status>
</kw>
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:29:08.032" status="PASS" starttime="20190121 15:29:08.028"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("count")</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:29:08.067" level="INFO">${count} = 0</msg>
<status endtime="20190121 15:29:08.068" status="PASS" starttime="20190121 15:29:08.037"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${0}</arg>
<arg>${count}</arg>
</arguments>
<status endtime="20190121 15:29:08.081" status="PASS" starttime="20190121 15:29:08.071"></status>
</kw>
<status endtime="20190121 15:29:08.084" status="PASS" starttime="20190121 15:29:05.136"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<doc>Teardown, Switch power off and close the Serial port, Switch off the CanController</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Teardown call</arg>
</arguments>
<status endtime="20190121 15:29:08.099" status="PASS" starttime="20190121 15:29:08.095"></status>
</kw>
<kw name="set_controller_off">
<doc>Test controller switching off</doc>
<kw name="set_controller_onoff">
<doc>Test controller switching on and off</doc>
<arguments>
<arg>${SOCKET_CAN_BUS}</arg>
<arg>${CONTROLLER_OFF}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test controller switching on and off</arg>
</arguments>
<status endtime="20190121 15:29:08.122" status="PASS" starttime="20190121 15:29:08.117"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${PHONET_AUTOSAR_BRIDGE_CAN_SET_STATE_REQ} ${CAN_BUS} ${CONTROLLER_STATE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:08.132" level="INFO">${ISI_MSG} = 1E 54 10 93 00 06 00 00 AA 04 02 00</msg>
<status endtime="20190121 15:29:08.133" status="PASS" starttime="20190121 15:29:08.125"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>ISI msg, set controller state: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:08.142" status="PASS" starttime="20190121 15:29:08.136"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${15}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:08.346" level="INFO">${info} = 1E 10 54 93 00 08 00 0E AA 05 02 00 01 45 E3 C5</msg>
<status endtime="20190121 15:29:08.347" status="PASS" starttime="20190121 15:29:08.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:29:08.355" level="INFO">1E 10 54 93 00 08 00 0E AA 05 02 00 01 45 E3 C5</msg>
<status endtime="20190121 15:29:08.357" status="PASS" starttime="20190121 15:29:08.350"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${CAN_SET_STATE_RESP} ${CAN_BUS} ${RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:08.368" status="PASS" starttime="20190121 15:29:08.360"></status>
</kw>
<status endtime="20190121 15:29:08.370" status="PASS" starttime="20190121 15:29:08.108"></status>
</kw>
<status endtime="20190121 15:29:08.373" status="PASS" starttime="20190121 15:29:08.101"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:08.437" status="PASS" starttime="20190121 15:29:08.376"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:08.506" status="PASS" starttime="20190121 15:29:08.445"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:29:08.554" status="PASS" starttime="20190121 15:29:08.510"></status>
</kw>
<status endtime="20190121 15:29:08.557" status="PASS" starttime="20190121 15:29:08.088"></status>
</kw>
<doc>Implements Test Task SKTB-47669 for can3 channel</doc>
<tags>
<tag>CAN 3 test TX</tag>
</tags>
<status critical="yes" endtime="20190121 15:29:08.558" status="PASS" starttime="20190121 15:28:39.328"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:29:10.103" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:29:10.163" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:29:10.164" status="PASS" starttime="20190121 15:29:08.606"></status>
</kw>
<status endtime="20190121 15:29:10.166" status="PASS" starttime="20190121 15:29:08.575"></status>
</kw>
<status endtime="20190121 15:29:10.168" status="PASS" starttime="20190121 15:29:08.569"></status>
</kw>
<doc>CAN 3 test TX with FBUS</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:29:10.168" status="PASS" starttime="20190121 15:28:36.488"></status>
</suite>
<suite id="s1-s10" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-48413.robot" name="SKTB-48413">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:29:10.831" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:29:10.848" status="PASS" starttime="20190121 15:29:10.807"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:29:10.856" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:29:10.862" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:29:13.126" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:29:13.128" status="PASS" starttime="20190121 15:29:10.850"></status>
</kw>
<status endtime="20190121 15:29:13.134" status="PASS" starttime="20190121 15:29:10.801"></status>
</kw>
<test id="s1-s10-t1" name="SKTB-48413 FBUS test">
<kw name="Test_precondition" type="setup">
<doc>switch kl15 and kl 30 and prodmod off and on after defined time</doc>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:13.292" status="PASS" starttime="20190121 15:29:13.203"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:13.429" status="PASS" starttime="20190121 15:29:13.295"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:13.569" status="PASS" starttime="20190121 15:29:13.432"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:29:15.577" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:29:15.579" status="PASS" starttime="20190121 15:29:13.573"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:29:15.628" status="PASS" starttime="20190121 15:29:15.582"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:29:15.678" status="PASS" starttime="20190121 15:29:15.631"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:29:15.726" status="PASS" starttime="20190121 15:29:15.681"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:29:15.776" status="PASS" starttime="20190121 15:29:15.729"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:29:15.826" status="PASS" starttime="20190121 15:29:15.780"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:29:15.905" status="PASS" starttime="20190121 15:29:15.829"></status>
</kw>
<kw name="Fbus Set State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${15000}</arg>
</arguments>
<status endtime="20190121 15:29:15.982" status="PASS" starttime="20190121 15:29:15.913"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:29:17.991" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:29:17.993" status="PASS" starttime="20190121 15:29:15.986"></status>
</kw>
<status endtime="20190121 15:29:17.996" status="PASS" starttime="20190121 15:29:13.181"></status>
</kw>
<kw name="digit_out_led1_freq">
<doc>Toggle digital output led 1 with the supported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle digital output led 1 with the supported frequency</arg>
</arguments>
<status endtime="20190121 15:29:18.010" status="PASS" starttime="20190121 15:29:18.005"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${FREQ_SUPPORTED}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:18.031" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 04 01 01</msg>
<status endtime="20190121 15:29:18.032" status="PASS" starttime="20190121 15:29:18.022"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:18.041" status="PASS" starttime="20190121 15:29:18.035"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:18.247" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 00 04 01 43 3D F5</msg>
<status endtime="20190121 15:29:18.249" status="PASS" starttime="20190121 15:29:18.044"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:18.258" status="PASS" starttime="20190121 15:29:18.252"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:18.268" status="PASS" starttime="20190121 15:29:18.260"></status>
</kw>
<status endtime="20190121 15:29:18.270" status="PASS" starttime="20190121 15:29:18.012"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status endtime="20190121 15:29:18.278" status="PASS" starttime="20190121 15:29:18.274"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:18.296" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 04</msg>
<status endtime="20190121 15:29:18.297" status="PASS" starttime="20190121 15:29:18.290"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:18.305" status="PASS" starttime="20190121 15:29:18.299"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:18.542" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 04 02 00 01 44 3E FB</msg>
<status endtime="20190121 15:29:18.543" status="PASS" starttime="20190121 15:29:18.308"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:18.552" status="PASS" starttime="20190121 15:29:18.547"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:18.563" status="PASS" starttime="20190121 15:29:18.555"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:18.574" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '04', '02', '00', '01', '44', '3E', 'FB']</msg>
<status endtime="20190121 15:29:18.575" status="PASS" starttime="20190121 15:29:18.566"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:18.584" level="INFO">${value} = 00</msg>
<status endtime="20190121 15:29:18.585" status="PASS" starttime="20190121 15:29:18.578"></status>
</kw>
<status endtime="20190121 15:29:18.588" status="PASS" starttime="20190121 15:29:18.280"></status>
</kw>
<status endtime="20190121 15:29:18.591" status="PASS" starttime="20190121 15:29:17.999"></status>
</kw>
<kw name="digit_out_led1_freq_negativtest">
<doc>Toggle the digital output led 1 with the notsupported frequency negativ test</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output led 1 with the notsupported frequency negativtest</arg>
</arguments>
<status endtime="20190121 15:29:18.617" status="PASS" starttime="20190121 15:29:18.599"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${FREQ_NOT_SUPPORTED}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:18.646" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 04 01 0B</msg>
<status endtime="20190121 15:29:18.647" status="PASS" starttime="20190121 15:29:18.638"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:18.655" status="PASS" starttime="20190121 15:29:18.650"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:18.859" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 01 04 01 47 3C F1</msg>
<status endtime="20190121 15:29:18.860" status="PASS" starttime="20190121 15:29:18.658"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:18.870" status="PASS" starttime="20190121 15:29:18.865"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:18.881" status="PASS" starttime="20190121 15:29:18.873"></status>
</kw>
<status endtime="20190121 15:29:18.883" status="PASS" starttime="20190121 15:29:18.620"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status endtime="20190121 15:29:18.891" status="PASS" starttime="20190121 15:29:18.886"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:18.909" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 04</msg>
<status endtime="20190121 15:29:18.909" status="PASS" starttime="20190121 15:29:18.903"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:18.919" status="PASS" starttime="20190121 15:29:18.912"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:19.150" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 04 02 00 01 40 3E FF</msg>
<status endtime="20190121 15:29:19.151" status="PASS" starttime="20190121 15:29:18.922"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:19.160" status="PASS" starttime="20190121 15:29:19.155"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:19.175" status="PASS" starttime="20190121 15:29:19.163"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:19.183" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '04', '02', '00', '01', '40', '3E', 'FF']</msg>
<status endtime="20190121 15:29:19.184" status="PASS" starttime="20190121 15:29:19.178"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:19.193" level="INFO">${value} = 00</msg>
<status endtime="20190121 15:29:19.194" status="PASS" starttime="20190121 15:29:19.187"></status>
</kw>
<status endtime="20190121 15:29:19.197" status="PASS" starttime="20190121 15:29:18.893"></status>
</kw>
<status endtime="20190121 15:29:19.199" status="PASS" starttime="20190121 15:29:18.593"></status>
</kw>
<kw name="digit_out_led1_high">
<doc>Set the digital output led 1 high and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output led 1 high and test it</arg>
</arguments>
<status endtime="20190121 15:29:19.212" status="PASS" starttime="20190121 15:29:19.207"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${IO_HIGH}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:19.232" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 04 01</msg>
<status endtime="20190121 15:29:19.233" status="PASS" starttime="20190121 15:29:19.226"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:19.241" status="PASS" starttime="20190121 15:29:19.236"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:19.472" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 04 01 41 3D F3</msg>
<status endtime="20190121 15:29:19.473" status="PASS" starttime="20190121 15:29:19.244"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:19.481" status="PASS" starttime="20190121 15:29:19.476"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:19.492" status="PASS" starttime="20190121 15:29:19.485"></status>
</kw>
<status endtime="20190121 15:29:19.495" status="PASS" starttime="20190121 15:29:19.215"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:19.512" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 04</msg>
<status endtime="20190121 15:29:19.513" status="PASS" starttime="20190121 15:29:19.506"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:19.521" status="PASS" starttime="20190121 15:29:19.516"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:19.750" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 04 00 01 01 42 3D FC</msg>
<status endtime="20190121 15:29:19.751" status="PASS" starttime="20190121 15:29:19.524"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:19.760" status="PASS" starttime="20190121 15:29:19.754"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:19.772" status="PASS" starttime="20190121 15:29:19.763"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:19.780" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '04', '00', '01', '01', '42', '3D', 'FC']</msg>
<status endtime="20190121 15:29:19.781" status="PASS" starttime="20190121 15:29:19.775"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:19.790" level="INFO">${value} = 01</msg>
<status endtime="20190121 15:29:19.791" status="PASS" starttime="20190121 15:29:19.784"></status>
</kw>
<msg timestamp="20190121 15:29:19.794" level="INFO">${res} = 01</msg>
<status endtime="20190121 15:29:19.795" status="PASS" starttime="20190121 15:29:19.497"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status endtime="20190121 15:29:19.803" status="PASS" starttime="20190121 15:29:19.798"></status>
</kw>
<status endtime="20190121 15:29:19.805" status="PASS" starttime="20190121 15:29:19.201"></status>
</kw>
<kw name="digit_out_led1_low">
<doc>Set the digital output led 1 low and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output led 1 low and test it</arg>
</arguments>
<status endtime="20190121 15:29:19.824" status="PASS" starttime="20190121 15:29:19.814"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${IO_LOW}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:19.842" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 04 00</msg>
<status endtime="20190121 15:29:19.843" status="PASS" starttime="20190121 15:29:19.836"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:19.860" status="PASS" starttime="20190121 15:29:19.846"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:20.082" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 04 01 45 3D F7</msg>
<status endtime="20190121 15:29:20.083" status="PASS" starttime="20190121 15:29:19.863"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:20.092" status="PASS" starttime="20190121 15:29:20.087"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:20.102" status="PASS" starttime="20190121 15:29:20.095"></status>
</kw>
<status endtime="20190121 15:29:20.105" status="PASS" starttime="20190121 15:29:19.826"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:20.126" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 04</msg>
<status endtime="20190121 15:29:20.127" status="PASS" starttime="20190121 15:29:20.120"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:20.136" status="PASS" starttime="20190121 15:29:20.130"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:20.399" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 04 00 00 01 46 3D F9</msg>
<status endtime="20190121 15:29:20.401" status="PASS" starttime="20190121 15:29:20.139"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:20.409" status="PASS" starttime="20190121 15:29:20.404"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:20.420" status="PASS" starttime="20190121 15:29:20.412"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:20.428" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '04', '00', '00', '01', '46', '3D', 'F9']</msg>
<status endtime="20190121 15:29:20.429" status="PASS" starttime="20190121 15:29:20.423"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:20.438" level="INFO">${value} = 00</msg>
<status endtime="20190121 15:29:20.439" status="PASS" starttime="20190121 15:29:20.432"></status>
</kw>
<msg timestamp="20190121 15:29:20.442" level="INFO">${res} = 00</msg>
<status endtime="20190121 15:29:20.443" status="PASS" starttime="20190121 15:29:20.107"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_LOW}</arg>
</arguments>
<status endtime="20190121 15:29:20.451" status="PASS" starttime="20190121 15:29:20.446"></status>
</kw>
<status endtime="20190121 15:29:20.453" status="PASS" starttime="20190121 15:29:19.807"></status>
</kw>
<kw name="digit_out_led2_freq">
<doc>Toggle the digital output led 2 with the supported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output led 2</arg>
<arg>with the supported frequency</arg>
</arguments>
<status endtime="20190121 15:29:20.466" status="PASS" starttime="20190121 15:29:20.461"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${FREQ_SUPPORTED}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:20.486" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 05 01 01</msg>
<status endtime="20190121 15:29:20.487" status="PASS" starttime="20190121 15:29:20.478"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:20.495" status="PASS" starttime="20190121 15:29:20.490"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:20.722" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 00 05 01 47 3D F0</msg>
<status endtime="20190121 15:29:20.723" status="PASS" starttime="20190121 15:29:20.499"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:20.732" status="PASS" starttime="20190121 15:29:20.727"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:20.743" status="PASS" starttime="20190121 15:29:20.735"></status>
</kw>
<status endtime="20190121 15:29:20.745" status="PASS" starttime="20190121 15:29:20.469"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status endtime="20190121 15:29:20.753" status="PASS" starttime="20190121 15:29:20.748"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:20.770" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 05</msg>
<status endtime="20190121 15:29:20.771" status="PASS" starttime="20190121 15:29:20.764"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:20.779" status="PASS" starttime="20190121 15:29:20.774"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:21.011" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 05 02 00 01 40 3E FE</msg>
<status endtime="20190121 15:29:21.012" status="PASS" starttime="20190121 15:29:20.782"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:21.021" status="PASS" starttime="20190121 15:29:21.016"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:21.032" status="PASS" starttime="20190121 15:29:21.024"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:21.040" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '05', '02', '00', '01', '40', '3E', 'FE']</msg>
<status endtime="20190121 15:29:21.041" status="PASS" starttime="20190121 15:29:21.035"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:21.050" level="INFO">${value} = 00</msg>
<status endtime="20190121 15:29:21.050" status="PASS" starttime="20190121 15:29:21.044"></status>
</kw>
<status endtime="20190121 15:29:21.054" status="PASS" starttime="20190121 15:29:20.755"></status>
</kw>
<status endtime="20190121 15:29:21.056" status="PASS" starttime="20190121 15:29:20.455"></status>
</kw>
<kw name="digit_out_led2_freq_negativtest">
<doc>Toggle the digital output led 2 with the notsupported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output led 2 with the notsupported frequency</arg>
</arguments>
<status endtime="20190121 15:29:21.069" status="PASS" starttime="20190121 15:29:21.064"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${FREQ_NOT_SUPPORTED}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:21.092" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 05 01 0B</msg>
<status endtime="20190121 15:29:21.093" status="PASS" starttime="20190121 15:29:21.085"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:21.110" status="PASS" starttime="20190121 15:29:21.095"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:21.328" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 01 05 01 41 3C F6</msg>
<status endtime="20190121 15:29:21.330" status="PASS" starttime="20190121 15:29:21.117"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:21.338" status="PASS" starttime="20190121 15:29:21.333"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:21.349" status="PASS" starttime="20190121 15:29:21.341"></status>
</kw>
<status endtime="20190121 15:29:21.351" status="PASS" starttime="20190121 15:29:21.071"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status endtime="20190121 15:29:21.359" status="PASS" starttime="20190121 15:29:21.354"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:21.377" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 05</msg>
<status endtime="20190121 15:29:21.378" status="PASS" starttime="20190121 15:29:21.370"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:21.388" status="PASS" starttime="20190121 15:29:21.382"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:21.620" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 05 02 00 01 42 3E FC</msg>
<status endtime="20190121 15:29:21.621" status="PASS" starttime="20190121 15:29:21.391"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:21.630" status="PASS" starttime="20190121 15:29:21.624"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:21.641" status="PASS" starttime="20190121 15:29:21.633"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:21.649" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '05', '02', '00', '01', '42', '3E', 'FC']</msg>
<status endtime="20190121 15:29:21.649" status="PASS" starttime="20190121 15:29:21.644"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:21.658" level="INFO">${value} = 00</msg>
<status endtime="20190121 15:29:21.659" status="PASS" starttime="20190121 15:29:21.652"></status>
</kw>
<status endtime="20190121 15:29:21.662" status="PASS" starttime="20190121 15:29:21.361"></status>
</kw>
<status endtime="20190121 15:29:21.664" status="PASS" starttime="20190121 15:29:21.058"></status>
</kw>
<kw name="digit_out_led2_high">
<doc>Set the digital output led 2 high and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output led 2 high and test it</arg>
</arguments>
<status endtime="20190121 15:29:21.678" status="PASS" starttime="20190121 15:29:21.673"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${IO_HIGH}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:21.697" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 05 01</msg>
<status endtime="20190121 15:29:21.697" status="PASS" starttime="20190121 15:29:21.690"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:21.706" status="PASS" starttime="20190121 15:29:21.700"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:21.934" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 05 01 43 3D F0</msg>
<status endtime="20190121 15:29:21.935" status="PASS" starttime="20190121 15:29:21.709"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:21.944" status="PASS" starttime="20190121 15:29:21.938"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:21.954" status="PASS" starttime="20190121 15:29:21.946"></status>
</kw>
<status endtime="20190121 15:29:21.956" status="PASS" starttime="20190121 15:29:21.680"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:21.974" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 05</msg>
<status endtime="20190121 15:29:21.975" status="PASS" starttime="20190121 15:29:21.968"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:21.983" status="PASS" starttime="20190121 15:29:21.978"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:22.210" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 05 00 01 01 44 3D FB</msg>
<status endtime="20190121 15:29:22.211" status="PASS" starttime="20190121 15:29:21.986"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:22.223" status="PASS" starttime="20190121 15:29:22.214"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:22.234" status="PASS" starttime="20190121 15:29:22.226"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:22.242" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '05', '00', '01', '01', '44', '3D', 'FB']</msg>
<status endtime="20190121 15:29:22.243" status="PASS" starttime="20190121 15:29:22.237"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:22.251" level="INFO">${value} = 01</msg>
<status endtime="20190121 15:29:22.252" status="PASS" starttime="20190121 15:29:22.246"></status>
</kw>
<msg timestamp="20190121 15:29:22.256" level="INFO">${res} = 01</msg>
<status endtime="20190121 15:29:22.257" status="PASS" starttime="20190121 15:29:21.958"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status endtime="20190121 15:29:22.266" status="PASS" starttime="20190121 15:29:22.259"></status>
</kw>
<status endtime="20190121 15:29:22.268" status="PASS" starttime="20190121 15:29:21.666"></status>
</kw>
<kw name="digit_out_led2_low">
<doc>Set the digital output led 2 low and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output led 2 low and test it</arg>
</arguments>
<status endtime="20190121 15:29:22.281" status="PASS" starttime="20190121 15:29:22.276"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${IO_LOW}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:22.300" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 05 00</msg>
<status endtime="20190121 15:29:22.301" status="PASS" starttime="20190121 15:29:22.294"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:22.310" status="PASS" starttime="20190121 15:29:22.304"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:22.542" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 05 01 45 3D F6</msg>
<status endtime="20190121 15:29:22.543" status="PASS" starttime="20190121 15:29:22.313"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:22.552" status="PASS" starttime="20190121 15:29:22.546"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:22.562" status="PASS" starttime="20190121 15:29:22.555"></status>
</kw>
<status endtime="20190121 15:29:22.565" status="PASS" starttime="20190121 15:29:22.283"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:22.582" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 05</msg>
<status endtime="20190121 15:29:22.583" status="PASS" starttime="20190121 15:29:22.576"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:22.592" status="PASS" starttime="20190121 15:29:22.586"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:22.821" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 05 00 00 01 46 3D F8</msg>
<status endtime="20190121 15:29:22.822" status="PASS" starttime="20190121 15:29:22.595"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:22.831" status="PASS" starttime="20190121 15:29:22.825"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:22.842" status="PASS" starttime="20190121 15:29:22.834"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:22.850" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '05', '00', '00', '01', '46', '3D', 'F8']</msg>
<status endtime="20190121 15:29:22.850" status="PASS" starttime="20190121 15:29:22.845"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:22.859" level="INFO">${value} = 00</msg>
<status endtime="20190121 15:29:22.860" status="PASS" starttime="20190121 15:29:22.853"></status>
</kw>
<msg timestamp="20190121 15:29:22.863" level="INFO">${res} = 00</msg>
<status endtime="20190121 15:29:22.864" status="PASS" starttime="20190121 15:29:22.567"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_LOW}</arg>
</arguments>
<status endtime="20190121 15:29:22.872" status="PASS" starttime="20190121 15:29:22.867"></status>
</kw>
<status endtime="20190121 15:29:22.874" status="PASS" starttime="20190121 15:29:22.270"></status>
</kw>
<kw name="digit_out_crm_freq">
<doc>Toggle the digital output CRM with the supported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output CRM with the supported frequency</arg>
</arguments>
<status endtime="20190121 15:29:22.888" status="PASS" starttime="20190121 15:29:22.883"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${FREQ_SUPPORTED}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:22.906" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 06 01 01</msg>
<status endtime="20190121 15:29:22.907" status="PASS" starttime="20190121 15:29:22.899"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:22.917" status="PASS" starttime="20190121 15:29:22.910"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:23.157" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 00 06 01 40 3D F4</msg>
<status endtime="20190121 15:29:23.158" status="PASS" starttime="20190121 15:29:22.920"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:23.166" status="PASS" starttime="20190121 15:29:23.161"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:23.178" status="PASS" starttime="20190121 15:29:23.169"></status>
</kw>
<status endtime="20190121 15:29:23.180" status="PASS" starttime="20190121 15:29:22.890"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status endtime="20190121 15:29:23.188" status="PASS" starttime="20190121 15:29:23.183"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:23.205" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 06</msg>
<status endtime="20190121 15:29:23.206" status="PASS" starttime="20190121 15:29:23.200"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:23.215" status="PASS" starttime="20190121 15:29:23.209"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:23.445" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 06 02 00 01 41 3E FC</msg>
<status endtime="20190121 15:29:23.446" status="PASS" starttime="20190121 15:29:23.218"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:23.454" status="PASS" starttime="20190121 15:29:23.449"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:23.465" status="PASS" starttime="20190121 15:29:23.457"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:23.474" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '06', '02', '00', '01', '41', '3E', 'FC']</msg>
<status endtime="20190121 15:29:23.474" status="PASS" starttime="20190121 15:29:23.469"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:23.483" level="INFO">${value} = 00</msg>
<status endtime="20190121 15:29:23.484" status="PASS" starttime="20190121 15:29:23.477"></status>
</kw>
<status endtime="20190121 15:29:23.487" status="PASS" starttime="20190121 15:29:23.190"></status>
</kw>
<status endtime="20190121 15:29:23.489" status="PASS" starttime="20190121 15:29:22.876"></status>
</kw>
<kw name="digit_out_crm_freq_negativtest">
<doc>Toggle the digital output led 2 with the notsupported frequency</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Toggle the digital output led 2 with the notsupported frequency</arg>
</arguments>
<status endtime="20190121 15:29:23.502" status="PASS" starttime="20190121 15:29:23.498"></status>
</kw>
<kw name="SCA_DIGITAL_IO_BLINK_REQ">
<doc>Request message to set blinking for given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${FREQ_NOT_SUPPORTED}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_BLINK_REQ} ${DIG_IO} ${SCA_ENABLED} ${FREQ}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:23.525" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 07 00 01 77 2C 06 01 0B</msg>
<status endtime="20190121 15:29:23.526" status="PASS" starttime="20190121 15:29:23.514"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:23.536" status="PASS" starttime="20190121 15:29:23.531"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:23.775" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 2D 01 06 01 42 3C F6</msg>
<status endtime="20190121 15:29:23.776" status="PASS" starttime="20190121 15:29:23.541"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:23.785" status="PASS" starttime="20190121 15:29:23.780"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${BLINK_RESP} ${EXPECTED_RESULT} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:23.796" status="PASS" starttime="20190121 15:29:23.789"></status>
</kw>
<status endtime="20190121 15:29:23.798" status="PASS" starttime="20190121 15:29:23.505"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get request, not supported in blink mode, negativtest</arg>
</arguments>
<status endtime="20190121 15:29:23.806" status="PASS" starttime="20190121 15:29:23.801"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${MODE_BLINK}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:23.823" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 06</msg>
<status endtime="20190121 15:29:23.824" status="PASS" starttime="20190121 15:29:23.817"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:23.832" status="PASS" starttime="20190121 15:29:23.827"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:24.062" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 01 06 02 00 01 43 3E FE</msg>
<status endtime="20190121 15:29:24.063" status="PASS" starttime="20190121 15:29:23.835"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:24.072" status="PASS" starttime="20190121 15:29:24.067"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:24.084" status="PASS" starttime="20190121 15:29:24.075"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:24.092" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '01', '06', '02', '00', '01', '43', '3E', 'FE']</msg>
<status endtime="20190121 15:29:24.093" status="PASS" starttime="20190121 15:29:24.087"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:24.134" level="INFO">${value} = 00</msg>
<status endtime="20190121 15:29:24.135" status="PASS" starttime="20190121 15:29:24.096"></status>
</kw>
<status endtime="20190121 15:29:24.140" status="PASS" starttime="20190121 15:29:23.808"></status>
</kw>
<status endtime="20190121 15:29:24.143" status="PASS" starttime="20190121 15:29:23.491"></status>
</kw>
<kw name="digit_out_crm_high">
<doc>Set the digital output crm high and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output crm high and test it</arg>
</arguments>
<status endtime="20190121 15:29:24.156" status="PASS" starttime="20190121 15:29:24.151"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${IO_HIGH}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:24.175" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 06 01</msg>
<status endtime="20190121 15:29:24.176" status="PASS" starttime="20190121 15:29:24.169"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:24.184" status="PASS" starttime="20190121 15:29:24.179"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:24.387" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 06 01 44 3D F4</msg>
<status endtime="20190121 15:29:24.389" status="PASS" starttime="20190121 15:29:24.187"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:24.398" status="PASS" starttime="20190121 15:29:24.392"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:24.408" status="PASS" starttime="20190121 15:29:24.401"></status>
</kw>
<status endtime="20190121 15:29:24.410" status="PASS" starttime="20190121 15:29:24.158"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:24.432" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 06</msg>
<status endtime="20190121 15:29:24.433" status="PASS" starttime="20190121 15:29:24.426"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:24.443" status="PASS" starttime="20190121 15:29:24.435"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:24.672" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 06 00 01 01 45 3D F9</msg>
<status endtime="20190121 15:29:24.674" status="PASS" starttime="20190121 15:29:24.446"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:24.682" status="PASS" starttime="20190121 15:29:24.677"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:24.693" status="PASS" starttime="20190121 15:29:24.685"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:24.701" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '06', '00', '01', '01', '45', '3D', 'F9']</msg>
<status endtime="20190121 15:29:24.702" status="PASS" starttime="20190121 15:29:24.696"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:24.710" level="INFO">${value} = 01</msg>
<status endtime="20190121 15:29:24.711" status="PASS" starttime="20190121 15:29:24.705"></status>
</kw>
<msg timestamp="20190121 15:29:24.715" level="INFO">${res} = 01</msg>
<status endtime="20190121 15:29:24.716" status="PASS" starttime="20190121 15:29:24.412"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status endtime="20190121 15:29:24.723" status="PASS" starttime="20190121 15:29:24.718"></status>
</kw>
<status endtime="20190121 15:29:24.726" status="PASS" starttime="20190121 15:29:24.145"></status>
</kw>
<kw name="digit_out_crm_low">
<doc>Set the digital output crm low and test it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set the digital output crm low and test it</arg>
</arguments>
<status endtime="20190121 15:29:24.739" status="PASS" starttime="20190121 15:29:24.735"></status>
</kw>
<kw name="SCA_DIGITAL_IO_SET_REQ">
<doc>Request message to set given state for given digital IO and test it</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${IO_LOW}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_SET_REQ} ${DIG_IO} ${IO_LEVEL}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:24.758" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 06 00 01 77 28 06 00</msg>
<status endtime="20190121 15:29:24.759" status="PASS" starttime="20190121 15:29:24.752"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:24.778" status="PASS" starttime="20190121 15:29:24.772"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:25.007" level="INFO">${info} = 1E 14 54 8E 00 08 01 0D 77 29 00 06 01 46 3D F6</msg>
<status endtime="20190121 15:29:25.009" status="PASS" starttime="20190121 15:29:24.781"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:25.017" status="PASS" starttime="20190121 15:29:25.012"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${SET_RESP} ${SCA_RESULT_OK} ${DIG_IO}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:25.028" status="PASS" starttime="20190121 15:29:25.020"></status>
</kw>
<status endtime="20190121 15:29:25.031" status="PASS" starttime="20190121 15:29:24.741"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:25.060" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 06</msg>
<status endtime="20190121 15:29:25.061" status="PASS" starttime="20190121 15:29:25.047"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:25.090" status="PASS" starttime="20190121 15:29:25.075"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:25.331" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 06 00 00 01 47 3D FA</msg>
<status endtime="20190121 15:29:25.332" status="PASS" starttime="20190121 15:29:25.093"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:25.341" status="PASS" starttime="20190121 15:29:25.336"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:25.352" status="PASS" starttime="20190121 15:29:25.344"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:25.360" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '06', '00', '00', '01', '47', '3D', 'FA']</msg>
<status endtime="20190121 15:29:25.361" status="PASS" starttime="20190121 15:29:25.355"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:25.369" level="INFO">${value} = 00</msg>
<status endtime="20190121 15:29:25.370" status="PASS" starttime="20190121 15:29:25.364"></status>
</kw>
<msg timestamp="20190121 15:29:25.374" level="INFO">${res} = 00</msg>
<status endtime="20190121 15:29:25.375" status="PASS" starttime="20190121 15:29:25.033"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_LOW}</arg>
</arguments>
<status endtime="20190121 15:29:25.382" status="PASS" starttime="20190121 15:29:25.377"></status>
</kw>
<status endtime="20190121 15:29:25.385" status="PASS" starttime="20190121 15:29:24.728"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:25.467" status="PASS" starttime="20190121 15:29:25.395"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:25.517" status="PASS" starttime="20190121 15:29:25.471"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:25.568" status="PASS" starttime="20190121 15:29:25.521"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:29:27.575" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:29:27.578" status="PASS" starttime="20190121 15:29:25.571"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:29:27.667" status="PASS" starttime="20190121 15:29:27.580"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:29:27.739" status="PASS" starttime="20190121 15:29:27.670"></status>
</kw>
<status endtime="20190121 15:29:27.743" status="PASS" starttime="20190121 15:29:25.388"></status>
</kw>
<doc>Implements Test Task SKTB-48413 toggle Digital Output Leds</doc>
<tags>
<tag>GPIO Test</tag>
</tags>
<status critical="yes" endtime="20190121 15:29:27.744" status="PASS" starttime="20190121 15:29:13.136"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:29:29.260" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:29:29.324" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:29:29.325" status="PASS" starttime="20190121 15:29:27.794"></status>
</kw>
<status endtime="20190121 15:29:29.327" status="PASS" starttime="20190121 15:29:27.760"></status>
</kw>
<status endtime="20190121 15:29:29.350" status="PASS" starttime="20190121 15:29:27.754"></status>
</kw>
<doc>Chorus GPIO LED1, LED2, CRM test</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:29:29.350" status="PASS" starttime="20190121 15:29:10.268"></status>
</suite>
<suite id="s1-s11" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-49038.robot" name="SKTB-49038">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:29:30.018" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:29:30.039" status="PASS" starttime="20190121 15:29:29.994"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:29:30.048" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:29:30.066" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:29:32.436" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:29:32.443" status="PASS" starttime="20190121 15:29:30.042"></status>
</kw>
<status endtime="20190121 15:29:32.445" status="PASS" starttime="20190121 15:29:29.988"></status>
</kw>
<test id="s1-s11-t1" name="SKTB-GPIO FBUS test">
<kw name="Test_precondition" type="setup">
<doc>switch kl15 and kl 30 and prodmod off and on after defined time</doc>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:32.617" status="PASS" starttime="20190121 15:29:32.525"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:32.781" status="PASS" starttime="20190121 15:29:32.620"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:32.919" status="PASS" starttime="20190121 15:29:32.798"></status>
</kw>
<kw name="Bidir Wake Up" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:29:33.496" status="PASS" starttime="20190121 15:29:32.922"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:29:35.522" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:29:35.525" status="PASS" starttime="20190121 15:29:33.499"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:29:35.573" status="PASS" starttime="20190121 15:29:35.527"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:29:35.623" status="PASS" starttime="20190121 15:29:35.576"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:29:35.672" status="PASS" starttime="20190121 15:29:35.627"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:29:35.721" status="PASS" starttime="20190121 15:29:35.675"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:29:35.771" status="PASS" starttime="20190121 15:29:35.725"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:29:35.850" status="PASS" starttime="20190121 15:29:35.774"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:29:37.866" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:29:37.868" status="PASS" starttime="20190121 15:29:35.853"></status>
</kw>
<status endtime="20190121 15:29:37.871" status="PASS" starttime="20190121 15:29:32.499"></status>
</kw>
<kw name="digit_input_1">
<doc>Get digital input 1</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get digital input 1</arg>
</arguments>
<status endtime="20190121 15:29:37.885" status="PASS" starttime="20190121 15:29:37.880"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${MCU_DIGIN_1_BUTTON_1}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:37.902" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 0A</msg>
<status endtime="20190121 15:29:37.903" status="PASS" starttime="20190121 15:29:37.897"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg (GET_ REQ): ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:37.912" status="PASS" starttime="20190121 15:29:37.906"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:38.115" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 0A 00 01 01 43 3D F3</msg>
<status endtime="20190121 15:29:38.116" status="PASS" starttime="20190121 15:29:37.915"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:38.128" status="PASS" starttime="20190121 15:29:38.119"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:38.139" status="PASS" starttime="20190121 15:29:38.131"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:38.146" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '0A', '00', '01', '01', '43', '3D', 'F3']</msg>
<status endtime="20190121 15:29:38.147" status="PASS" starttime="20190121 15:29:38.141"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:38.157" level="INFO">${value} = 01</msg>
<status endtime="20190121 15:29:38.157" status="PASS" starttime="20190121 15:29:38.150"></status>
</kw>
<msg timestamp="20190121 15:29:38.161" level="INFO">${res} = 01</msg>
<status endtime="20190121 15:29:38.162" status="PASS" starttime="20190121 15:29:37.887"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status endtime="20190121 15:29:38.170" status="PASS" starttime="20190121 15:29:38.165"></status>
</kw>
<status endtime="20190121 15:29:38.172" status="PASS" starttime="20190121 15:29:37.874"></status>
</kw>
<kw name="digit_input_2">
<doc>Get digital input 2</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get digital input 2</arg>
</arguments>
<status endtime="20190121 15:29:38.185" status="PASS" starttime="20190121 15:29:38.180"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${MCU_DIGIN_2_BUTTON_2}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:38.204" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 0B</msg>
<status endtime="20190121 15:29:38.205" status="PASS" starttime="20190121 15:29:38.197"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg (GET_ REQ): ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:38.214" status="PASS" starttime="20190121 15:29:38.207"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:38.444" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 0B 00 01 01 44 3D F5</msg>
<status endtime="20190121 15:29:38.445" status="PASS" starttime="20190121 15:29:38.217"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:38.454" status="PASS" starttime="20190121 15:29:38.448"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:38.465" status="PASS" starttime="20190121 15:29:38.457"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:38.474" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '0B', '00', '01', '01', '44', '3D', 'F5']</msg>
<status endtime="20190121 15:29:38.475" status="PASS" starttime="20190121 15:29:38.469"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:38.484" level="INFO">${value} = 01</msg>
<status endtime="20190121 15:29:38.485" status="PASS" starttime="20190121 15:29:38.478"></status>
</kw>
<msg timestamp="20190121 15:29:38.489" level="INFO">${res} = 01</msg>
<status endtime="20190121 15:29:38.489" status="PASS" starttime="20190121 15:29:38.187"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status endtime="20190121 15:29:38.497" status="PASS" starttime="20190121 15:29:38.492"></status>
</kw>
<status endtime="20190121 15:29:38.499" status="PASS" starttime="20190121 15:29:38.174"></status>
</kw>
<kw name="digit_input_3">
<doc>Get digital input 3</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get digital input 3</arg>
</arguments>
<status endtime="20190121 15:29:38.513" status="PASS" starttime="20190121 15:29:38.508"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${MCU_DIGIN_3_AIRB_PWM}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:38.530" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 0C</msg>
<status endtime="20190121 15:29:38.531" status="PASS" starttime="20190121 15:29:38.525"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg (GET_ REQ): ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:38.540" status="PASS" starttime="20190121 15:29:38.534"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:38.773" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 0C 00 01 01 45 3D F3</msg>
<status endtime="20190121 15:29:38.774" status="PASS" starttime="20190121 15:29:38.543"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:38.783" status="PASS" starttime="20190121 15:29:38.777"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:38.795" status="PASS" starttime="20190121 15:29:38.786"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:38.802" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '0C', '00', '01', '01', '45', '3D', 'F3']</msg>
<status endtime="20190121 15:29:38.803" status="PASS" starttime="20190121 15:29:38.798"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:38.812" level="INFO">${value} = 01</msg>
<status endtime="20190121 15:29:38.813" status="PASS" starttime="20190121 15:29:38.806"></status>
</kw>
<msg timestamp="20190121 15:29:38.817" level="INFO">${res} = 01</msg>
<status endtime="20190121 15:29:38.818" status="PASS" starttime="20190121 15:29:38.515"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_HIGH}</arg>
</arguments>
<status endtime="20190121 15:29:38.826" status="PASS" starttime="20190121 15:29:38.821"></status>
</kw>
<status endtime="20190121 15:29:38.828" status="PASS" starttime="20190121 15:29:38.502"></status>
</kw>
<kw name="digit_input_bid">
<doc>Get digital input BIDR WUL</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Get digital input BIDR WUL</arg>
</arguments>
<status endtime="20190121 15:29:38.845" status="PASS" starttime="20190121 15:29:38.836"></status>
</kw>
<kw name="SCA_DIGITAL_IO_GET_REQ">
<doc>Request message requesting current state of given digital IO</doc>
<arguments>
<arg>${BIDIR_WUL_IN}</arg>
<arg>${MODE_STATIC}</arg>
<arg>${SCA_RESULT_OK}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_GET_REQ} ${DIG_IO}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:38.887" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 05 00 01 77 25 0E</msg>
<status endtime="20190121 15:29:38.888" status="PASS" starttime="20190121 15:29:38.873"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg (GET_ REQ): ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:38.897" status="PASS" starttime="20190121 15:29:38.891"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:29:39.102" level="INFO">${info} = 1E 14 54 8E 00 0A 01 0D 77 26 00 0E 00 01 01 40 3D F4</msg>
<status endtime="20190121 15:29:39.103" status="PASS" starttime="20190121 15:29:38.900"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<status endtime="20190121 15:29:39.112" status="PASS" starttime="20190121 15:29:39.106"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${TRANSACTION_ID} ${GET_RESP} ${EXPECTED_RESULT} ${DIG_IO} ${MODE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:39.123" status="PASS" starttime="20190121 15:29:39.115"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${info}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:39.131" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '0A', '01', '0D', '77', '26', '00', '0E', '00', '01', '01', '40', '3D', 'F4']</msg>
<status endtime="20190121 15:29:39.132" status="PASS" starttime="20190121 15:29:39.126"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${13}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:29:39.140" level="INFO">${value} = 01</msg>
<status endtime="20190121 15:29:39.141" status="PASS" starttime="20190121 15:29:39.135"></status>
</kw>
<msg timestamp="20190121 15:29:39.145" level="INFO">${res} = 01</msg>
<status endtime="20190121 15:29:39.146" status="PASS" starttime="20190121 15:29:38.847"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${res}</arg>
<arg>${IO_LOW}</arg>
</arguments>
<msg timestamp="20190121 15:29:39.155" level="FAIL">'01' does not contain '00'</msg>
<status endtime="20190121 15:29:39.156" status="FAIL" starttime="20190121 15:29:39.148"></status>
</kw>
<status endtime="20190121 15:29:39.159" status="FAIL" starttime="20190121 15:29:38.830"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:39.241" status="PASS" starttime="20190121 15:29:39.170"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:39.295" status="PASS" starttime="20190121 15:29:39.244"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:39.345" status="PASS" starttime="20190121 15:29:39.299"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:29:41.353" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:29:41.355" status="PASS" starttime="20190121 15:29:39.348"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:29:41.406" status="PASS" starttime="20190121 15:29:41.358"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:29:41.455" status="PASS" starttime="20190121 15:29:41.410"></status>
</kw>
<status endtime="20190121 15:29:41.458" status="PASS" starttime="20190121 15:29:39.163"></status>
</kw>
<doc>Implements Test Task SKTB-49038</doc>
<tags>
<tag>GPIO Test</tag>
</tags>
<status critical="yes" endtime="20190121 15:29:41.459" status="FAIL" starttime="20190121 15:29:32.456">'01' does not contain '00'</status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:29:42.967" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:29:43.021" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:29:43.035" status="PASS" starttime="20190121 15:29:41.509"></status>
</kw>
<status endtime="20190121 15:29:43.036" status="PASS" starttime="20190121 15:29:41.475"></status>
</kw>
<status endtime="20190121 15:29:43.038" status="PASS" starttime="20190121 15:29:41.470"></status>
</kw>
<doc>Chorus GPIO input 1,2,3 BID_wul test</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:29:43.039" status="FAIL" starttime="20190121 15:29:29.458"></status>
</suite>
<suite id="s1-s12" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-49357.robot" name="SKTB-49357">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:29:43.743" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:29:43.759" status="PASS" starttime="20190121 15:29:43.712"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:29:43.768" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:29:43.791" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:29:45.983" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:29:45.985" status="PASS" starttime="20190121 15:29:43.762"></status>
</kw>
<status endtime="20190121 15:29:45.996" status="PASS" starttime="20190121 15:29:43.707"></status>
</kw>
<test id="s1-s12-t1" name="SKTB-49357 Gpio pwm test">
<kw name="Test_precondition" type="setup">
<doc>switch kl15 and kl 30 and prodmod off and on after defined time</doc>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:46.163" status="PASS" starttime="20190121 15:29:46.051"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:46.256" status="PASS" starttime="20190121 15:29:46.167"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:29:46.382" status="PASS" starttime="20190121 15:29:46.260"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:29:48.401" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:29:48.403" status="PASS" starttime="20190121 15:29:46.385"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:29:48.453" status="PASS" starttime="20190121 15:29:48.405"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:29:48.502" status="PASS" starttime="20190121 15:29:48.456"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:29:48.553" status="PASS" starttime="20190121 15:29:48.506"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:29:48.608" status="PASS" starttime="20190121 15:29:48.556"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:29:48.658" status="PASS" starttime="20190121 15:29:48.611"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:29:48.741" status="PASS" starttime="20190121 15:29:48.661"></status>
</kw>
<kw name="Fbus Set State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${15000}</arg>
</arguments>
<status endtime="20190121 15:29:48.815" status="PASS" starttime="20190121 15:29:48.744"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:29:49.823" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:29:49.825" status="PASS" starttime="20190121 15:29:48.818"></status>
</kw>
<status endtime="20190121 15:29:49.828" status="PASS" starttime="20190121 15:29:46.031"></status>
</kw>
<kw name="digit_out_hs_1">
<doc>Set pwm for the digital output hs 1</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output hs 1</arg>
</arguments>
<status endtime="20190121 15:29:49.844" status="PASS" starttime="20190121 15:29:49.837"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${HI_SIDE_SW_1}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:49.859" status="PASS" starttime="20190121 15:29:49.854"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:49.878" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0020 20</msg>
<status endtime="20190121 15:29:49.879" status="PASS" starttime="20190121 15:29:49.871"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:49.888" status="PASS" starttime="20190121 15:29:49.882"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:50.090" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 00 01 43 3D F7</msg>
<status endtime="20190121 15:29:50.091" status="PASS" starttime="20190121 15:29:49.891"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:50.100" status="PASS" starttime="20190121 15:29:50.094"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:50.108" status="PASS" starttime="20190121 15:29:50.103"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:50.116" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '00', '01', '43', '3D', 'F7']</msg>
<status endtime="20190121 15:29:50.117" status="PASS" starttime="20190121 15:29:50.111"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:50.126" level="INFO">${gpio_id} = 00</msg>
<status endtime="20190121 15:29:50.126" status="PASS" starttime="20190121 15:29:50.120"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:50.135" status="PASS" starttime="20190121 15:29:50.129"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:50.144" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:50.145" status="PASS" starttime="20190121 15:29:50.138"></status>
</kw>
<msg timestamp="20190121 15:29:50.149" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:50.149" status="PASS" starttime="20190121 15:29:49.861"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:50.158" status="PASS" starttime="20190121 15:29:50.152"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:50.165" status="PASS" starttime="20190121 15:29:50.161"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:50.185" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0064 64</msg>
<status endtime="20190121 15:29:50.186" status="PASS" starttime="20190121 15:29:50.178"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:50.194" status="PASS" starttime="20190121 15:29:50.189"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:50.513" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 00 01 44 3D F0</msg>
<status endtime="20190121 15:29:50.514" status="PASS" starttime="20190121 15:29:50.197"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:50.526" status="PASS" starttime="20190121 15:29:50.517"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:50.536" status="PASS" starttime="20190121 15:29:50.530"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:50.545" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '00', '01', '44', '3D', 'F0']</msg>
<status endtime="20190121 15:29:50.545" status="PASS" starttime="20190121 15:29:50.539"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:50.554" level="INFO">${gpio_id} = 00</msg>
<status endtime="20190121 15:29:50.555" status="PASS" starttime="20190121 15:29:50.548"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:50.564" status="PASS" starttime="20190121 15:29:50.558"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:50.573" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:50.574" status="PASS" starttime="20190121 15:29:50.567"></status>
</kw>
<msg timestamp="20190121 15:29:50.577" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:50.578" status="PASS" starttime="20190121 15:29:50.167"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:50.590" status="PASS" starttime="20190121 15:29:50.581"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:50.598" status="PASS" starttime="20190121 15:29:50.593"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:50.618" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0001 01</msg>
<status endtime="20190121 15:29:50.619" status="PASS" starttime="20190121 15:29:50.610"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:50.627" status="PASS" starttime="20190121 15:29:50.622"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:50.850" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 00 01 45 3D F1</msg>
<status endtime="20190121 15:29:50.850" status="PASS" starttime="20190121 15:29:50.630"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:50.859" status="PASS" starttime="20190121 15:29:50.853"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:50.867" status="PASS" starttime="20190121 15:29:50.862"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:50.875" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '00', '01', '45', '3D', 'F1']</msg>
<status endtime="20190121 15:29:50.876" status="PASS" starttime="20190121 15:29:50.870"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:50.885" level="INFO">${gpio_id} = 00</msg>
<status endtime="20190121 15:29:50.886" status="PASS" starttime="20190121 15:29:50.879"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:50.894" status="PASS" starttime="20190121 15:29:50.888"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:50.902" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:50.903" status="PASS" starttime="20190121 15:29:50.897"></status>
</kw>
<msg timestamp="20190121 15:29:50.907" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:50.907" status="PASS" starttime="20190121 15:29:50.600"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:50.916" status="PASS" starttime="20190121 15:29:50.910"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:50.923" status="PASS" starttime="20190121 15:29:50.919"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:50.944" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0065 65</msg>
<status endtime="20190121 15:29:50.945" status="PASS" starttime="20190121 15:29:50.936"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:50.953" status="PASS" starttime="20190121 15:29:50.948"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:51.196" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 46 3C F2</msg>
<status endtime="20190121 15:29:51.197" status="PASS" starttime="20190121 15:29:50.956"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:51.226" status="PASS" starttime="20190121 15:29:51.200"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:51.242" status="PASS" starttime="20190121 15:29:51.229"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:51.260" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '46', '3C', 'F2']</msg>
<status endtime="20190121 15:29:51.261" status="PASS" starttime="20190121 15:29:51.246"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:51.272" level="INFO">${gpio_id} = 00</msg>
<status endtime="20190121 15:29:51.273" status="PASS" starttime="20190121 15:29:51.264"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:51.283" status="PASS" starttime="20190121 15:29:51.276"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:51.294" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:51.294" status="PASS" starttime="20190121 15:29:51.287"></status>
</kw>
<msg timestamp="20190121 15:29:51.298" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:51.299" status="PASS" starttime="20190121 15:29:50.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:51.308" status="PASS" starttime="20190121 15:29:51.302"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:51.315" status="PASS" starttime="20190121 15:29:51.310"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:51.339" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0020 65</msg>
<status endtime="20190121 15:29:51.339" status="PASS" starttime="20190121 15:29:51.328"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:51.348" status="PASS" starttime="20190121 15:29:51.342"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:51.570" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 47 3C F3</msg>
<status endtime="20190121 15:29:51.571" status="PASS" starttime="20190121 15:29:51.351"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:51.581" status="PASS" starttime="20190121 15:29:51.575"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:51.593" status="PASS" starttime="20190121 15:29:51.586"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:51.602" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '47', '3C', 'F3']</msg>
<status endtime="20190121 15:29:51.603" status="PASS" starttime="20190121 15:29:51.595"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:51.613" level="INFO">${gpio_id} = 00</msg>
<status endtime="20190121 15:29:51.614" status="PASS" starttime="20190121 15:29:51.607"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:51.622" status="PASS" starttime="20190121 15:29:51.616"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:51.631" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:51.631" status="PASS" starttime="20190121 15:29:51.625"></status>
</kw>
<msg timestamp="20190121 15:29:51.636" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:51.637" status="PASS" starttime="20190121 15:29:51.317"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:51.645" status="PASS" starttime="20190121 15:29:51.640"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:51.653" status="PASS" starttime="20190121 15:29:51.648"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:51.674" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0065 20</msg>
<status endtime="20190121 15:29:51.675" status="PASS" starttime="20190121 15:29:51.665"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:51.683" status="PASS" starttime="20190121 15:29:51.678"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:51.911" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 42 3C F6</msg>
<status endtime="20190121 15:29:51.913" status="PASS" starttime="20190121 15:29:51.686"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:51.922" status="PASS" starttime="20190121 15:29:51.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:51.931" status="PASS" starttime="20190121 15:29:51.925"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:51.939" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '42', '3C', 'F6']</msg>
<status endtime="20190121 15:29:51.939" status="PASS" starttime="20190121 15:29:51.934"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:51.948" level="INFO">${gpio_id} = 00</msg>
<status endtime="20190121 15:29:51.949" status="PASS" starttime="20190121 15:29:51.942"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:51.958" status="PASS" starttime="20190121 15:29:51.952"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:51.966" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:51.967" status="PASS" starttime="20190121 15:29:51.961"></status>
</kw>
<msg timestamp="20190121 15:29:51.974" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:51.975" status="PASS" starttime="20190121 15:29:51.655"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:51.986" status="PASS" starttime="20190121 15:29:51.980"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:51.994" status="PASS" starttime="20190121 15:29:51.989"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:52.079" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0020 00</msg>
<status endtime="20190121 15:29:52.080" status="PASS" starttime="20190121 15:29:52.045"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:52.153" status="PASS" starttime="20190121 15:29:52.110"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:52.386" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 43 3C F7</msg>
<status endtime="20190121 15:29:52.387" status="PASS" starttime="20190121 15:29:52.157"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:52.395" status="PASS" starttime="20190121 15:29:52.390"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:52.410" status="PASS" starttime="20190121 15:29:52.398"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:52.432" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '43', '3C', 'F7']</msg>
<status endtime="20190121 15:29:52.433" status="PASS" starttime="20190121 15:29:52.426"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:52.478" level="INFO">${gpio_id} = 00</msg>
<status endtime="20190121 15:29:52.479" status="PASS" starttime="20190121 15:29:52.444"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:52.496" status="PASS" starttime="20190121 15:29:52.482"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:52.516" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:52.517" status="PASS" starttime="20190121 15:29:52.499"></status>
</kw>
<msg timestamp="20190121 15:29:52.521" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:52.522" status="PASS" starttime="20190121 15:29:51.996"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:52.531" status="PASS" starttime="20190121 15:29:52.525"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:52.539" status="PASS" starttime="20190121 15:29:52.534"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:52.561" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0000 20</msg>
<status endtime="20190121 15:29:52.562" status="PASS" starttime="20190121 15:29:52.553"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:52.570" status="PASS" starttime="20190121 15:29:52.565"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:52.802" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 46 3C F2</msg>
<status endtime="20190121 15:29:52.803" status="PASS" starttime="20190121 15:29:52.573"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:52.812" status="PASS" starttime="20190121 15:29:52.807"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:52.821" status="PASS" starttime="20190121 15:29:52.815"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:52.829" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '46', '3C', 'F2']</msg>
<status endtime="20190121 15:29:52.830" status="PASS" starttime="20190121 15:29:52.824"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:52.838" level="INFO">${gpio_id} = 00</msg>
<status endtime="20190121 15:29:52.839" status="PASS" starttime="20190121 15:29:52.833"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:52.848" status="PASS" starttime="20190121 15:29:52.842"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:52.873" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:52.874" status="PASS" starttime="20190121 15:29:52.859"></status>
</kw>
<msg timestamp="20190121 15:29:52.882" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:52.883" status="PASS" starttime="20190121 15:29:52.542"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:52.898" status="PASS" starttime="20190121 15:29:52.890"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:52.905" status="PASS" starttime="20190121 15:29:52.900"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:52.926" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 00 01 0000 00</msg>
<status endtime="20190121 15:29:52.927" status="PASS" starttime="20190121 15:29:52.918"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:52.959" status="PASS" starttime="20190121 15:29:52.930"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:53.226" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 00 01 47 3C F3</msg>
<status endtime="20190121 15:29:53.227" status="PASS" starttime="20190121 15:29:52.974"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:53.250" status="PASS" starttime="20190121 15:29:53.234"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:53.260" status="PASS" starttime="20190121 15:29:53.254"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:53.269" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '00', '01', '47', '3C', 'F3']</msg>
<status endtime="20190121 15:29:53.270" status="PASS" starttime="20190121 15:29:53.264"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:53.279" level="INFO">${gpio_id} = 00</msg>
<status endtime="20190121 15:29:53.280" status="PASS" starttime="20190121 15:29:53.273"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:53.303" status="PASS" starttime="20190121 15:29:53.282"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:53.311" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:53.312" status="PASS" starttime="20190121 15:29:53.306"></status>
</kw>
<msg timestamp="20190121 15:29:53.316" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:53.317" status="PASS" starttime="20190121 15:29:52.908"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:53.328" status="PASS" starttime="20190121 15:29:53.320"></status>
</kw>
<status endtime="20190121 15:29:53.331" status="PASS" starttime="20190121 15:29:49.846"></status>
</kw>
<status endtime="20190121 15:29:53.333" status="PASS" starttime="20190121 15:29:49.830"></status>
</kw>
<kw name="digit_out_hs_2">
<doc>Set pwm for the digital output hs 2</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output hs 2</arg>
</arguments>
<status endtime="20190121 15:29:53.346" status="PASS" starttime="20190121 15:29:53.342"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${HI_SIDE_SW_2}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:53.361" status="PASS" starttime="20190121 15:29:53.356"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:53.381" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0020 20</msg>
<status endtime="20190121 15:29:53.382" status="PASS" starttime="20190121 15:29:53.374"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:53.390" status="PASS" starttime="20190121 15:29:53.385"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:53.612" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 01 01 40 3D F5</msg>
<status endtime="20190121 15:29:53.613" status="PASS" starttime="20190121 15:29:53.394"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:53.622" status="PASS" starttime="20190121 15:29:53.616"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:53.632" status="PASS" starttime="20190121 15:29:53.626"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:53.640" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '01', '01', '40', '3D', 'F5']</msg>
<status endtime="20190121 15:29:53.641" status="PASS" starttime="20190121 15:29:53.635"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:53.649" level="INFO">${gpio_id} = 01</msg>
<status endtime="20190121 15:29:53.650" status="PASS" starttime="20190121 15:29:53.643"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:53.659" status="PASS" starttime="20190121 15:29:53.653"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:53.667" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:53.668" status="PASS" starttime="20190121 15:29:53.662"></status>
</kw>
<msg timestamp="20190121 15:29:53.672" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:53.673" status="PASS" starttime="20190121 15:29:53.364"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:53.681" status="PASS" starttime="20190121 15:29:53.675"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:53.689" status="PASS" starttime="20190121 15:29:53.684"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:53.708" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0064 64</msg>
<status endtime="20190121 15:29:53.709" status="PASS" starttime="20190121 15:29:53.701"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:53.718" status="PASS" starttime="20190121 15:29:53.712"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:53.920" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 01 01 41 3D F4</msg>
<status endtime="20190121 15:29:53.922" status="PASS" starttime="20190121 15:29:53.721"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:53.930" status="PASS" starttime="20190121 15:29:53.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:53.939" status="PASS" starttime="20190121 15:29:53.933"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:53.946" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '01', '01', '41', '3D', 'F4']</msg>
<status endtime="20190121 15:29:53.947" status="PASS" starttime="20190121 15:29:53.942"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:53.957" level="INFO">${gpio_id} = 01</msg>
<status endtime="20190121 15:29:53.958" status="PASS" starttime="20190121 15:29:53.950"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:53.966" status="PASS" starttime="20190121 15:29:53.961"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:53.978" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:53.979" status="PASS" starttime="20190121 15:29:53.969"></status>
</kw>
<msg timestamp="20190121 15:29:53.985" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:53.985" status="PASS" starttime="20190121 15:29:53.691"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:53.994" status="PASS" starttime="20190121 15:29:53.988"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:54.002" status="PASS" starttime="20190121 15:29:53.997"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:54.022" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0001 01</msg>
<status endtime="20190121 15:29:54.023" status="PASS" starttime="20190121 15:29:54.015"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:54.031" status="PASS" starttime="20190121 15:29:54.026"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:54.262" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 01 01 42 3D F7</msg>
<status endtime="20190121 15:29:54.263" status="PASS" starttime="20190121 15:29:54.034"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:54.271" status="PASS" starttime="20190121 15:29:54.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:54.280" status="PASS" starttime="20190121 15:29:54.275"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:54.290" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '01', '01', '42', '3D', 'F7']</msg>
<status endtime="20190121 15:29:54.291" status="PASS" starttime="20190121 15:29:54.284"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:54.301" level="INFO">${gpio_id} = 01</msg>
<status endtime="20190121 15:29:54.302" status="PASS" starttime="20190121 15:29:54.294"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:54.310" status="PASS" starttime="20190121 15:29:54.305"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:54.320" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:54.321" status="PASS" starttime="20190121 15:29:54.313"></status>
</kw>
<msg timestamp="20190121 15:29:54.325" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:54.326" status="PASS" starttime="20190121 15:29:54.004"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:54.335" status="PASS" starttime="20190121 15:29:54.329"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:54.342" status="PASS" starttime="20190121 15:29:54.338"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:54.364" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0065 65</msg>
<status endtime="20190121 15:29:54.365" status="PASS" starttime="20190121 15:29:54.356"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:54.373" status="PASS" starttime="20190121 15:29:54.367"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:54.605" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 43 3C F6</msg>
<status endtime="20190121 15:29:54.606" status="PASS" starttime="20190121 15:29:54.377"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:54.615" status="PASS" starttime="20190121 15:29:54.609"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:54.626" status="PASS" starttime="20190121 15:29:54.618"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:54.635" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '43', '3C', 'F6']</msg>
<status endtime="20190121 15:29:54.635" status="PASS" starttime="20190121 15:29:54.629"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:54.644" level="INFO">${gpio_id} = 01</msg>
<status endtime="20190121 15:29:54.645" status="PASS" starttime="20190121 15:29:54.638"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:54.653" status="PASS" starttime="20190121 15:29:54.648"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:54.662" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:54.663" status="PASS" starttime="20190121 15:29:54.656"></status>
</kw>
<msg timestamp="20190121 15:29:54.666" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:54.667" status="PASS" starttime="20190121 15:29:54.345"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:54.676" status="PASS" starttime="20190121 15:29:54.670"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:54.684" status="PASS" starttime="20190121 15:29:54.679"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:54.708" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0020 65</msg>
<status endtime="20190121 15:29:54.708" status="PASS" starttime="20190121 15:29:54.697"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:54.717" status="PASS" starttime="20190121 15:29:54.711"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:54.921" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 44 3C F1</msg>
<status endtime="20190121 15:29:54.922" status="PASS" starttime="20190121 15:29:54.720"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:54.931" status="PASS" starttime="20190121 15:29:54.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:54.939" status="PASS" starttime="20190121 15:29:54.934"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:54.947" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '44', '3C', 'F1']</msg>
<status endtime="20190121 15:29:54.948" status="PASS" starttime="20190121 15:29:54.942"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:54.957" level="INFO">${gpio_id} = 01</msg>
<status endtime="20190121 15:29:54.958" status="PASS" starttime="20190121 15:29:54.951"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:54.966" status="PASS" starttime="20190121 15:29:54.961"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:54.975" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:54.976" status="PASS" starttime="20190121 15:29:54.969"></status>
</kw>
<msg timestamp="20190121 15:29:54.979" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:54.980" status="PASS" starttime="20190121 15:29:54.686"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:54.989" status="PASS" starttime="20190121 15:29:54.983"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:54.996" status="PASS" starttime="20190121 15:29:54.991"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:55.017" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0065 20</msg>
<status endtime="20190121 15:29:55.018" status="PASS" starttime="20190121 15:29:55.009"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:55.027" status="PASS" starttime="20190121 15:29:55.021"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:55.266" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 45 3C F0</msg>
<status endtime="20190121 15:29:55.267" status="PASS" starttime="20190121 15:29:55.030"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:55.278" status="PASS" starttime="20190121 15:29:55.271"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:55.287" status="PASS" starttime="20190121 15:29:55.281"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:55.296" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '45', '3C', 'F0']</msg>
<status endtime="20190121 15:29:55.297" status="PASS" starttime="20190121 15:29:55.291"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:55.305" level="INFO">${gpio_id} = 01</msg>
<status endtime="20190121 15:29:55.306" status="PASS" starttime="20190121 15:29:55.300"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:55.314" status="PASS" starttime="20190121 15:29:55.309"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:55.323" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:55.324" status="PASS" starttime="20190121 15:29:55.317"></status>
</kw>
<msg timestamp="20190121 15:29:55.328" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:55.329" status="PASS" starttime="20190121 15:29:54.998"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:55.337" status="PASS" starttime="20190121 15:29:55.331"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:55.345" status="PASS" starttime="20190121 15:29:55.340"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:55.365" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0020 00</msg>
<status endtime="20190121 15:29:55.366" status="PASS" starttime="20190121 15:29:55.358"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:55.375" status="PASS" starttime="20190121 15:29:55.369"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:55.605" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 42 3C F7</msg>
<status endtime="20190121 15:29:55.606" status="PASS" starttime="20190121 15:29:55.378"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:55.616" status="PASS" starttime="20190121 15:29:55.610"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:55.628" status="PASS" starttime="20190121 15:29:55.619"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:55.637" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '42', '3C', 'F7']</msg>
<status endtime="20190121 15:29:55.637" status="PASS" starttime="20190121 15:29:55.631"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:55.646" level="INFO">${gpio_id} = 01</msg>
<status endtime="20190121 15:29:55.648" status="PASS" starttime="20190121 15:29:55.640"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:55.656" status="PASS" starttime="20190121 15:29:55.651"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:55.665" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:55.666" status="PASS" starttime="20190121 15:29:55.659"></status>
</kw>
<msg timestamp="20190121 15:29:55.670" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:55.671" status="PASS" starttime="20190121 15:29:55.347"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:55.679" status="PASS" starttime="20190121 15:29:55.674"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:55.687" status="PASS" starttime="20190121 15:29:55.682"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:55.707" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0000 20</msg>
<status endtime="20190121 15:29:55.708" status="PASS" starttime="20190121 15:29:55.699"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:55.717" status="PASS" starttime="20190121 15:29:55.711"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:55.920" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 43 3C F6</msg>
<status endtime="20190121 15:29:55.921" status="PASS" starttime="20190121 15:29:55.720"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:55.930" status="PASS" starttime="20190121 15:29:55.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:55.939" status="PASS" starttime="20190121 15:29:55.933"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:55.946" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '43', '3C', 'F6']</msg>
<status endtime="20190121 15:29:55.947" status="PASS" starttime="20190121 15:29:55.942"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:55.956" level="INFO">${gpio_id} = 01</msg>
<status endtime="20190121 15:29:55.957" status="PASS" starttime="20190121 15:29:55.950"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:55.965" status="PASS" starttime="20190121 15:29:55.960"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:55.974" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:55.975" status="PASS" starttime="20190121 15:29:55.969"></status>
</kw>
<msg timestamp="20190121 15:29:55.979" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:55.979" status="PASS" starttime="20190121 15:29:55.689"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:55.988" status="PASS" starttime="20190121 15:29:55.982"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:55.995" status="PASS" starttime="20190121 15:29:55.991"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:56.016" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 01 01 0000 00</msg>
<status endtime="20190121 15:29:56.017" status="PASS" starttime="20190121 15:29:56.009"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:56.026" status="PASS" starttime="20190121 15:29:56.020"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:56.254" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 01 01 44 3C F1</msg>
<status endtime="20190121 15:29:56.255" status="PASS" starttime="20190121 15:29:56.029"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:56.265" status="PASS" starttime="20190121 15:29:56.259"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:56.274" status="PASS" starttime="20190121 15:29:56.268"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:56.282" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '01', '01', '44', '3C', 'F1']</msg>
<status endtime="20190121 15:29:56.283" status="PASS" starttime="20190121 15:29:56.277"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:56.292" level="INFO">${gpio_id} = 01</msg>
<status endtime="20190121 15:29:56.293" status="PASS" starttime="20190121 15:29:56.286"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:56.302" status="PASS" starttime="20190121 15:29:56.296"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:56.310" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:56.311" status="PASS" starttime="20190121 15:29:56.305"></status>
</kw>
<msg timestamp="20190121 15:29:56.315" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:56.316" status="PASS" starttime="20190121 15:29:55.998"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:56.328" status="PASS" starttime="20190121 15:29:56.319"></status>
</kw>
<status endtime="20190121 15:29:56.331" status="PASS" starttime="20190121 15:29:53.349"></status>
</kw>
<status endtime="20190121 15:29:56.333" status="PASS" starttime="20190121 15:29:53.335"></status>
</kw>
<kw name="digit_out_hs_3">
<doc>Set pwm for the digital output hs 3</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output hs 3</arg>
</arguments>
<status endtime="20190121 15:29:56.347" status="PASS" starttime="20190121 15:29:56.342"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${HI_SIDE_SW_3}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:56.362" status="PASS" starttime="20190121 15:29:56.358"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:56.382" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0020 20</msg>
<status endtime="20190121 15:29:56.383" status="PASS" starttime="20190121 15:29:56.375"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:56.392" status="PASS" starttime="20190121 15:29:56.386"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:56.602" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 02 01 45 3D F3</msg>
<status endtime="20190121 15:29:56.603" status="PASS" starttime="20190121 15:29:56.395"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:56.611" status="PASS" starttime="20190121 15:29:56.605"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:56.620" status="PASS" starttime="20190121 15:29:56.614"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:56.628" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '02', '01', '45', '3D', 'F3']</msg>
<status endtime="20190121 15:29:56.629" status="PASS" starttime="20190121 15:29:56.623"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:56.637" level="INFO">${gpio_id} = 02</msg>
<status endtime="20190121 15:29:56.638" status="PASS" starttime="20190121 15:29:56.631"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:56.646" status="PASS" starttime="20190121 15:29:56.641"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:56.655" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:56.656" status="PASS" starttime="20190121 15:29:56.649"></status>
</kw>
<msg timestamp="20190121 15:29:56.659" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:56.660" status="PASS" starttime="20190121 15:29:56.365"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:56.669" status="PASS" starttime="20190121 15:29:56.663"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:56.677" status="PASS" starttime="20190121 15:29:56.672"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:56.697" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0064 64</msg>
<status endtime="20190121 15:29:56.698" status="PASS" starttime="20190121 15:29:56.689"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:56.706" status="PASS" starttime="20190121 15:29:56.701"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:56.924" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 02 01 46 3D F0</msg>
<status endtime="20190121 15:29:56.925" status="PASS" starttime="20190121 15:29:56.709"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:56.934" status="PASS" starttime="20190121 15:29:56.928"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:56.942" status="PASS" starttime="20190121 15:29:56.937"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:56.950" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '02', '01', '46', '3D', 'F0']</msg>
<status endtime="20190121 15:29:56.951" status="PASS" starttime="20190121 15:29:56.945"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:56.959" level="INFO">${gpio_id} = 02</msg>
<status endtime="20190121 15:29:56.960" status="PASS" starttime="20190121 15:29:56.954"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:56.969" status="PASS" starttime="20190121 15:29:56.963"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:56.981" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:56.982" status="PASS" starttime="20190121 15:29:56.972"></status>
</kw>
<msg timestamp="20190121 15:29:56.987" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:56.988" status="PASS" starttime="20190121 15:29:56.679"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:56.996" status="PASS" starttime="20190121 15:29:56.990"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:57.004" status="PASS" starttime="20190121 15:29:56.999"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:57.024" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0001 01</msg>
<status endtime="20190121 15:29:57.025" status="PASS" starttime="20190121 15:29:57.017"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:57.033" status="PASS" starttime="20190121 15:29:57.028"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:57.261" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 02 01 47 3D F1</msg>
<status endtime="20190121 15:29:57.262" status="PASS" starttime="20190121 15:29:57.036"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:57.272" status="PASS" starttime="20190121 15:29:57.266"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:57.280" status="PASS" starttime="20190121 15:29:57.275"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:57.288" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '02', '01', '47', '3D', 'F1']</msg>
<status endtime="20190121 15:29:57.289" status="PASS" starttime="20190121 15:29:57.283"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:57.299" level="INFO">${gpio_id} = 02</msg>
<status endtime="20190121 15:29:57.300" status="PASS" starttime="20190121 15:29:57.293"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:57.308" status="PASS" starttime="20190121 15:29:57.303"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:57.317" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:57.318" status="PASS" starttime="20190121 15:29:57.311"></status>
</kw>
<msg timestamp="20190121 15:29:57.321" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:57.322" status="PASS" starttime="20190121 15:29:57.006"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:57.332" status="PASS" starttime="20190121 15:29:57.325"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:57.340" status="PASS" starttime="20190121 15:29:57.335"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:57.385" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0065 65</msg>
<status endtime="20190121 15:29:57.386" status="PASS" starttime="20190121 15:29:57.366"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:57.396" status="PASS" starttime="20190121 15:29:57.389"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:57.599" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 40 3C F6</msg>
<status endtime="20190121 15:29:57.600" status="PASS" starttime="20190121 15:29:57.399"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:57.609" status="PASS" starttime="20190121 15:29:57.604"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:57.618" status="PASS" starttime="20190121 15:29:57.612"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:57.629" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '40', '3C', 'F6']</msg>
<status endtime="20190121 15:29:57.630" status="PASS" starttime="20190121 15:29:57.621"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:57.638" level="INFO">${gpio_id} = 02</msg>
<status endtime="20190121 15:29:57.639" status="PASS" starttime="20190121 15:29:57.633"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:57.651" status="PASS" starttime="20190121 15:29:57.644"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:57.660" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:57.660" status="PASS" starttime="20190121 15:29:57.654"></status>
</kw>
<msg timestamp="20190121 15:29:57.664" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:57.665" status="PASS" starttime="20190121 15:29:57.342"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:57.674" status="PASS" starttime="20190121 15:29:57.668"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:57.681" status="PASS" starttime="20190121 15:29:57.676"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:57.705" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0020 65</msg>
<status endtime="20190121 15:29:57.706" status="PASS" starttime="20190121 15:29:57.694"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:57.714" status="PASS" starttime="20190121 15:29:57.709"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:57.943" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 41 3C F7</msg>
<status endtime="20190121 15:29:57.945" status="PASS" starttime="20190121 15:29:57.717"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:57.954" status="PASS" starttime="20190121 15:29:57.948"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:57.962" status="PASS" starttime="20190121 15:29:57.957"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:57.970" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '41', '3C', 'F7']</msg>
<status endtime="20190121 15:29:57.971" status="PASS" starttime="20190121 15:29:57.965"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:57.980" level="INFO">${gpio_id} = 02</msg>
<status endtime="20190121 15:29:57.981" status="PASS" starttime="20190121 15:29:57.974"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:57.990" status="PASS" starttime="20190121 15:29:57.984"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:57.998" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:57.999" status="PASS" starttime="20190121 15:29:57.993"></status>
</kw>
<msg timestamp="20190121 15:29:58.003" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:58.004" status="PASS" starttime="20190121 15:29:57.683"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:58.013" status="PASS" starttime="20190121 15:29:58.007"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:58.021" status="PASS" starttime="20190121 15:29:58.016"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:58.041" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0065 20</msg>
<status endtime="20190121 15:29:58.042" status="PASS" starttime="20190121 15:29:58.033"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:58.051" status="PASS" starttime="20190121 15:29:58.046"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:58.278" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 42 3C F4</msg>
<status endtime="20190121 15:29:58.279" status="PASS" starttime="20190121 15:29:58.055"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:58.288" status="PASS" starttime="20190121 15:29:58.282"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:58.296" status="PASS" starttime="20190121 15:29:58.291"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:58.305" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '42', '3C', 'F4']</msg>
<status endtime="20190121 15:29:58.306" status="PASS" starttime="20190121 15:29:58.299"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:58.316" level="INFO">${gpio_id} = 02</msg>
<status endtime="20190121 15:29:58.317" status="PASS" starttime="20190121 15:29:58.310"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:58.326" status="PASS" starttime="20190121 15:29:58.320"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:58.336" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:58.337" status="PASS" starttime="20190121 15:29:58.329"></status>
</kw>
<msg timestamp="20190121 15:29:58.340" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:58.341" status="PASS" starttime="20190121 15:29:58.023"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:58.357" status="PASS" starttime="20190121 15:29:58.344"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:58.374" status="PASS" starttime="20190121 15:29:58.365"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:58.406" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0020 00</msg>
<status endtime="20190121 15:29:58.407" status="PASS" starttime="20190121 15:29:58.399"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:58.416" status="PASS" starttime="20190121 15:29:58.410"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:58.619" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 43 3C F5</msg>
<status endtime="20190121 15:29:58.620" status="PASS" starttime="20190121 15:29:58.419"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:58.629" status="PASS" starttime="20190121 15:29:58.624"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:58.641" status="PASS" starttime="20190121 15:29:58.632"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:58.649" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '43', '3C', 'F5']</msg>
<status endtime="20190121 15:29:58.650" status="PASS" starttime="20190121 15:29:58.644"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:58.659" level="INFO">${gpio_id} = 02</msg>
<status endtime="20190121 15:29:58.660" status="PASS" starttime="20190121 15:29:58.653"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:58.668" status="PASS" starttime="20190121 15:29:58.662"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:58.677" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:58.678" status="PASS" starttime="20190121 15:29:58.671"></status>
</kw>
<msg timestamp="20190121 15:29:58.681" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:58.682" status="PASS" starttime="20190121 15:29:58.376"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:58.690" status="PASS" starttime="20190121 15:29:58.685"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:58.698" status="PASS" starttime="20190121 15:29:58.693"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:58.720" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0000 20</msg>
<status endtime="20190121 15:29:58.721" status="PASS" starttime="20190121 15:29:58.713"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:58.729" status="PASS" starttime="20190121 15:29:58.724"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:58.958" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 44 3C F2</msg>
<status endtime="20190121 15:29:58.959" status="PASS" starttime="20190121 15:29:58.732"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:58.968" status="PASS" starttime="20190121 15:29:58.963"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:58.978" status="PASS" starttime="20190121 15:29:58.971"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:58.986" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '44', '3C', 'F2']</msg>
<status endtime="20190121 15:29:58.987" status="PASS" starttime="20190121 15:29:58.981"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:58.995" level="INFO">${gpio_id} = 02</msg>
<status endtime="20190121 15:29:58.998" status="PASS" starttime="20190121 15:29:58.990"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:59.009" status="PASS" starttime="20190121 15:29:59.001"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:59.019" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:59.020" status="PASS" starttime="20190121 15:29:59.011"></status>
</kw>
<msg timestamp="20190121 15:29:59.023" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:59.024" status="PASS" starttime="20190121 15:29:58.702"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:59.033" status="PASS" starttime="20190121 15:29:59.027"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:29:59.040" status="PASS" starttime="20190121 15:29:59.035"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:59.061" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 02 01 0000 00</msg>
<status endtime="20190121 15:29:59.062" status="PASS" starttime="20190121 15:29:59.053"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:59.070" status="PASS" starttime="20190121 15:29:59.064"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:59.299" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 02 01 45 3C F3</msg>
<status endtime="20190121 15:29:59.300" status="PASS" starttime="20190121 15:29:59.073"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:59.310" status="PASS" starttime="20190121 15:29:59.303"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:59.318" status="PASS" starttime="20190121 15:29:59.313"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:59.326" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '02', '01', '45', '3C', 'F3']</msg>
<status endtime="20190121 15:29:59.327" status="PASS" starttime="20190121 15:29:59.321"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:59.336" level="INFO">${gpio_id} = 02</msg>
<status endtime="20190121 15:29:59.337" status="PASS" starttime="20190121 15:29:59.330"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:59.345" status="PASS" starttime="20190121 15:29:59.339"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:59.367" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:29:59.368" status="PASS" starttime="20190121 15:29:59.348"></status>
</kw>
<msg timestamp="20190121 15:29:59.376" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:29:59.380" status="PASS" starttime="20190121 15:29:59.043"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:59.401" status="PASS" starttime="20190121 15:29:59.383"></status>
</kw>
<status endtime="20190121 15:29:59.403" status="PASS" starttime="20190121 15:29:56.349"></status>
</kw>
<status endtime="20190121 15:29:59.406" status="PASS" starttime="20190121 15:29:56.335"></status>
</kw>
<kw name="digit_out_hs_4">
<doc>Set for the digital output hs 4</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set for the digital output hs 4</arg>
</arguments>
<status endtime="20190121 15:29:59.419" status="PASS" starttime="20190121 15:29:59.414"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${HI_SIDE_SW_4}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:59.433" status="PASS" starttime="20190121 15:29:59.429"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:59.453" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0020 20</msg>
<status endtime="20190121 15:29:59.455" status="PASS" starttime="20190121 15:29:59.446"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:59.464" status="PASS" starttime="20190121 15:29:59.458"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:29:59.667" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 03 01 46 3D F1</msg>
<status endtime="20190121 15:29:59.668" status="PASS" starttime="20190121 15:29:59.467"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:29:59.677" status="PASS" starttime="20190121 15:29:59.672"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:59.686" status="PASS" starttime="20190121 15:29:59.680"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:29:59.694" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '03', '01', '46', '3D', 'F1']</msg>
<status endtime="20190121 15:29:59.695" status="PASS" starttime="20190121 15:29:59.689"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:29:59.703" level="INFO">${gpio_id} = 03</msg>
<status endtime="20190121 15:29:59.704" status="PASS" starttime="20190121 15:29:59.698"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:59.713" status="PASS" starttime="20190121 15:29:59.707"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:29:59.721" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:29:59.722" status="PASS" starttime="20190121 15:29:59.716"></status>
</kw>
<msg timestamp="20190121 15:29:59.726" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:29:59.727" status="PASS" starttime="20190121 15:29:59.435"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:29:59.735" status="PASS" starttime="20190121 15:29:59.729"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status endtime="20190121 15:29:59.742" status="PASS" starttime="20190121 15:29:59.738"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:29:59.762" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0064 64</msg>
<status endtime="20190121 15:29:59.763" status="PASS" starttime="20190121 15:29:59.755"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:29:59.772" status="PASS" starttime="20190121 15:29:59.766"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:00.011" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 03 01 41 3D F6</msg>
<status endtime="20190121 15:30:00.012" status="PASS" starttime="20190121 15:29:59.775"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:00.021" status="PASS" starttime="20190121 15:30:00.016"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:00.030" status="PASS" starttime="20190121 15:30:00.024"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:00.038" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '03', '01', '41', '3D', 'F6']</msg>
<status endtime="20190121 15:30:00.038" status="PASS" starttime="20190121 15:30:00.033"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:00.047" level="INFO">${gpio_id} = 03</msg>
<status endtime="20190121 15:30:00.048" status="PASS" starttime="20190121 15:30:00.041"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:00.056" status="PASS" starttime="20190121 15:30:00.051"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:00.068" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:00.069" status="PASS" starttime="20190121 15:30:00.059"></status>
</kw>
<msg timestamp="20190121 15:30:00.073" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:00.074" status="PASS" starttime="20190121 15:29:59.745"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:00.083" status="PASS" starttime="20190121 15:30:00.076"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:00.090" status="PASS" starttime="20190121 15:30:00.086"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:00.133" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0001 01</msg>
<status endtime="20190121 15:30:00.134" status="PASS" starttime="20190121 15:30:00.117"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:00.145" status="PASS" starttime="20190121 15:30:00.139"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:00.349" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 03 01 42 3D F5</msg>
<status endtime="20190121 15:30:00.350" status="PASS" starttime="20190121 15:30:00.148"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:00.359" status="PASS" starttime="20190121 15:30:00.353"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:00.368" status="PASS" starttime="20190121 15:30:00.362"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:00.375" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '03', '01', '42', '3D', 'F5']</msg>
<status endtime="20190121 15:30:00.376" status="PASS" starttime="20190121 15:30:00.371"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:00.385" level="INFO">${gpio_id} = 03</msg>
<status endtime="20190121 15:30:00.386" status="PASS" starttime="20190121 15:30:00.379"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:00.394" status="PASS" starttime="20190121 15:30:00.389"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:00.403" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:00.404" status="PASS" starttime="20190121 15:30:00.397"></status>
</kw>
<msg timestamp="20190121 15:30:00.407" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:00.408" status="PASS" starttime="20190121 15:30:00.093"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:00.417" status="PASS" starttime="20190121 15:30:00.411"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:00.424" status="PASS" starttime="20190121 15:30:00.419"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:00.444" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0065 65</msg>
<status endtime="20190121 15:30:00.445" status="PASS" starttime="20190121 15:30:00.437"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:00.454" status="PASS" starttime="20190121 15:30:00.448"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:00.690" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 43 3C F4</msg>
<status endtime="20190121 15:30:00.691" status="PASS" starttime="20190121 15:30:00.457"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:00.699" status="PASS" starttime="20190121 15:30:00.694"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:00.708" status="PASS" starttime="20190121 15:30:00.702"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:00.716" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '43', '3C', 'F4']</msg>
<status endtime="20190121 15:30:00.717" status="PASS" starttime="20190121 15:30:00.711"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:00.725" level="INFO">${gpio_id} = 03</msg>
<status endtime="20190121 15:30:00.726" status="PASS" starttime="20190121 15:30:00.719"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:00.734" status="PASS" starttime="20190121 15:30:00.729"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:00.743" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:00.744" status="PASS" starttime="20190121 15:30:00.737"></status>
</kw>
<msg timestamp="20190121 15:30:00.747" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:00.748" status="PASS" starttime="20190121 15:30:00.426"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:00.758" status="PASS" starttime="20190121 15:30:00.751"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:00.765" status="PASS" starttime="20190121 15:30:00.760"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:00.789" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0020 65</msg>
<status endtime="20190121 15:30:00.790" status="PASS" starttime="20190121 15:30:00.778"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:00.798" status="PASS" starttime="20190121 15:30:00.793"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:01.028" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 44 3C F3</msg>
<status endtime="20190121 15:30:01.029" status="PASS" starttime="20190121 15:30:00.801"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:01.038" status="PASS" starttime="20190121 15:30:01.032"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:01.046" status="PASS" starttime="20190121 15:30:01.040"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:01.054" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '44', '3C', 'F3']</msg>
<status endtime="20190121 15:30:01.055" status="PASS" starttime="20190121 15:30:01.049"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:01.063" level="INFO">${gpio_id} = 03</msg>
<status endtime="20190121 15:30:01.064" status="PASS" starttime="20190121 15:30:01.058"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:01.073" status="PASS" starttime="20190121 15:30:01.067"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:01.081" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:01.082" status="PASS" starttime="20190121 15:30:01.076"></status>
</kw>
<msg timestamp="20190121 15:30:01.086" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:01.087" status="PASS" starttime="20190121 15:30:00.767"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:01.096" status="PASS" starttime="20190121 15:30:01.090"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:01.112" status="PASS" starttime="20190121 15:30:01.099"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:01.149" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0065 20</msg>
<status endtime="20190121 15:30:01.150" status="PASS" starttime="20190121 15:30:01.140"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:01.158" status="PASS" starttime="20190121 15:30:01.152"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:01.358" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 45 3C F2</msg>
<status endtime="20190121 15:30:01.359" status="PASS" starttime="20190121 15:30:01.161"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:01.368" status="PASS" starttime="20190121 15:30:01.363"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:01.378" status="PASS" starttime="20190121 15:30:01.371"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:01.386" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '45', '3C', 'F2']</msg>
<status endtime="20190121 15:30:01.387" status="PASS" starttime="20190121 15:30:01.381"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:01.396" level="INFO">${gpio_id} = 03</msg>
<status endtime="20190121 15:30:01.397" status="PASS" starttime="20190121 15:30:01.390"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:01.405" status="PASS" starttime="20190121 15:30:01.399"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:01.415" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:01.415" status="PASS" starttime="20190121 15:30:01.408"></status>
</kw>
<msg timestamp="20190121 15:30:01.430" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:01.431" status="PASS" starttime="20190121 15:30:01.115"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:01.456" status="PASS" starttime="20190121 15:30:01.450"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:01.491" status="PASS" starttime="20190121 15:30:01.459"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:01.580" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0020 00</msg>
<status endtime="20190121 15:30:01.582" status="PASS" starttime="20190121 15:30:01.536"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:01.676" status="PASS" starttime="20190121 15:30:01.599"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:01.933" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 46 3C F1</msg>
<status endtime="20190121 15:30:01.934" status="PASS" starttime="20190121 15:30:01.679"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:01.946" status="PASS" starttime="20190121 15:30:01.937"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:01.971" status="PASS" starttime="20190121 15:30:01.949"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:01.980" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '46', '3C', 'F1']</msg>
<status endtime="20190121 15:30:01.981" status="PASS" starttime="20190121 15:30:01.974"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:01.993" level="INFO">${gpio_id} = 03</msg>
<status endtime="20190121 15:30:01.994" status="PASS" starttime="20190121 15:30:01.987"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:02.003" status="PASS" starttime="20190121 15:30:01.997"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:02.012" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:02.013" status="PASS" starttime="20190121 15:30:02.006"></status>
</kw>
<msg timestamp="20190121 15:30:02.016" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:02.017" status="PASS" starttime="20190121 15:30:01.498"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:02.026" status="PASS" starttime="20190121 15:30:02.020"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:02.034" status="PASS" starttime="20190121 15:30:02.029"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:02.054" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0000 20</msg>
<status endtime="20190121 15:30:02.055" status="PASS" starttime="20190121 15:30:02.047"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:02.063" status="PASS" starttime="20190121 15:30:02.058"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:02.297" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 47 3C F0</msg>
<status endtime="20190121 15:30:02.298" status="PASS" starttime="20190121 15:30:02.066"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:02.307" status="PASS" starttime="20190121 15:30:02.301"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:02.317" status="PASS" starttime="20190121 15:30:02.310"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:02.325" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '47', '3C', 'F0']</msg>
<status endtime="20190121 15:30:02.326" status="PASS" starttime="20190121 15:30:02.320"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:02.336" level="INFO">${gpio_id} = 03</msg>
<status endtime="20190121 15:30:02.338" status="PASS" starttime="20190121 15:30:02.329"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:02.347" status="PASS" starttime="20190121 15:30:02.341"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:02.372" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:02.373" status="PASS" starttime="20190121 15:30:02.358"></status>
</kw>
<msg timestamp="20190121 15:30:02.381" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:02.382" status="PASS" starttime="20190121 15:30:02.036"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:02.399" status="PASS" starttime="20190121 15:30:02.390"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:02.408" status="PASS" starttime="20190121 15:30:02.403"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:02.428" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 03 01 0000 00</msg>
<status endtime="20190121 15:30:02.429" status="PASS" starttime="20190121 15:30:02.421"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:02.437" status="PASS" starttime="20190121 15:30:02.432"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:02.662" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 03 01 40 3C F7</msg>
<status endtime="20190121 15:30:02.663" status="PASS" starttime="20190121 15:30:02.440"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:02.672" status="PASS" starttime="20190121 15:30:02.667"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:02.681" status="PASS" starttime="20190121 15:30:02.675"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:02.689" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '03', '01', '40', '3C', 'F7']</msg>
<status endtime="20190121 15:30:02.690" status="PASS" starttime="20190121 15:30:02.684"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:02.699" level="INFO">${gpio_id} = 03</msg>
<status endtime="20190121 15:30:02.699" status="PASS" starttime="20190121 15:30:02.693"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:02.715" status="PASS" starttime="20190121 15:30:02.702"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:02.724" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:02.725" status="PASS" starttime="20190121 15:30:02.718"></status>
</kw>
<msg timestamp="20190121 15:30:02.729" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:02.729" status="PASS" starttime="20190121 15:30:02.410"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:02.738" status="PASS" starttime="20190121 15:30:02.732"></status>
</kw>
<status endtime="20190121 15:30:02.740" status="PASS" starttime="20190121 15:29:59.421"></status>
</kw>
<status endtime="20190121 15:30:02.742" status="PASS" starttime="20190121 15:29:59.408"></status>
</kw>
<kw name="digit_out_led1">
<doc>Set pwm for the digital output led1</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output led1</arg>
</arguments>
<status endtime="20190121 15:30:02.756" status="PASS" starttime="20190121 15:30:02.751"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${DIG_O_1_LED1}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:02.770" status="PASS" starttime="20190121 15:30:02.766"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:02.791" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0020 20</msg>
<status endtime="20190121 15:30:02.791" status="PASS" starttime="20190121 15:30:02.783"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:02.800" status="PASS" starttime="20190121 15:30:02.794"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:03.031" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 04 01 41 3D F1</msg>
<status endtime="20190121 15:30:03.032" status="PASS" starttime="20190121 15:30:02.803"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:03.042" status="PASS" starttime="20190121 15:30:03.035"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:03.051" status="PASS" starttime="20190121 15:30:03.045"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:03.059" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '04', '01', '41', '3D', 'F1']</msg>
<status endtime="20190121 15:30:03.060" status="PASS" starttime="20190121 15:30:03.054"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:03.069" level="INFO">${gpio_id} = 04</msg>
<status endtime="20190121 15:30:03.070" status="PASS" starttime="20190121 15:30:03.063"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:03.078" status="PASS" starttime="20190121 15:30:03.073"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:03.087" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:03.088" status="PASS" starttime="20190121 15:30:03.081"></status>
</kw>
<msg timestamp="20190121 15:30:03.092" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:03.093" status="PASS" starttime="20190121 15:30:02.773"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:03.111" status="PASS" starttime="20190121 15:30:03.096"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:03.127" status="PASS" starttime="20190121 15:30:03.122"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:03.156" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0064 64</msg>
<status endtime="20190121 15:30:03.157" status="PASS" starttime="20190121 15:30:03.149"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:03.166" status="PASS" starttime="20190121 15:30:03.160"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:03.369" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 04 01 42 3D F2</msg>
<status endtime="20190121 15:30:03.370" status="PASS" starttime="20190121 15:30:03.169"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:03.379" status="PASS" starttime="20190121 15:30:03.373"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:03.388" status="PASS" starttime="20190121 15:30:03.381"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:03.398" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '04', '01', '42', '3D', 'F2']</msg>
<status endtime="20190121 15:30:03.399" status="PASS" starttime="20190121 15:30:03.393"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:03.407" level="INFO">${gpio_id} = 04</msg>
<status endtime="20190121 15:30:03.408" status="PASS" starttime="20190121 15:30:03.402"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:03.417" status="PASS" starttime="20190121 15:30:03.411"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:03.430" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:03.431" status="PASS" starttime="20190121 15:30:03.420"></status>
</kw>
<msg timestamp="20190121 15:30:03.434" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:03.435" status="PASS" starttime="20190121 15:30:03.129"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:03.443" status="PASS" starttime="20190121 15:30:03.438"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:03.451" status="PASS" starttime="20190121 15:30:03.446"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:03.471" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0001 01</msg>
<status endtime="20190121 15:30:03.472" status="PASS" starttime="20190121 15:30:03.464"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:03.481" status="PASS" starttime="20190121 15:30:03.475"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:03.722" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 04 01 43 3D F3</msg>
<status endtime="20190121 15:30:03.723" status="PASS" starttime="20190121 15:30:03.484"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:03.733" status="PASS" starttime="20190121 15:30:03.726"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:03.741" status="PASS" starttime="20190121 15:30:03.736"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:03.749" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '04', '01', '43', '3D', 'F3']</msg>
<status endtime="20190121 15:30:03.750" status="PASS" starttime="20190121 15:30:03.744"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:03.759" level="INFO">${gpio_id} = 04</msg>
<status endtime="20190121 15:30:03.759" status="PASS" starttime="20190121 15:30:03.753"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:03.768" status="PASS" starttime="20190121 15:30:03.763"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:03.777" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:03.778" status="PASS" starttime="20190121 15:30:03.771"></status>
</kw>
<msg timestamp="20190121 15:30:03.782" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:03.782" status="PASS" starttime="20190121 15:30:03.453"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:03.791" status="PASS" starttime="20190121 15:30:03.785"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:03.799" status="PASS" starttime="20190121 15:30:03.794"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:03.819" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0065 65</msg>
<status endtime="20190121 15:30:03.820" status="PASS" starttime="20190121 15:30:03.812"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:03.829" status="PASS" starttime="20190121 15:30:03.823"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:04.061" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 44 3C F4</msg>
<status endtime="20190121 15:30:04.062" status="PASS" starttime="20190121 15:30:03.831"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:04.071" status="PASS" starttime="20190121 15:30:04.065"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:04.080" status="PASS" starttime="20190121 15:30:04.074"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:04.088" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '44', '3C', 'F4']</msg>
<status endtime="20190121 15:30:04.088" status="PASS" starttime="20190121 15:30:04.083"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:04.097" level="INFO">${gpio_id} = 04</msg>
<status endtime="20190121 15:30:04.098" status="PASS" starttime="20190121 15:30:04.091"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:04.120" status="PASS" starttime="20190121 15:30:04.110"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:04.139" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:04.140" status="PASS" starttime="20190121 15:30:04.127"></status>
</kw>
<msg timestamp="20190121 15:30:04.144" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:04.145" status="PASS" starttime="20190121 15:30:03.801"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:04.153" status="PASS" starttime="20190121 15:30:04.148"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:04.161" status="PASS" starttime="20190121 15:30:04.156"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:04.186" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0020 65</msg>
<status endtime="20190121 15:30:04.187" status="PASS" starttime="20190121 15:30:04.174"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:04.196" status="PASS" starttime="20190121 15:30:04.190"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:04.398" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 45 3C F5</msg>
<status endtime="20190121 15:30:04.399" status="PASS" starttime="20190121 15:30:04.199"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:04.408" status="PASS" starttime="20190121 15:30:04.403"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:04.418" status="PASS" starttime="20190121 15:30:04.411"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:04.426" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '45', '3C', 'F5']</msg>
<status endtime="20190121 15:30:04.427" status="PASS" starttime="20190121 15:30:04.421"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:04.435" level="INFO">${gpio_id} = 04</msg>
<status endtime="20190121 15:30:04.436" status="PASS" starttime="20190121 15:30:04.430"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:04.445" status="PASS" starttime="20190121 15:30:04.439"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:04.454" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:04.455" status="PASS" starttime="20190121 15:30:04.448"></status>
</kw>
<msg timestamp="20190121 15:30:04.458" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:04.459" status="PASS" starttime="20190121 15:30:04.163"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:04.467" status="PASS" starttime="20190121 15:30:04.462"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:04.475" status="PASS" starttime="20190121 15:30:04.470"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:04.496" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0065 20</msg>
<status endtime="20190121 15:30:04.497" status="PASS" starttime="20190121 15:30:04.488"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:04.505" status="PASS" starttime="20190121 15:30:04.500"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:04.739" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 46 3C F6</msg>
<status endtime="20190121 15:30:04.740" status="PASS" starttime="20190121 15:30:04.508"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:04.749" status="PASS" starttime="20190121 15:30:04.743"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:04.757" status="PASS" starttime="20190121 15:30:04.751"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:04.765" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '46', '3C', 'F6']</msg>
<status endtime="20190121 15:30:04.766" status="PASS" starttime="20190121 15:30:04.760"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:04.775" level="INFO">${gpio_id} = 04</msg>
<status endtime="20190121 15:30:04.776" status="PASS" starttime="20190121 15:30:04.770"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:04.794" status="PASS" starttime="20190121 15:30:04.788"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:04.803" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:04.804" status="PASS" starttime="20190121 15:30:04.797"></status>
</kw>
<msg timestamp="20190121 15:30:04.807" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:04.808" status="PASS" starttime="20190121 15:30:04.477"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:04.817" status="PASS" starttime="20190121 15:30:04.811"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:04.825" status="PASS" starttime="20190121 15:30:04.819"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:04.846" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0020 00</msg>
<status endtime="20190121 15:30:04.847" status="PASS" starttime="20190121 15:30:04.838"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:04.869" status="PASS" starttime="20190121 15:30:04.849"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:05.085" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 47 3C F7</msg>
<status endtime="20190121 15:30:05.086" status="PASS" starttime="20190121 15:30:04.876"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:05.095" status="PASS" starttime="20190121 15:30:05.090"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:05.109" status="PASS" starttime="20190121 15:30:05.098"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:05.117" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '47', '3C', 'F7']</msg>
<status endtime="20190121 15:30:05.118" status="PASS" starttime="20190121 15:30:05.112"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:05.127" level="INFO">${gpio_id} = 04</msg>
<status endtime="20190121 15:30:05.128" status="PASS" starttime="20190121 15:30:05.121"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:05.136" status="PASS" starttime="20190121 15:30:05.131"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:05.145" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:05.146" status="PASS" starttime="20190121 15:30:05.139"></status>
</kw>
<msg timestamp="20190121 15:30:05.150" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:05.150" status="PASS" starttime="20190121 15:30:04.827"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:05.159" status="PASS" starttime="20190121 15:30:05.153"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:05.166" status="PASS" starttime="20190121 15:30:05.162"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:05.187" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0000 20</msg>
<status endtime="20190121 15:30:05.187" status="PASS" starttime="20190121 15:30:05.179"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:05.196" status="PASS" starttime="20190121 15:30:05.190"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:05.450" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 40 3C F0</msg>
<status endtime="20190121 15:30:05.451" status="PASS" starttime="20190121 15:30:05.199"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:05.464" status="PASS" starttime="20190121 15:30:05.455"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:05.473" status="PASS" starttime="20190121 15:30:05.467"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:05.481" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '40', '3C', 'F0']</msg>
<status endtime="20190121 15:30:05.482" status="PASS" starttime="20190121 15:30:05.476"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:05.490" level="INFO">${gpio_id} = 04</msg>
<status endtime="20190121 15:30:05.491" status="PASS" starttime="20190121 15:30:05.485"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:05.500" status="PASS" starttime="20190121 15:30:05.494"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:05.508" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:05.509" status="PASS" starttime="20190121 15:30:05.503"></status>
</kw>
<msg timestamp="20190121 15:30:05.513" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:05.514" status="PASS" starttime="20190121 15:30:05.169"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:05.524" status="PASS" starttime="20190121 15:30:05.518"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:05.531" status="PASS" starttime="20190121 15:30:05.527"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:05.552" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 04 01 0000 00</msg>
<status endtime="20190121 15:30:05.553" status="PASS" starttime="20190121 15:30:05.545"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:05.561" status="PASS" starttime="20190121 15:30:05.556"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:05.790" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 04 01 41 3C F1</msg>
<status endtime="20190121 15:30:05.791" status="PASS" starttime="20190121 15:30:05.565"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:05.799" status="PASS" starttime="20190121 15:30:05.794"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:05.808" status="PASS" starttime="20190121 15:30:05.802"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:05.816" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '04', '01', '41', '3C', 'F1']</msg>
<status endtime="20190121 15:30:05.817" status="PASS" starttime="20190121 15:30:05.811"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:05.825" level="INFO">${gpio_id} = 04</msg>
<status endtime="20190121 15:30:05.826" status="PASS" starttime="20190121 15:30:05.820"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:05.835" status="PASS" starttime="20190121 15:30:05.829"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:05.843" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:05.844" status="PASS" starttime="20190121 15:30:05.838"></status>
</kw>
<msg timestamp="20190121 15:30:05.848" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:05.848" status="PASS" starttime="20190121 15:30:05.534"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:05.881" status="PASS" starttime="20190121 15:30:05.860"></status>
</kw>
<status endtime="20190121 15:30:05.883" status="PASS" starttime="20190121 15:30:02.758"></status>
</kw>
<status endtime="20190121 15:30:05.893" status="PASS" starttime="20190121 15:30:02.745"></status>
</kw>
<kw name="digit_out_led2">
<doc>Set pwm for the digital output led2</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output led2</arg>
</arguments>
<status endtime="20190121 15:30:05.907" status="PASS" starttime="20190121 15:30:05.902"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${DIG_O_2_LED2}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:05.923" status="PASS" starttime="20190121 15:30:05.917"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:05.943" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0020 20</msg>
<status endtime="20190121 15:30:05.944" status="PASS" starttime="20190121 15:30:05.935"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:05.952" status="PASS" starttime="20190121 15:30:05.946"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:06.154" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 05 01 42 3D F3</msg>
<status endtime="20190121 15:30:06.155" status="PASS" starttime="20190121 15:30:05.955"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:06.164" status="PASS" starttime="20190121 15:30:06.159"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:06.173" status="PASS" starttime="20190121 15:30:06.167"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:06.181" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '05', '01', '42', '3D', 'F3']</msg>
<status endtime="20190121 15:30:06.182" status="PASS" starttime="20190121 15:30:06.176"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:06.191" level="INFO">${gpio_id} = 05</msg>
<status endtime="20190121 15:30:06.192" status="PASS" starttime="20190121 15:30:06.185"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:06.201" status="PASS" starttime="20190121 15:30:06.195"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:06.209" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:06.210" status="PASS" starttime="20190121 15:30:06.204"></status>
</kw>
<msg timestamp="20190121 15:30:06.214" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:06.215" status="PASS" starttime="20190121 15:30:05.925"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:06.223" status="PASS" starttime="20190121 15:30:06.217"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:06.231" status="PASS" starttime="20190121 15:30:06.226"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:06.251" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0064 64</msg>
<status endtime="20190121 15:30:06.252" status="PASS" starttime="20190121 15:30:06.244"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:06.260" status="PASS" starttime="20190121 15:30:06.255"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:06.489" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 05 01 43 3D F2</msg>
<status endtime="20190121 15:30:06.490" status="PASS" starttime="20190121 15:30:06.263"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:06.499" status="PASS" starttime="20190121 15:30:06.493"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:06.508" status="PASS" starttime="20190121 15:30:06.502"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:06.515" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '05', '01', '43', '3D', 'F2']</msg>
<status endtime="20190121 15:30:06.516" status="PASS" starttime="20190121 15:30:06.511"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:06.525" level="INFO">${gpio_id} = 05</msg>
<status endtime="20190121 15:30:06.526" status="PASS" starttime="20190121 15:30:06.519"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:06.535" status="PASS" starttime="20190121 15:30:06.529"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:06.547" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:06.547" status="PASS" starttime="20190121 15:30:06.537"></status>
</kw>
<msg timestamp="20190121 15:30:06.551" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:06.552" status="PASS" starttime="20190121 15:30:06.233"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:06.560" status="PASS" starttime="20190121 15:30:06.555"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:06.568" status="PASS" starttime="20190121 15:30:06.563"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:06.589" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0001 01</msg>
<status endtime="20190121 15:30:06.590" status="PASS" starttime="20190121 15:30:06.582"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:06.598" status="PASS" starttime="20190121 15:30:06.593"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:06.826" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 05 01 44 3D F5</msg>
<status endtime="20190121 15:30:06.827" status="PASS" starttime="20190121 15:30:06.610"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:06.835" status="PASS" starttime="20190121 15:30:06.830"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:06.844" status="PASS" starttime="20190121 15:30:06.838"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:06.856" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '05', '01', '44', '3D', 'F5']</msg>
<status endtime="20190121 15:30:06.857" status="PASS" starttime="20190121 15:30:06.849"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:06.866" level="INFO">${gpio_id} = 05</msg>
<status endtime="20190121 15:30:06.866" status="PASS" starttime="20190121 15:30:06.860"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:06.875" status="PASS" starttime="20190121 15:30:06.869"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:06.884" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:06.884" status="PASS" starttime="20190121 15:30:06.878"></status>
</kw>
<msg timestamp="20190121 15:30:06.888" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:06.889" status="PASS" starttime="20190121 15:30:06.570"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:06.897" status="PASS" starttime="20190121 15:30:06.892"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:06.905" status="PASS" starttime="20190121 15:30:06.900"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:06.927" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0065 65</msg>
<status endtime="20190121 15:30:06.927" status="PASS" starttime="20190121 15:30:06.918"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:06.936" status="PASS" starttime="20190121 15:30:06.930"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:07.166" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 45 3C F4</msg>
<status endtime="20190121 15:30:07.167" status="PASS" starttime="20190121 15:30:06.939"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:07.175" status="PASS" starttime="20190121 15:30:07.170"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:07.184" status="PASS" starttime="20190121 15:30:07.178"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:07.192" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '45', '3C', 'F4']</msg>
<status endtime="20190121 15:30:07.192" status="PASS" starttime="20190121 15:30:07.187"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:07.201" level="INFO">${gpio_id} = 05</msg>
<status endtime="20190121 15:30:07.202" status="PASS" starttime="20190121 15:30:07.196"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:07.211" status="PASS" starttime="20190121 15:30:07.205"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:07.219" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:07.220" status="PASS" starttime="20190121 15:30:07.214"></status>
</kw>
<msg timestamp="20190121 15:30:07.224" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:07.224" status="PASS" starttime="20190121 15:30:06.907"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:07.233" status="PASS" starttime="20190121 15:30:07.227"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:07.240" status="PASS" starttime="20190121 15:30:07.236"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:07.264" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0020 65</msg>
<status endtime="20190121 15:30:07.265" status="PASS" starttime="20190121 15:30:07.253"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:07.273" status="PASS" starttime="20190121 15:30:07.268"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:07.501" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 46 3C F7</msg>
<status endtime="20190121 15:30:07.503" status="PASS" starttime="20190121 15:30:07.276"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:07.512" status="PASS" starttime="20190121 15:30:07.506"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:07.521" status="PASS" starttime="20190121 15:30:07.515"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:07.529" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '46', '3C', 'F7']</msg>
<status endtime="20190121 15:30:07.529" status="PASS" starttime="20190121 15:30:07.524"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:07.538" level="INFO">${gpio_id} = 05</msg>
<status endtime="20190121 15:30:07.539" status="PASS" starttime="20190121 15:30:07.532"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:07.547" status="PASS" starttime="20190121 15:30:07.542"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:07.556" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:07.557" status="PASS" starttime="20190121 15:30:07.550"></status>
</kw>
<msg timestamp="20190121 15:30:07.560" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:07.561" status="PASS" starttime="20190121 15:30:07.242"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:07.570" status="PASS" starttime="20190121 15:30:07.564"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:07.577" status="PASS" starttime="20190121 15:30:07.573"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:07.597" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0065 20</msg>
<status endtime="20190121 15:30:07.598" status="PASS" starttime="20190121 15:30:07.590"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:07.621" status="PASS" starttime="20190121 15:30:07.611"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:07.837" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 47 3C F6</msg>
<status endtime="20190121 15:30:07.838" status="PASS" starttime="20190121 15:30:07.629"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:07.847" status="PASS" starttime="20190121 15:30:07.841"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:07.856" status="PASS" starttime="20190121 15:30:07.850"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:07.863" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '47', '3C', 'F6']</msg>
<status endtime="20190121 15:30:07.865" status="PASS" starttime="20190121 15:30:07.859"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:07.873" level="INFO">${gpio_id} = 05</msg>
<status endtime="20190121 15:30:07.874" status="PASS" starttime="20190121 15:30:07.867"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:07.882" status="PASS" starttime="20190121 15:30:07.877"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:07.891" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:07.892" status="PASS" starttime="20190121 15:30:07.885"></status>
</kw>
<msg timestamp="20190121 15:30:07.895" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:07.896" status="PASS" starttime="20190121 15:30:07.579"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:07.905" status="PASS" starttime="20190121 15:30:07.899"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:07.912" status="PASS" starttime="20190121 15:30:07.907"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:07.935" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0020 00</msg>
<status endtime="20190121 15:30:07.936" status="PASS" starttime="20190121 15:30:07.928"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:07.946" status="PASS" starttime="20190121 15:30:07.939"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:08.176" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 40 3C F1</msg>
<status endtime="20190121 15:30:08.177" status="PASS" starttime="20190121 15:30:07.949"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:08.186" status="PASS" starttime="20190121 15:30:08.180"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:08.200" status="PASS" starttime="20190121 15:30:08.189"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:08.208" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '40', '3C', 'F1']</msg>
<status endtime="20190121 15:30:08.209" status="PASS" starttime="20190121 15:30:08.203"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:08.218" level="INFO">${gpio_id} = 05</msg>
<status endtime="20190121 15:30:08.219" status="PASS" starttime="20190121 15:30:08.212"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:08.227" status="PASS" starttime="20190121 15:30:08.222"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:08.236" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:08.237" status="PASS" starttime="20190121 15:30:08.230"></status>
</kw>
<msg timestamp="20190121 15:30:08.241" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:08.241" status="PASS" starttime="20190121 15:30:07.914"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:08.250" status="PASS" starttime="20190121 15:30:08.244"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:08.257" status="PASS" starttime="20190121 15:30:08.253"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:08.277" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0000 20</msg>
<status endtime="20190121 15:30:08.278" status="PASS" starttime="20190121 15:30:08.270"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:08.287" status="PASS" starttime="20190121 15:30:08.281"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:08.521" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 41 3C F0</msg>
<status endtime="20190121 15:30:08.522" status="PASS" starttime="20190121 15:30:08.290"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:08.531" status="PASS" starttime="20190121 15:30:08.525"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:08.550" status="PASS" starttime="20190121 15:30:08.537"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:08.564" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '41', '3C', 'F0']</msg>
<status endtime="20190121 15:30:08.566" status="PASS" starttime="20190121 15:30:08.556"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:08.580" level="INFO">${gpio_id} = 05</msg>
<status endtime="20190121 15:30:08.581" status="PASS" starttime="20190121 15:30:08.571"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:08.590" status="PASS" starttime="20190121 15:30:08.584"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:08.599" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:08.599" status="PASS" starttime="20190121 15:30:08.593"></status>
</kw>
<msg timestamp="20190121 15:30:08.611" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:08.612" status="PASS" starttime="20190121 15:30:08.260"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:08.641" status="PASS" starttime="20190121 15:30:08.623"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:08.651" status="PASS" starttime="20190121 15:30:08.644"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:08.672" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 05 01 0000 00</msg>
<status endtime="20190121 15:30:08.673" status="PASS" starttime="20190121 15:30:08.665"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:08.682" status="PASS" starttime="20190121 15:30:08.676"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:08.886" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 05 01 42 3C F3</msg>
<status endtime="20190121 15:30:08.887" status="PASS" starttime="20190121 15:30:08.685"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:08.896" status="PASS" starttime="20190121 15:30:08.890"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:08.904" status="PASS" starttime="20190121 15:30:08.899"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:08.912" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '05', '01', '42', '3C', 'F3']</msg>
<status endtime="20190121 15:30:08.913" status="PASS" starttime="20190121 15:30:08.907"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:08.922" level="INFO">${gpio_id} = 05</msg>
<status endtime="20190121 15:30:08.924" status="PASS" starttime="20190121 15:30:08.916"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:08.932" status="PASS" starttime="20190121 15:30:08.927"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:08.941" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:08.942" status="PASS" starttime="20190121 15:30:08.936"></status>
</kw>
<msg timestamp="20190121 15:30:08.946" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:08.947" status="PASS" starttime="20190121 15:30:08.654"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:08.959" status="PASS" starttime="20190121 15:30:08.950"></status>
</kw>
<status endtime="20190121 15:30:08.962" status="PASS" starttime="20190121 15:30:05.909"></status>
</kw>
<status endtime="20190121 15:30:08.964" status="PASS" starttime="20190121 15:30:05.895"></status>
</kw>
<kw name="digit_out_crm">
<doc>Set pwm for the digital output crm</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set pwm for the digital output crm</arg>
</arguments>
<status endtime="20190121 15:30:08.982" status="PASS" starttime="20190121 15:30:08.972"></status>
</kw>
<kw name="test_digitout_pwm">
<doc>Set pwm for the digital output</doc>
<arguments>
<arg>${DIG_O_3_CRM}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 32 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:09.010" status="PASS" starttime="20190121 15:30:08.999"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:09.035" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0020 20</msg>
<status endtime="20190121 15:30:09.035" status="PASS" starttime="20190121 15:30:09.023"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:09.058" status="PASS" starttime="20190121 15:30:09.043"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:09.291" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 06 01 43 3D F1</msg>
<status endtime="20190121 15:30:09.292" status="PASS" starttime="20190121 15:30:09.061"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:09.301" status="PASS" starttime="20190121 15:30:09.296"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:09.310" status="PASS" starttime="20190121 15:30:09.304"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:09.318" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '06', '01', '43', '3D', 'F1']</msg>
<status endtime="20190121 15:30:09.319" status="PASS" starttime="20190121 15:30:09.313"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:09.327" level="INFO">${gpio_id} = 06</msg>
<status endtime="20190121 15:30:09.328" status="PASS" starttime="20190121 15:30:09.321"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:09.336" status="PASS" starttime="20190121 15:30:09.331"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:09.345" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:09.347" status="PASS" starttime="20190121 15:30:09.339"></status>
</kw>
<msg timestamp="20190121 15:30:09.359" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:09.360" status="PASS" starttime="20190121 15:30:09.012"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:09.381" status="PASS" starttime="20190121 15:30:09.367"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 100 HZ and duty cycle 100 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:09.394" status="PASS" starttime="20190121 15:30:09.384"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MAX_PWM_FREQUENCY}</arg>
<arg>${MAX_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:09.414" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0064 64</msg>
<status endtime="20190121 15:30:09.415" status="PASS" starttime="20190121 15:30:09.407"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:09.425" status="PASS" starttime="20190121 15:30:09.418"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:09.627" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 06 01 44 3D F6</msg>
<status endtime="20190121 15:30:09.628" status="PASS" starttime="20190121 15:30:09.428"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:09.637" status="PASS" starttime="20190121 15:30:09.631"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:09.646" status="PASS" starttime="20190121 15:30:09.640"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:09.654" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '06', '01', '44', '3D', 'F6']</msg>
<status endtime="20190121 15:30:09.654" status="PASS" starttime="20190121 15:30:09.649"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:09.663" level="INFO">${gpio_id} = 06</msg>
<status endtime="20190121 15:30:09.664" status="PASS" starttime="20190121 15:30:09.657"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:09.672" status="PASS" starttime="20190121 15:30:09.667"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:09.684" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:09.685" status="PASS" starttime="20190121 15:30:09.675"></status>
</kw>
<msg timestamp="20190121 15:30:09.689" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:09.690" status="PASS" starttime="20190121 15:30:09.396"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:09.698" status="PASS" starttime="20190121 15:30:09.693"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 1 HZ and duty cycle 1 expected OK</arg>
</arguments>
<status endtime="20190121 15:30:09.706" status="PASS" starttime="20190121 15:30:09.701"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${MIN_PWM_FREQUENCY}</arg>
<arg>${MIN_PWM_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:09.730" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0001 01</msg>
<status endtime="20190121 15:30:09.731" status="PASS" starttime="20190121 15:30:09.722"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:09.741" status="PASS" starttime="20190121 15:30:09.735"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:09.970" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 00 06 01 45 3D F7</msg>
<status endtime="20190121 15:30:09.971" status="PASS" starttime="20190121 15:30:09.744"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:09.980" status="PASS" starttime="20190121 15:30:09.975"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:09.989" status="PASS" starttime="20190121 15:30:09.983"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:09.997" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '00', '06', '01', '45', '3D', 'F7']</msg>
<status endtime="20190121 15:30:09.998" status="PASS" starttime="20190121 15:30:09.992"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:10.007" level="INFO">${gpio_id} = 06</msg>
<status endtime="20190121 15:30:10.009" status="PASS" starttime="20190121 15:30:10.001"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:10.018" status="PASS" starttime="20190121 15:30:10.012"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:10.027" level="INFO">${ret_val} = 00</msg>
<status endtime="20190121 15:30:10.028" status="PASS" starttime="20190121 15:30:10.021"></status>
</kw>
<msg timestamp="20190121 15:30:10.031" level="INFO">${resp} = 00</msg>
<status endtime="20190121 15:30:10.032" status="PASS" starttime="20190121 15:30:09.708"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_OK}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:10.041" status="PASS" starttime="20190121 15:30:10.035"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:10.049" status="PASS" starttime="20190121 15:30:10.044"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:10.069" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0065 65</msg>
<status endtime="20190121 15:30:10.070" status="PASS" starttime="20190121 15:30:10.062"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:10.079" status="PASS" starttime="20190121 15:30:10.073"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:10.306" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 46 3C F4</msg>
<status endtime="20190121 15:30:10.307" status="PASS" starttime="20190121 15:30:10.082"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:10.317" status="PASS" starttime="20190121 15:30:10.311"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:10.326" status="PASS" starttime="20190121 15:30:10.320"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:10.334" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '46', '3C', 'F4']</msg>
<status endtime="20190121 15:30:10.334" status="PASS" starttime="20190121 15:30:10.329"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:10.343" level="INFO">${gpio_id} = 06</msg>
<status endtime="20190121 15:30:10.344" status="PASS" starttime="20190121 15:30:10.337"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:10.365" status="PASS" starttime="20190121 15:30:10.347"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:10.382" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:10.383" status="PASS" starttime="20190121 15:30:10.368"></status>
</kw>
<msg timestamp="20190121 15:30:10.397" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:10.402" status="PASS" starttime="20190121 15:30:10.051"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:10.411" status="PASS" starttime="20190121 15:30:10.405"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 101 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:10.441" status="PASS" starttime="20190121 15:30:10.414"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${FIRST_NOT_SUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:10.480" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0020 65</msg>
<status endtime="20190121 15:30:10.481" status="PASS" starttime="20190121 15:30:10.461"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:10.493" status="PASS" starttime="20190121 15:30:10.484"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:10.758" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 47 3C F5</msg>
<status endtime="20190121 15:30:10.759" status="PASS" starttime="20190121 15:30:10.496"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:10.768" status="PASS" starttime="20190121 15:30:10.762"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:10.777" status="PASS" starttime="20190121 15:30:10.771"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:10.785" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '47', '3C', 'F5']</msg>
<status endtime="20190121 15:30:10.787" status="PASS" starttime="20190121 15:30:10.780"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:10.795" level="INFO">${gpio_id} = 06</msg>
<status endtime="20190121 15:30:10.796" status="PASS" starttime="20190121 15:30:10.790"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:10.805" status="PASS" starttime="20190121 15:30:10.799"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:10.814" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:10.814" status="PASS" starttime="20190121 15:30:10.808"></status>
</kw>
<msg timestamp="20190121 15:30:10.818" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:10.819" status="PASS" starttime="20190121 15:30:10.443"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:10.827" status="PASS" starttime="20190121 15:30:10.822"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 101 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:10.835" status="PASS" starttime="20190121 15:30:10.830"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${FIRST_NOT_SUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:10.868" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0065 20</msg>
<status endtime="20190121 15:30:10.873" status="PASS" starttime="20190121 15:30:10.848"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:10.889" status="PASS" starttime="20190121 15:30:10.876"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:11.098" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 40 3C F2</msg>
<status endtime="20190121 15:30:11.099" status="PASS" starttime="20190121 15:30:10.896"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:11.108" status="PASS" starttime="20190121 15:30:11.102"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:11.117" status="PASS" starttime="20190121 15:30:11.111"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:11.125" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '40', '3C', 'F2']</msg>
<status endtime="20190121 15:30:11.126" status="PASS" starttime="20190121 15:30:11.120"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:11.134" level="INFO">${gpio_id} = 06</msg>
<status endtime="20190121 15:30:11.135" status="PASS" starttime="20190121 15:30:11.129"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:11.143" status="PASS" starttime="20190121 15:30:11.138"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:11.152" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:11.153" status="PASS" starttime="20190121 15:30:11.146"></status>
</kw>
<msg timestamp="20190121 15:30:11.156" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:11.157" status="PASS" starttime="20190121 15:30:10.837"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:11.166" status="PASS" starttime="20190121 15:30:11.160"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 32 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:11.173" status="PASS" starttime="20190121 15:30:11.169"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${DEF_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:11.193" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0020 00</msg>
<status endtime="20190121 15:30:11.194" status="PASS" starttime="20190121 15:30:11.186"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:11.202" status="PASS" starttime="20190121 15:30:11.197"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:11.435" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 41 3C F3</msg>
<status endtime="20190121 15:30:11.436" status="PASS" starttime="20190121 15:30:11.205"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:11.445" status="PASS" starttime="20190121 15:30:11.439"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:11.458" status="PASS" starttime="20190121 15:30:11.448"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:11.466" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '41', '3C', 'F3']</msg>
<status endtime="20190121 15:30:11.467" status="PASS" starttime="20190121 15:30:11.461"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:11.478" level="INFO">${gpio_id} = 06</msg>
<status endtime="20190121 15:30:11.479" status="PASS" starttime="20190121 15:30:11.470"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:11.487" status="PASS" starttime="20190121 15:30:11.481"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:11.496" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:11.497" status="PASS" starttime="20190121 15:30:11.490"></status>
</kw>
<msg timestamp="20190121 15:30:11.500" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:11.501" status="PASS" starttime="20190121 15:30:11.175"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:11.510" status="PASS" starttime="20190121 15:30:11.504"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 32 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:11.518" status="PASS" starttime="20190121 15:30:11.513"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${DEF_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:11.538" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0000 20</msg>
<status endtime="20190121 15:30:11.539" status="PASS" starttime="20190121 15:30:11.531"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:11.547" status="PASS" starttime="20190121 15:30:11.542"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:11.777" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 42 3C F0</msg>
<status endtime="20190121 15:30:11.778" status="PASS" starttime="20190121 15:30:11.550"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:11.787" status="PASS" starttime="20190121 15:30:11.781"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:11.796" status="PASS" starttime="20190121 15:30:11.790"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:11.804" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '42', '3C', 'F0']</msg>
<status endtime="20190121 15:30:11.805" status="PASS" starttime="20190121 15:30:11.799"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:11.813" level="INFO">${gpio_id} = 06</msg>
<status endtime="20190121 15:30:11.814" status="PASS" starttime="20190121 15:30:11.807"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:11.823" status="PASS" starttime="20190121 15:30:11.817"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:11.831" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:11.832" status="PASS" starttime="20190121 15:30:11.826"></status>
</kw>
<msg timestamp="20190121 15:30:11.836" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:11.836" status="PASS" starttime="20190121 15:30:11.520"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:11.845" status="PASS" starttime="20190121 15:30:11.839"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>set pwm with frequency 0 HZ and duty cycle 0 expected Error</arg>
</arguments>
<status endtime="20190121 15:30:11.865" status="PASS" starttime="20190121 15:30:11.848"></status>
</kw>
<kw name="SCA_DIGITAL_IO_PWM_REQ">
<doc>Request message to set PWM for given digital IO</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${SCA_ENABLED}</arg>
<arg>${SMALL_NOTSUPPORTED_FREQUENCY}</arg>
<arg>${SMALL_NOTSUPPORTED_DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${DIGITAL_IO_PWM_REQ} ${DIG_IO} ${STATE} ${FREQ} ${DUTY_CYCLE}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:11.902" level="INFO">${ISI_MSG} = 1E 54 14 8E 00 09 00 01 77 2A 06 01 0000 00</msg>
<status endtime="20190121 15:30:11.903" status="PASS" starttime="20190121 15:30:11.893"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:11.911" status="PASS" starttime="20190121 15:30:11.906"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:12.115" level="INFO">${resp} = 1E 14 54 8E 00 08 01 0D 77 2B 01 06 01 43 3C F1</msg>
<status endtime="20190121 15:30:12.117" status="PASS" starttime="20190121 15:30:11.914"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:12.126" status="PASS" starttime="20190121 15:30:12.120"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${DIGITAL_IO_PWM_RESP}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:12.134" status="PASS" starttime="20190121 15:30:12.129"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:12.142" level="INFO">${list} = ['1E', '14', '54', '8E', '00', '08', '01', '0D', '77', '2B', '01', '06', '01', '43', '3C', 'F1']</msg>
<status endtime="20190121 15:30:12.143" status="PASS" starttime="20190121 15:30:12.137"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${11}</arg>
</arguments>
<assign>
<var>${gpio_id}</var>
</assign>
<msg timestamp="20190121 15:30:12.151" level="INFO">${gpio_id} = 06</msg>
<status endtime="20190121 15:30:12.152" status="PASS" starttime="20190121 15:30:12.146"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${DIG_IO}</arg>
<arg>${gpio_id}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:12.161" status="PASS" starttime="20190121 15:30:12.155"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${list}</arg>
<arg>${10}</arg>
</arguments>
<assign>
<var>${ret_val}</var>
</assign>
<msg timestamp="20190121 15:30:12.169" level="INFO">${ret_val} = 01</msg>
<status endtime="20190121 15:30:12.170" status="PASS" starttime="20190121 15:30:12.164"></status>
</kw>
<msg timestamp="20190121 15:30:12.174" level="INFO">${resp} = 01</msg>
<status endtime="20190121 15:30:12.175" status="PASS" starttime="20190121 15:30:11.868"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:12.191" status="PASS" starttime="20190121 15:30:12.177"></status>
</kw>
<status endtime="20190121 15:30:12.193" status="PASS" starttime="20190121 15:30:08.984"></status>
</kw>
<status endtime="20190121 15:30:12.196" status="PASS" starttime="20190121 15:30:08.966"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:12.276" status="PASS" starttime="20190121 15:30:12.206"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:12.333" status="PASS" starttime="20190121 15:30:12.283"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:12.382" status="PASS" starttime="20190121 15:30:12.336"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:30:12.430" status="PASS" starttime="20190121 15:30:12.386"></status>
</kw>
<status endtime="20190121 15:30:12.434" status="PASS" starttime="20190121 15:30:12.199"></status>
</kw>
<doc>Implements Test Task SKTB-49357 set pwm on Digital Outputs</doc>
<tags>
<tag>GPIO Test</tag>
</tags>
<status critical="yes" endtime="20190121 15:30:12.436" status="PASS" starttime="20190121 15:29:45.997"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:30:13.952" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:30:13.991" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:30:13.993" status="PASS" starttime="20190121 15:30:12.488"></status>
</kw>
<status endtime="20190121 15:30:13.994" status="PASS" starttime="20190121 15:30:12.452"></status>
</kw>
<status endtime="20190121 15:30:13.996" status="PASS" starttime="20190121 15:30:12.446"></status>
</kw>
<doc>Chorus GPIO outputs set pwm</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:30:13.997" status="PASS" starttime="20190121 15:29:43.168"></status>
</suite>
<suite id="s1-s13" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-41553.robot" name="SKTB-41553">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:30:14.779" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:30:14.790" status="PASS" starttime="20190121 15:30:14.774"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:30:14.807" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:30:14.809" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:30:17.253" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:30:17.254" status="PASS" starttime="20190121 15:30:14.793"></status>
</kw>
<status endtime="20190121 15:30:17.257" status="PASS" starttime="20190121 15:30:14.761"></status>
</kw>
<test id="s1-s13-t1" name="SKTB-41553">
<kw name="Test_precondition" type="setup">
<doc>Precondition, Switch power on and set Serial configuration</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Precondition, Switch power on and set Serial configuration</arg>
</arguments>
<status endtime="20190121 15:30:17.346" status="PASS" starttime="20190121 15:30:17.328"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:17.429" status="PASS" starttime="20190121 15:30:17.349"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:17.552" status="PASS" starttime="20190121 15:30:17.447"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:30:17.696" status="PASS" starttime="20190121 15:30:17.575"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${912600}</arg>
</arguments>
<status endtime="20190121 15:30:17.772" status="PASS" starttime="20190121 15:30:17.699"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:30:17.912" status="PASS" starttime="20190121 15:30:17.775"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:30:18.028" status="PASS" starttime="20190121 15:30:17.943"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:30:20.054" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:30:20.056" status="PASS" starttime="20190121 15:30:18.031"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:20.106" status="PASS" starttime="20190121 15:30:20.058"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:20.158" status="PASS" starttime="20190121 15:30:20.109"></status>
</kw>
<status endtime="20190121 15:30:20.161" status="PASS" starttime="20190121 15:30:17.304"></status>
</kw>
<kw name="TEST_OTP_CARIF_PSN">
<doc>Test PSN value, write default value and read it, then write new value and read it</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test PSN value, write and read default value</arg>
</arguments>
<status endtime="20190121 15:30:20.176" status="PASS" starttime="20190121 15:30:20.171"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Read default otp value</arg>
</arguments>
<status endtime="20190121 15:30:20.183" status="PASS" starttime="20190121 15:30:20.179"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${OTP_CARIF_PSN}</arg>
<arg>${PSN_LEN}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:20.202" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FE 00 10</msg>
<status endtime="20190121 15:30:20.203" status="PASS" starttime="20190121 15:30:20.195"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:20.211" status="PASS" starttime="20190121 15:30:20.206"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:20.429" level="INFO">${resp} = 1E 10 54 94 00 1B 00 0B EE 04 FF FE 00 10 00 4C 61 69 72 64 20 50 53 4E 20 78 78 78 78 78 78 01 45 00 26 58</msg>
<status endtime="20190121 15:30:20.430" status="PASS" starttime="20190121 15:30:20.214"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:20.439" status="PASS" starttime="20190121 15:30:20.433"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:20.458" level="INFO">${temp1} = 1E105494001B000BEE04FFFE0010004C616972642050534E207878787878780145002658</msg>
<status endtime="20190121 15:30:20.458" status="PASS" starttime="20190121 15:30:20.452"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:20.470" level="INFO">${temp2} = EE04FFFE001000</msg>
<status endtime="20190121 15:30:20.471" status="PASS" starttime="20190121 15:30:20.461"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:20.479" status="PASS" starttime="20190121 15:30:20.474"></status>
</kw>
<status endtime="20190121 15:30:20.482" status="PASS" starttime="20190121 15:30:20.441"></status>
</kw>
<msg timestamp="20190121 15:30:20.485" level="INFO">${res} = 1E 10 54 94 00 1B 00 0B EE 04 FF FE 00 10 00 4C 61 69 72 64 20 50 53 4E 20 78 78 78 78 78 78 01 45 00 26 58</msg>
<status endtime="20190121 15:30:20.486" status="PASS" starttime="20190121 15:30:20.185"></status>
</kw>
<status endtime="20190121 15:30:20.488" status="PASS" starttime="20190121 15:30:20.165"></status>
</kw>
<kw name="TEST_OTP_CARIF_HW_PART_NO">
<doc>READ_OTP_CARIF_HW_PART_NO</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Read otp_carif_hw_part_no</arg>
</arguments>
<status endtime="20190121 15:30:20.529" status="PASS" starttime="20190121 15:30:20.497"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${OTP_CARIF_HW_PART_NO}</arg>
<arg>${HW_PART_NO_LEN}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:20.609" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FD 00 0A</msg>
<status endtime="20190121 15:30:20.610" status="PASS" starttime="20190121 15:30:20.571"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:20.641" status="PASS" starttime="20190121 15:30:20.613"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:20.980" level="INFO">${resp} = 1E 10 54 94 00 15 00 0B EE 04 FF FD 00 0A 00 4C 61 69 72 64 20 30 31 32 33 01 44 00 2E 2B</msg>
<status endtime="20190121 15:30:20.982" status="PASS" starttime="20190121 15:30:20.648"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:21.003" status="PASS" starttime="20190121 15:30:20.985"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:21.048" level="INFO">${temp1} = 1E1054940015000BEE04FFFD000A004C6169726420303132330144002E2B</msg>
<status endtime="20190121 15:30:21.049" status="PASS" starttime="20190121 15:30:21.032"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:21.070" level="INFO">${temp2} = EE04FFFD000A00</msg>
<status endtime="20190121 15:30:21.071" status="PASS" starttime="20190121 15:30:21.052"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:21.091" status="PASS" starttime="20190121 15:30:21.085"></status>
</kw>
<status endtime="20190121 15:30:21.102" status="PASS" starttime="20190121 15:30:21.005"></status>
</kw>
<status endtime="20190121 15:30:21.106" status="PASS" starttime="20190121 15:30:20.531"></status>
</kw>
<status endtime="20190121 15:30:21.108" status="PASS" starttime="20190121 15:30:20.490"></status>
</kw>
<kw name="TEST_OTP_CARIF_HW_VERSION_INFO">
<doc>READ_OTP_CARIF_HW_VERSION_INFO</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>READ_OTP_CARIF_HW_VERSION_INFO</arg>
</arguments>
<status endtime="20190121 15:30:21.143" status="PASS" starttime="20190121 15:30:21.129"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${OTP_CARIF_HW_VERSION_INFO}</arg>
<arg>${HW_VERSION_INFO_LEN}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:21.210" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FC 00 04</msg>
<status endtime="20190121 15:30:21.211" status="PASS" starttime="20190121 15:30:21.176"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:21.271" status="PASS" starttime="20190121 15:30:21.220"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:21.518" level="INFO">${resp} = 1E 10 54 94 00 0F 00 0B EE 04 FF FC 00 04 00 03 01 06 55 01 45 00 4A 78</msg>
<status endtime="20190121 15:30:21.519" status="PASS" starttime="20190121 15:30:21.274"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:21.527" status="PASS" starttime="20190121 15:30:21.522"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:21.547" level="INFO">${temp1} = 1E105494000F000BEE04FFFC000400030106550145004A78</msg>
<status endtime="20190121 15:30:21.548" status="PASS" starttime="20190121 15:30:21.541"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:21.556" level="INFO">${temp2} = EE04FFFC000400</msg>
<status endtime="20190121 15:30:21.557" status="PASS" starttime="20190121 15:30:21.551"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:21.565" status="PASS" starttime="20190121 15:30:21.560"></status>
</kw>
<status endtime="20190121 15:30:21.568" status="PASS" starttime="20190121 15:30:21.529"></status>
</kw>
<status endtime="20190121 15:30:21.571" status="PASS" starttime="20190121 15:30:21.145"></status>
</kw>
<status endtime="20190121 15:30:21.573" status="PASS" starttime="20190121 15:30:21.122"></status>
</kw>
<kw name="TEST_OTP_CARIF_HW_SUPPLIER_INFO">
<doc>READ_OTP_CARIF_HW_SUPPLIER_INFO</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>READ_OTP_CARIF_HW_SUPPLIER_INFO</arg>
</arguments>
<status endtime="20190121 15:30:21.587" status="PASS" starttime="20190121 15:30:21.582"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${OTP_CARIF_HW_SUPPLIER_INFO}</arg>
<arg>${HW_SUPPLIER_INFO_LEN}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:21.626" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FB 00 02</msg>
<status endtime="20190121 15:30:21.627" status="PASS" starttime="20190121 15:30:21.599"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:21.646" status="PASS" starttime="20190121 15:30:21.634"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:21.853" level="INFO">${resp} = 1E 10 54 94 00 0D 00 0B EE 04 FF FB 00 02 00 30 31 01 46 00 2C 4E</msg>
<status endtime="20190121 15:30:21.854" status="PASS" starttime="20190121 15:30:21.650"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:21.863" status="PASS" starttime="20190121 15:30:21.858"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:21.884" level="INFO">${temp1} = 1E105494000D000BEE04FFFB00020030310146002C4E</msg>
<status endtime="20190121 15:30:21.885" status="PASS" starttime="20190121 15:30:21.878"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:21.894" level="INFO">${temp2} = EE04FFFB000200</msg>
<status endtime="20190121 15:30:21.895" status="PASS" starttime="20190121 15:30:21.888"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:21.903" status="PASS" starttime="20190121 15:30:21.898"></status>
</kw>
<status endtime="20190121 15:30:21.905" status="PASS" starttime="20190121 15:30:21.866"></status>
</kw>
<status endtime="20190121 15:30:21.909" status="PASS" starttime="20190121 15:30:21.590"></status>
</kw>
<status endtime="20190121 15:30:21.911" status="PASS" starttime="20190121 15:30:21.575"></status>
</kw>
<kw name="TEST_EEPROM_SW_SPARE_PART_NUMBER">
<doc>Write and read the EEPROM_SW_SPARE_PART_NUMBER</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_SW_SPARE_PART_NUMBER</arg>
</arguments>
<status endtime="20190121 15:30:21.925" status="PASS" starttime="20190121 15:30:21.919"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write eeprom sw spare part number with default value</arg>
</arguments>
<status endtime="20190121 15:30:21.932" status="PASS" starttime="20190121 15:30:21.928"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_SW_SPARE_PART_NUMBER}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_LEN}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:21.952" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF FA 00 0C 53 70 61 72 65 20 50 61 72 74 20 4e</msg>
<status endtime="20190121 15:30:21.953" status="PASS" starttime="20190121 15:30:21.945"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:21.968" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'FA', '00', '0C', '53', '70', '61', '72', '65', '20', '50', '61', '72', '74', '20', '4e']</msg>
<status endtime="20190121 15:30:21.968" status="PASS" starttime="20190121 15:30:21.962"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:21.975" level="INFO">Length is 26</msg>
<msg timestamp="20190121 15:30:21.977" level="INFO">${length} = 26</msg>
<status endtime="20190121 15:30:21.978" status="PASS" starttime="20190121 15:30:21.971"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:21.986" status="PASS" starttime="20190121 15:30:21.981"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:21.995" level="INFO">${value} = 20</msg>
<status endtime="20190121 15:30:21.996" status="PASS" starttime="20190121 15:30:21.989"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:22.005" level="INFO">${res} = 14</msg>
<status endtime="20190121 15:30:22.006" status="PASS" starttime="20190121 15:30:21.999"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:22.017" status="PASS" starttime="20190121 15:30:22.009"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:22.026" level="INFO">${res} = 1E54109400140000EE05FFFA000C53706172652050617274204e</msg>
<status endtime="20190121 15:30:22.027" status="PASS" starttime="20190121 15:30:22.020"></status>
</kw>
<msg timestamp="20190121 15:30:22.033" level="INFO">${ISI_MSG_NORM} = 1E54109400140000EE05FFFA000C53706172652050617274204e</msg>
<status endtime="20190121 15:30:22.034" status="PASS" starttime="20190121 15:30:21.955"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:22.042" status="PASS" starttime="20190121 15:30:22.037"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:22.548" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF FA 00 00 01 47 5A 3E</msg>
<status endtime="20190121 15:30:22.549" status="PASS" starttime="20190121 15:30:22.046"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:22.636" status="PASS" starttime="20190121 15:30:22.586"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:22.713" level="INFO">${temp1} = 1E105494000A000BEE06FFFA000001475A3E</msg>
<status endtime="20190121 15:30:22.714" status="PASS" starttime="20190121 15:30:22.682"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:22.763" level="INFO">${temp2} = EE06FFFA00</msg>
<status endtime="20190121 15:30:22.764" status="PASS" starttime="20190121 15:30:22.753"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:22.826" status="PASS" starttime="20190121 15:30:22.795"></status>
</kw>
<status endtime="20190121 15:30:22.832" status="PASS" starttime="20190121 15:30:22.638"></status>
</kw>
<status endtime="20190121 15:30:22.854" status="PASS" starttime="20190121 15:30:21.934"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>write eeprom sw spare part number with Different value</arg>
</arguments>
<status endtime="20190121 15:30:22.883" status="PASS" starttime="20190121 15:30:22.861"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_SW_SPARE_PART_NUMBER}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_LEN}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:22.944" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF FA 00 0C 53 70 61 72 65 20 50 61 72 74 20 AA</msg>
<status endtime="20190121 15:30:22.945" status="PASS" starttime="20190121 15:30:22.925"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:22.974" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'FA', '00', '0C', '53', '70', '61', '72', '65', '20', '50', '61', '72', '74', '20', 'AA']</msg>
<status endtime="20190121 15:30:22.975" status="PASS" starttime="20190121 15:30:22.959"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:23.000" level="INFO">Length is 26</msg>
<msg timestamp="20190121 15:30:23.003" level="INFO">${length} = 26</msg>
<status endtime="20190121 15:30:23.004" status="PASS" starttime="20190121 15:30:22.978"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:23.018" status="PASS" starttime="20190121 15:30:23.013"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:23.049" level="INFO">${value} = 20</msg>
<status endtime="20190121 15:30:23.051" status="PASS" starttime="20190121 15:30:23.031"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:23.061" level="INFO">${res} = 14</msg>
<status endtime="20190121 15:30:23.067" status="PASS" starttime="20190121 15:30:23.054"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:23.076" status="PASS" starttime="20190121 15:30:23.070"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:23.110" level="INFO">${res} = 1E54109400140000EE05FFFA000C5370617265205061727420AA</msg>
<status endtime="20190121 15:30:23.111" status="PASS" starttime="20190121 15:30:23.091"></status>
</kw>
<msg timestamp="20190121 15:30:23.115" level="INFO">${ISI_MSG_NORM} = 1E54109400140000EE05FFFA000C5370617265205061727420AA</msg>
<status endtime="20190121 15:30:23.116" status="PASS" starttime="20190121 15:30:22.947"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:23.150" status="PASS" starttime="20190121 15:30:23.119"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:23.535" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF FA 00 00 01 42 5A 3B</msg>
<status endtime="20190121 15:30:23.537" status="PASS" starttime="20190121 15:30:23.153"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:23.545" status="PASS" starttime="20190121 15:30:23.540"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:23.564" level="INFO">${temp1} = 1E105494000A000BEE06FFFA000001425A3B</msg>
<status endtime="20190121 15:30:23.565" status="PASS" starttime="20190121 15:30:23.558"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:23.598" level="INFO">${temp2} = EE06FFFA00</msg>
<status endtime="20190121 15:30:23.598" status="PASS" starttime="20190121 15:30:23.574"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:23.620" status="PASS" starttime="20190121 15:30:23.603"></status>
</kw>
<status endtime="20190121 15:30:23.622" status="PASS" starttime="20190121 15:30:23.548"></status>
</kw>
<status endtime="20190121 15:30:23.625" status="PASS" starttime="20190121 15:30:22.886"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:23.692" status="PASS" starttime="20190121 15:30:23.644"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:23.761" status="PASS" starttime="20190121 15:30:23.695"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:30:25.775" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:30:25.777" status="PASS" starttime="20190121 15:30:23.764"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:25.825" status="PASS" starttime="20190121 15:30:25.780"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:25.876" status="PASS" starttime="20190121 15:30:25.829"></status>
</kw>
<status endtime="20190121 15:30:25.879" status="PASS" starttime="20190121 15:30:23.638"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_SW_SPARE_PART_NUMBER}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:25.896" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF FA 00 0C</msg>
<status endtime="20190121 15:30:25.897" status="PASS" starttime="20190121 15:30:25.890"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:25.905" status="PASS" starttime="20190121 15:30:25.900"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:26.348" level="INFO">${resp} = 1E 10 54 94 00 17 00 0B EE 04 FF FA 00 0C 00 53 70 61 72 65 20 50 61 72 74 20 AA 01 43 00 85 3E</msg>
<status endtime="20190121 15:30:26.349" status="PASS" starttime="20190121 15:30:25.908"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:26.358" status="PASS" starttime="20190121 15:30:26.352"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:26.382" level="INFO">${temp1} = 1E1054940017000BEE04FFFA000C005370617265205061727420AA014300853E</msg>
<status endtime="20190121 15:30:26.383" status="PASS" starttime="20190121 15:30:26.376"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:26.392" level="INFO">${temp2} = EE04FFFA000C00</msg>
<status endtime="20190121 15:30:26.393" status="PASS" starttime="20190121 15:30:26.386"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:26.401" status="PASS" starttime="20190121 15:30:26.396"></status>
</kw>
<status endtime="20190121 15:30:26.403" status="PASS" starttime="20190121 15:30:26.361"></status>
</kw>
<msg timestamp="20190121 15:30:26.407" level="INFO">${RESP} = 1E 10 54 94 00 17 00 0B EE 04 FF FA 00 0C 00 53 70 61 72 65 20 50 61 72 74 20 AA 01 43 00 85 3E</msg>
<status endtime="20190121 15:30:26.408" status="PASS" starttime="20190121 15:30:25.881"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_SW_SPARE_PART_NUMBER_LEN} ${EEPROM_APP_OK} ${EEPROM_SW_SPARE_PART_NUMBER_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:26.426" level="INFO">${temp1} = 1E1054940017000BEE04FFFA000C005370617265205061727420AA014300853E</msg>
<status endtime="20190121 15:30:26.427" status="PASS" starttime="20190121 15:30:26.420"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:26.435" level="INFO">${temp2} = 000C005370617265205061727420AA</msg>
<status endtime="20190121 15:30:26.436" status="PASS" starttime="20190121 15:30:26.430"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:26.445" status="PASS" starttime="20190121 15:30:26.439"></status>
</kw>
<status endtime="20190121 15:30:26.447" status="PASS" starttime="20190121 15:30:26.410"></status>
</kw>
<status endtime="20190121 15:30:26.449" status="PASS" starttime="20190121 15:30:21.913"></status>
</kw>
<kw name="TEST_PRODUCT_NAME">
<doc>Write and read the EEPROM_PRODUCT_NAME</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_PRODUCT_NAME</arg>
</arguments>
<status endtime="20190121 15:30:26.462" status="PASS" starttime="20190121 15:30:26.458"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>write default value</arg>
</arguments>
<status endtime="20190121 15:30:26.470" status="PASS" starttime="20190121 15:30:26.465"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_PRODUCT_NAME}</arg>
<arg>${EEPROM_PRODUCT_NAME_LEN}</arg>
<arg>${EEPROM_PRODUCT_NAME_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:26.489" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F9 00 0C 4f 4c 55 20 43 6f 6e 6e 65 63 74 69</msg>
<status endtime="20190121 15:30:26.490" status="PASS" starttime="20190121 15:30:26.482"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:26.505" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F9', '00', '0C', '4f', '4c', '55', '20', '43', '6f', '6e', '6e', '65', '63', '74', '69']</msg>
<status endtime="20190121 15:30:26.506" status="PASS" starttime="20190121 15:30:26.500"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:26.513" level="INFO">Length is 26</msg>
<msg timestamp="20190121 15:30:26.515" level="INFO">${length} = 26</msg>
<status endtime="20190121 15:30:26.516" status="PASS" starttime="20190121 15:30:26.509"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:26.524" status="PASS" starttime="20190121 15:30:26.519"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:26.532" level="INFO">${value} = 20</msg>
<status endtime="20190121 15:30:26.533" status="PASS" starttime="20190121 15:30:26.527"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:26.542" level="INFO">${res} = 14</msg>
<status endtime="20190121 15:30:26.543" status="PASS" starttime="20190121 15:30:26.536"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:26.551" status="PASS" starttime="20190121 15:30:26.546"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:26.560" level="INFO">${res} = 1E54109400140000EE05FFF9000C4f4c5520436f6e6e65637469</msg>
<status endtime="20190121 15:30:26.561" status="PASS" starttime="20190121 15:30:26.554"></status>
</kw>
<msg timestamp="20190121 15:30:26.565" level="INFO">${ISI_MSG_NORM} = 1E54109400140000EE05FFF9000C4f4c5520436f6e6e65637469</msg>
<status endtime="20190121 15:30:26.566" status="PASS" starttime="20190121 15:30:26.492"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:26.574" status="PASS" starttime="20190121 15:30:26.568"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:28.158" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F9 00 00 01 44 5A 3E</msg>
<status endtime="20190121 15:30:28.159" status="PASS" starttime="20190121 15:30:26.578"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:28.168" status="PASS" starttime="20190121 15:30:28.163"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:28.186" level="INFO">${temp1} = 1E105494000A000BEE06FFF9000001445A3E</msg>
<status endtime="20190121 15:30:28.187" status="PASS" starttime="20190121 15:30:28.181"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:28.196" level="INFO">${temp2} = EE06FFF900</msg>
<status endtime="20190121 15:30:28.197" status="PASS" starttime="20190121 15:30:28.190"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:28.205" status="PASS" starttime="20190121 15:30:28.200"></status>
</kw>
<status endtime="20190121 15:30:28.207" status="PASS" starttime="20190121 15:30:28.170"></status>
</kw>
<status endtime="20190121 15:30:28.209" status="PASS" starttime="20190121 15:30:26.473"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_PRODUCT_NAME}</arg>
<arg>${EEPROM_PRODUCT_NAME_LEN}</arg>
<arg>${EEPROM_PRODUCT_NAME_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:28.229" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F9 00 0C 4f 4c 55 20 43 6f 6e 6e 65 63 74 BB</msg>
<status endtime="20190121 15:30:28.230" status="PASS" starttime="20190121 15:30:28.221"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:28.250" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F9', '00', '0C', '4f', '4c', '55', '20', '43', '6f', '6e', '6e', '65', '63', '74', 'BB']</msg>
<status endtime="20190121 15:30:28.251" status="PASS" starttime="20190121 15:30:28.245"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:28.258" level="INFO">Length is 26</msg>
<msg timestamp="20190121 15:30:28.260" level="INFO">${length} = 26</msg>
<status endtime="20190121 15:30:28.261" status="PASS" starttime="20190121 15:30:28.254"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:28.269" status="PASS" starttime="20190121 15:30:28.264"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:28.278" level="INFO">${value} = 20</msg>
<status endtime="20190121 15:30:28.279" status="PASS" starttime="20190121 15:30:28.272"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:28.287" level="INFO">${res} = 14</msg>
<status endtime="20190121 15:30:28.288" status="PASS" starttime="20190121 15:30:28.282"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:28.296" status="PASS" starttime="20190121 15:30:28.291"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:28.306" level="INFO">${res} = 1E54109400140000EE05FFF9000C4f4c5520436f6e6e656374BB</msg>
<status endtime="20190121 15:30:28.306" status="PASS" starttime="20190121 15:30:28.299"></status>
</kw>
<msg timestamp="20190121 15:30:28.310" level="INFO">${ISI_MSG_NORM} = 1E54109400140000EE05FFF9000C4f4c5520436f6e6e656374BB</msg>
<status endtime="20190121 15:30:28.311" status="PASS" starttime="20190121 15:30:28.232"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:28.319" status="PASS" starttime="20190121 15:30:28.314"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:28.663" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F9 00 00 01 45 5A 3F</msg>
<status endtime="20190121 15:30:28.664" status="PASS" starttime="20190121 15:30:28.322"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:28.674" status="PASS" starttime="20190121 15:30:28.668"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:28.695" level="INFO">${temp1} = 1E105494000A000BEE06FFF9000001455A3F</msg>
<status endtime="20190121 15:30:28.696" status="PASS" starttime="20190121 15:30:28.690"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:28.705" level="INFO">${temp2} = EE06FFF900</msg>
<status endtime="20190121 15:30:28.706" status="PASS" starttime="20190121 15:30:28.699"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:28.715" status="PASS" starttime="20190121 15:30:28.709"></status>
</kw>
<status endtime="20190121 15:30:28.717" status="PASS" starttime="20190121 15:30:28.679"></status>
</kw>
<status endtime="20190121 15:30:28.719" status="PASS" starttime="20190121 15:30:28.211"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:28.775" status="PASS" starttime="20190121 15:30:28.728"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:28.825" status="PASS" starttime="20190121 15:30:28.778"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:30:30.833" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:30:30.835" status="PASS" starttime="20190121 15:30:28.828"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:30.873" status="PASS" starttime="20190121 15:30:30.838"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:30.903" status="PASS" starttime="20190121 15:30:30.876"></status>
</kw>
<status endtime="20190121 15:30:30.906" status="PASS" starttime="20190121 15:30:28.721"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_PRODUCT_NAME}</arg>
<arg>${EEPROM_PRODUCT_NAME_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:30.924" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F9 00 0C</msg>
<status endtime="20190121 15:30:30.924" status="PASS" starttime="20190121 15:30:30.917"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:30.933" status="PASS" starttime="20190121 15:30:30.927"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:31.322" level="INFO">${resp} = 1E 10 54 94 00 17 00 0B EE 04 FF F9 00 0C 00 4F 4C 55 20 43 6F 6E 6E 65 63 74 BB 01 43 00 AD 4E</msg>
<status endtime="20190121 15:30:31.323" status="PASS" starttime="20190121 15:30:30.936"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:31.332" status="PASS" starttime="20190121 15:30:31.326"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:31.350" level="INFO">${temp1} = 1E1054940017000BEE04FFF9000C004F4C5520436F6E6E656374BB014300AD4E</msg>
<status endtime="20190121 15:30:31.351" status="PASS" starttime="20190121 15:30:31.345"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:31.364" level="INFO">${temp2} = EE04FFF9000C00</msg>
<status endtime="20190121 15:30:31.365" status="PASS" starttime="20190121 15:30:31.354"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:31.374" status="PASS" starttime="20190121 15:30:31.368"></status>
</kw>
<status endtime="20190121 15:30:31.376" status="PASS" starttime="20190121 15:30:31.334"></status>
</kw>
<msg timestamp="20190121 15:30:31.380" level="INFO">${RESP} = 1E 10 54 94 00 17 00 0B EE 04 FF F9 00 0C 00 4F 4C 55 20 43 6F 6E 6E 65 63 74 BB 01 43 00 AD 4E</msg>
<status endtime="20190121 15:30:31.380" status="PASS" starttime="20190121 15:30:30.909"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_PRODUCT_NAME_LEN} ${EEPROM_APP_OK} ${EEPROM_PRODUCT_NAME_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:31.398" level="INFO">${temp1} = 1E1054940017000BEE04FFF9000C004F4C5520436F6E6E656374BB014300AD4E</msg>
<status endtime="20190121 15:30:31.399" status="PASS" starttime="20190121 15:30:31.392"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:31.408" level="INFO">${temp2} = 000C004f4c5520436f6e6e656374BB</msg>
<status endtime="20190121 15:30:31.409" status="PASS" starttime="20190121 15:30:31.402"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:31.417" status="PASS" starttime="20190121 15:30:31.411"></status>
</kw>
<status endtime="20190121 15:30:31.419" status="PASS" starttime="20190121 15:30:31.382"></status>
</kw>
<status endtime="20190121 15:30:31.421" status="PASS" starttime="20190121 15:30:26.451"></status>
</kw>
<kw name="TEST_LAST_POWER_STATE">
<doc>Write and read the EEPROM_LAST_POWER_STATE</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_LAST_POWER_STATE</arg>
</arguments>
<status endtime="20190121 15:30:31.434" status="PASS" starttime="20190121 15:30:31.430"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_LAST_POWER_STATE}</arg>
<arg>${EEPROM_LAST_POWER_STATE_LEN}</arg>
<arg>${EEPROM_LAST_POWER_STATE_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:31.453" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F8 00 01 FF</msg>
<status endtime="20190121 15:30:31.454" status="PASS" starttime="20190121 15:30:31.446"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:31.470" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F8', '00', '01', 'FF']</msg>
<status endtime="20190121 15:30:31.471" status="PASS" starttime="20190121 15:30:31.464"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:31.478" level="INFO">Length is 15</msg>
<msg timestamp="20190121 15:30:31.480" level="INFO">${length} = 15</msg>
<status endtime="20190121 15:30:31.481" status="PASS" starttime="20190121 15:30:31.474"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:31.489" status="PASS" starttime="20190121 15:30:31.483"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:31.497" level="INFO">${value} = 9</msg>
<status endtime="20190121 15:30:31.498" status="PASS" starttime="20190121 15:30:31.492"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:31.507" level="INFO">${res} = 09</msg>
<status endtime="20190121 15:30:31.507" status="PASS" starttime="20190121 15:30:31.501"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:31.515" status="PASS" starttime="20190121 15:30:31.510"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:31.524" level="INFO">${res} = 1E54109400090000EE05FFF80001FF</msg>
<status endtime="20190121 15:30:31.525" status="PASS" starttime="20190121 15:30:31.518"></status>
</kw>
<msg timestamp="20190121 15:30:31.529" level="INFO">${ISI_MSG_NORM} = 1E54109400090000EE05FFF80001FF</msg>
<status endtime="20190121 15:30:31.530" status="PASS" starttime="20190121 15:30:31.456"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:31.538" status="PASS" starttime="20190121 15:30:31.533"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:33.155" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F8 00 00 01 44 5A 3F</msg>
<status endtime="20190121 15:30:33.156" status="PASS" starttime="20190121 15:30:31.542"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:33.165" status="PASS" starttime="20190121 15:30:33.159"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:33.183" level="INFO">${temp1} = 1E105494000A000BEE06FFF8000001445A3F</msg>
<status endtime="20190121 15:30:33.184" status="PASS" starttime="20190121 15:30:33.177"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:33.192" level="INFO">${temp2} = EE06FFF800</msg>
<status endtime="20190121 15:30:33.193" status="PASS" starttime="20190121 15:30:33.187"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:33.201" status="PASS" starttime="20190121 15:30:33.196"></status>
</kw>
<status endtime="20190121 15:30:33.204" status="PASS" starttime="20190121 15:30:33.167"></status>
</kw>
<status endtime="20190121 15:30:33.206" status="PASS" starttime="20190121 15:30:31.436"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_LAST_POWER_STATE}</arg>
<arg>${EEPROM_LAST_POWER_STATE_LEN}</arg>
<arg>${EEPROM_LAST_POWER_STATE_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:33.225" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F8 00 01 AA</msg>
<status endtime="20190121 15:30:33.226" status="PASS" starttime="20190121 15:30:33.218"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:33.245" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F8', '00', '01', 'AA']</msg>
<status endtime="20190121 15:30:33.245" status="PASS" starttime="20190121 15:30:33.239"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:33.252" level="INFO">Length is 15</msg>
<msg timestamp="20190121 15:30:33.254" level="INFO">${length} = 15</msg>
<status endtime="20190121 15:30:33.255" status="PASS" starttime="20190121 15:30:33.248"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:33.264" status="PASS" starttime="20190121 15:30:33.258"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:33.273" level="INFO">${value} = 9</msg>
<status endtime="20190121 15:30:33.274" status="PASS" starttime="20190121 15:30:33.267"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:33.282" level="INFO">${res} = 09</msg>
<status endtime="20190121 15:30:33.283" status="PASS" starttime="20190121 15:30:33.277"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:33.292" status="PASS" starttime="20190121 15:30:33.286"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:33.301" level="INFO">${res} = 1E54109400090000EE05FFF80001AA</msg>
<status endtime="20190121 15:30:33.302" status="PASS" starttime="20190121 15:30:33.295"></status>
</kw>
<msg timestamp="20190121 15:30:33.306" level="INFO">${ISI_MSG_NORM} = 1E54109400090000EE05FFF80001AA</msg>
<status endtime="20190121 15:30:33.307" status="PASS" starttime="20190121 15:30:33.228"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:33.315" status="PASS" starttime="20190121 15:30:33.310"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:33.534" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F8 00 00 01 45 5A 3E</msg>
<status endtime="20190121 15:30:33.534" status="PASS" starttime="20190121 15:30:33.318"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:33.545" status="PASS" starttime="20190121 15:30:33.538"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:33.571" level="INFO">${temp1} = 1E105494000A000BEE06FFF8000001455A3E</msg>
<status endtime="20190121 15:30:33.572" status="PASS" starttime="20190121 15:30:33.562"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:33.583" level="INFO">${temp2} = EE06FFF800</msg>
<status endtime="20190121 15:30:33.585" status="PASS" starttime="20190121 15:30:33.575"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:33.594" status="PASS" starttime="20190121 15:30:33.588"></status>
</kw>
<status endtime="20190121 15:30:33.596" status="PASS" starttime="20190121 15:30:33.550"></status>
</kw>
<status endtime="20190121 15:30:33.599" status="PASS" starttime="20190121 15:30:33.208"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:33.676" status="PASS" starttime="20190121 15:30:33.607"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:33.726" status="PASS" starttime="20190121 15:30:33.679"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:30:35.735" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:30:35.737" status="PASS" starttime="20190121 15:30:33.730"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:35.786" status="PASS" starttime="20190121 15:30:35.739"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:35.835" status="PASS" starttime="20190121 15:30:35.789"></status>
</kw>
<status endtime="20190121 15:30:35.838" status="PASS" starttime="20190121 15:30:33.601"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_LAST_POWER_STATE}</arg>
<arg>${EEPROM_LAST_POWER_STATE_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:35.856" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F8 00 01</msg>
<status endtime="20190121 15:30:35.857" status="PASS" starttime="20190121 15:30:35.849"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:35.865" status="PASS" starttime="20190121 15:30:35.859"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:36.139" level="INFO">${resp} = 1E 10 54 94 00 0C 00 0B EE 04 FF F8 00 01 00 AA 01 43 5A 97</msg>
<status endtime="20190121 15:30:36.140" status="PASS" starttime="20190121 15:30:35.868"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:36.149" status="PASS" starttime="20190121 15:30:36.144"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:36.168" level="INFO">${temp1} = 1E105494000C000BEE04FFF8000100AA01435A97</msg>
<status endtime="20190121 15:30:36.169" status="PASS" starttime="20190121 15:30:36.162"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:36.207" level="INFO">${temp2} = EE04FFF8000100</msg>
<status endtime="20190121 15:30:36.208" status="PASS" starttime="20190121 15:30:36.172"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:36.232" status="PASS" starttime="20190121 15:30:36.217"></status>
</kw>
<status endtime="20190121 15:30:36.247" status="PASS" starttime="20190121 15:30:36.151"></status>
</kw>
<msg timestamp="20190121 15:30:36.260" level="INFO">${RESP} = 1E 10 54 94 00 0C 00 0B EE 04 FF F8 00 01 00 AA 01 43 5A 97</msg>
<status endtime="20190121 15:30:36.261" status="PASS" starttime="20190121 15:30:35.840"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_LAST_POWER_STATE_LEN} ${EEPROM_APP_OK} ${EEPROM_LAST_POWER_STATE_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:36.286" level="INFO">${temp1} = 1E105494000C000BEE04FFF8000100AA01435A97</msg>
<status endtime="20190121 15:30:36.287" status="PASS" starttime="20190121 15:30:36.279"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:36.296" level="INFO">${temp2} = 000100AA</msg>
<status endtime="20190121 15:30:36.297" status="PASS" starttime="20190121 15:30:36.290"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:36.305" status="PASS" starttime="20190121 15:30:36.299"></status>
</kw>
<status endtime="20190121 15:30:36.307" status="PASS" starttime="20190121 15:30:36.263"></status>
</kw>
<status endtime="20190121 15:30:36.309" status="PASS" starttime="20190121 15:30:31.423"></status>
</kw>
<kw name="TEST_WAKE_BARRIERS">
<doc>Write and read the EEPROM_WAKE_BARRIERS</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_WAKE_BARRIERS</arg>
</arguments>
<status endtime="20190121 15:30:36.322" status="PASS" starttime="20190121 15:30:36.318"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_WAKE_BARRIERS}</arg>
<arg>${EEPROM_WAKE_BARRIERS_LEN}</arg>
<arg>${EEPROM_WAKE_BARRIERS_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:36.342" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F7 00 02 FF FF</msg>
<status endtime="20190121 15:30:36.343" status="PASS" starttime="20190121 15:30:36.334"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:36.358" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F7', '00', '02', 'FF', 'FF']</msg>
<status endtime="20190121 15:30:36.359" status="PASS" starttime="20190121 15:30:36.353"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:36.366" level="INFO">Length is 16</msg>
<msg timestamp="20190121 15:30:36.368" level="INFO">${length} = 16</msg>
<status endtime="20190121 15:30:36.368" status="PASS" starttime="20190121 15:30:36.362"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:36.377" status="PASS" starttime="20190121 15:30:36.371"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:36.386" level="INFO">${value} = 10</msg>
<status endtime="20190121 15:30:36.387" status="PASS" starttime="20190121 15:30:36.380"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:36.395" level="INFO">${res} = 0A</msg>
<status endtime="20190121 15:30:36.396" status="PASS" starttime="20190121 15:30:36.389"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:36.404" status="PASS" starttime="20190121 15:30:36.399"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:36.413" level="INFO">${res} = 1E541094000A0000EE05FFF70002FFFF</msg>
<status endtime="20190121 15:30:36.414" status="PASS" starttime="20190121 15:30:36.407"></status>
</kw>
<msg timestamp="20190121 15:30:36.418" level="INFO">${ISI_MSG_NORM} = 1E541094000A0000EE05FFF70002FFFF</msg>
<status endtime="20190121 15:30:36.418" status="PASS" starttime="20190121 15:30:36.345"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:36.427" status="PASS" starttime="20190121 15:30:36.421"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:38.046" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F7 00 00 01 44 5A 30</msg>
<status endtime="20190121 15:30:38.047" status="PASS" starttime="20190121 15:30:36.430"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:38.056" status="PASS" starttime="20190121 15:30:38.050"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:38.074" level="INFO">${temp1} = 1E105494000A000BEE06FFF7000001445A30</msg>
<status endtime="20190121 15:30:38.075" status="PASS" starttime="20190121 15:30:38.068"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:38.083" level="INFO">${temp2} = EE06FFF700</msg>
<status endtime="20190121 15:30:38.084" status="PASS" starttime="20190121 15:30:38.078"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:38.093" status="PASS" starttime="20190121 15:30:38.087"></status>
</kw>
<status endtime="20190121 15:30:38.095" status="PASS" starttime="20190121 15:30:38.058"></status>
</kw>
<status endtime="20190121 15:30:38.097" status="PASS" starttime="20190121 15:30:36.325"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_WAKE_BARRIERS}</arg>
<arg>${EEPROM_WAKE_BARRIERS_LEN}</arg>
<arg>${EEPROM_WAKE_BARRIERS_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:38.117" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F7 00 02 AA BB</msg>
<status endtime="20190121 15:30:38.118" status="PASS" starttime="20190121 15:30:38.109"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:38.133" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F7', '00', '02', 'AA', 'BB']</msg>
<status endtime="20190121 15:30:38.133" status="PASS" starttime="20190121 15:30:38.127"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:38.140" level="INFO">Length is 16</msg>
<msg timestamp="20190121 15:30:38.146" level="INFO">${length} = 16</msg>
<status endtime="20190121 15:30:38.147" status="PASS" starttime="20190121 15:30:38.137"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:38.155" status="PASS" starttime="20190121 15:30:38.150"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:38.164" level="INFO">${value} = 10</msg>
<status endtime="20190121 15:30:38.165" status="PASS" starttime="20190121 15:30:38.158"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:38.173" level="INFO">${res} = 0A</msg>
<status endtime="20190121 15:30:38.174" status="PASS" starttime="20190121 15:30:38.168"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:38.182" status="PASS" starttime="20190121 15:30:38.177"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:38.191" level="INFO">${res} = 1E541094000A0000EE05FFF70002AABB</msg>
<status endtime="20190121 15:30:38.192" status="PASS" starttime="20190121 15:30:38.185"></status>
</kw>
<msg timestamp="20190121 15:30:38.196" level="INFO">${ISI_MSG_NORM} = 1E541094000A0000EE05FFF70002AABB</msg>
<status endtime="20190121 15:30:38.197" status="PASS" starttime="20190121 15:30:38.120"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:38.206" status="PASS" starttime="20190121 15:30:38.200"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:38.540" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F7 00 00 01 45 5A 31</msg>
<status endtime="20190121 15:30:38.541" status="PASS" starttime="20190121 15:30:38.209"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:38.550" status="PASS" starttime="20190121 15:30:38.545"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:38.568" level="INFO">${temp1} = 1E105494000A000BEE06FFF7000001455A31</msg>
<status endtime="20190121 15:30:38.569" status="PASS" starttime="20190121 15:30:38.562"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:38.578" level="INFO">${temp2} = EE06FFF700</msg>
<status endtime="20190121 15:30:38.579" status="PASS" starttime="20190121 15:30:38.572"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:38.587" status="PASS" starttime="20190121 15:30:38.582"></status>
</kw>
<status endtime="20190121 15:30:38.590" status="PASS" starttime="20190121 15:30:38.552"></status>
</kw>
<status endtime="20190121 15:30:38.592" status="PASS" starttime="20190121 15:30:38.099"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:38.646" status="PASS" starttime="20190121 15:30:38.600"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:38.697" status="PASS" starttime="20190121 15:30:38.650"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:30:40.705" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:30:40.707" status="PASS" starttime="20190121 15:30:38.700"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:40.757" status="PASS" starttime="20190121 15:30:40.710"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:40.807" status="PASS" starttime="20190121 15:30:40.760"></status>
</kw>
<status endtime="20190121 15:30:40.810" status="PASS" starttime="20190121 15:30:38.594"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_WAKE_BARRIERS}</arg>
<arg>${EEPROM_WAKE_BARRIERS_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:40.827" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F7 00 02</msg>
<status endtime="20190121 15:30:40.828" status="PASS" starttime="20190121 15:30:40.821"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:40.836" status="PASS" starttime="20190121 15:30:40.831"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:41.160" level="INFO">${resp} = 1E 10 54 94 00 0D 00 0B EE 04 FF F7 00 02 00 AA BB 01 43 00 A3 D8</msg>
<status endtime="20190121 15:30:41.162" status="PASS" starttime="20190121 15:30:40.840"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:41.170" status="PASS" starttime="20190121 15:30:41.164"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:41.189" level="INFO">${temp1} = 1E105494000D000BEE04FFF7000200AABB014300A3D8</msg>
<status endtime="20190121 15:30:41.190" status="PASS" starttime="20190121 15:30:41.183"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:41.198" level="INFO">${temp2} = EE04FFF7000200</msg>
<status endtime="20190121 15:30:41.199" status="PASS" starttime="20190121 15:30:41.192"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:41.207" status="PASS" starttime="20190121 15:30:41.202"></status>
</kw>
<status endtime="20190121 15:30:41.210" status="PASS" starttime="20190121 15:30:41.172"></status>
</kw>
<msg timestamp="20190121 15:30:41.213" level="INFO">${RESP} = 1E 10 54 94 00 0D 00 0B EE 04 FF F7 00 02 00 AA BB 01 43 00 A3 D8</msg>
<status endtime="20190121 15:30:41.214" status="PASS" starttime="20190121 15:30:40.812"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_WAKE_BARRIERS_LEN} ${EEPROM_APP_OK} ${EEPROM_WAKE_BARRIERS_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:41.232" level="INFO">${temp1} = 1E105494000D000BEE04FFF7000200AABB014300A3D8</msg>
<status endtime="20190121 15:30:41.233" status="PASS" starttime="20190121 15:30:41.226"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:41.253" level="INFO">${temp2} = 000200AABB</msg>
<status endtime="20190121 15:30:41.254" status="PASS" starttime="20190121 15:30:41.236"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:41.263" status="PASS" starttime="20190121 15:30:41.257"></status>
</kw>
<status endtime="20190121 15:30:41.265" status="PASS" starttime="20190121 15:30:41.216"></status>
</kw>
<status endtime="20190121 15:30:41.267" status="PASS" starttime="20190121 15:30:36.311"></status>
</kw>
<kw name="TEST_DIAG_CODING">
<doc>Write and read the EEPROM_DIAG_CODING</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_DIAG_CODING</arg>
</arguments>
<status endtime="20190121 15:30:41.280" status="PASS" starttime="20190121 15:30:41.275"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_DIAG_CODING}</arg>
<arg>${EEPROM_DIAG_CODING_LEN}</arg>
<arg>${EEPROM_DIAG_CODING_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:41.300" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F6 00 0C 11 15 05 15 01 FF 00 01 7C FF 00 00</msg>
<status endtime="20190121 15:30:41.300" status="PASS" starttime="20190121 15:30:41.293"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:41.316" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F6', '00', '0C', '11', '15', '05', '15', '01', 'FF', '00', '01', '7C', 'FF', '00', '00']</msg>
<status endtime="20190121 15:30:41.317" status="PASS" starttime="20190121 15:30:41.310"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:41.323" level="INFO">Length is 26</msg>
<msg timestamp="20190121 15:30:41.325" level="INFO">${length} = 26</msg>
<status endtime="20190121 15:30:41.326" status="PASS" starttime="20190121 15:30:41.320"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:41.334" status="PASS" starttime="20190121 15:30:41.329"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:41.343" level="INFO">${value} = 20</msg>
<status endtime="20190121 15:30:41.344" status="PASS" starttime="20190121 15:30:41.337"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:41.359" level="INFO">${res} = 14</msg>
<status endtime="20190121 15:30:41.364" status="PASS" starttime="20190121 15:30:41.347"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:41.377" status="PASS" starttime="20190121 15:30:41.367"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:41.387" level="INFO">${res} = 1E54109400140000EE05FFF6000C1115051501FF00017CFF0000</msg>
<status endtime="20190121 15:30:41.388" status="PASS" starttime="20190121 15:30:41.381"></status>
</kw>
<msg timestamp="20190121 15:30:41.392" level="INFO">${ISI_MSG_NORM} = 1E54109400140000EE05FFF6000C1115051501FF00017CFF0000</msg>
<status endtime="20190121 15:30:41.393" status="PASS" starttime="20190121 15:30:41.303"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:41.402" status="PASS" starttime="20190121 15:30:41.397"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:43.087" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F6 00 00 01 44 5A 31</msg>
<status endtime="20190121 15:30:43.094" status="PASS" starttime="20190121 15:30:41.405"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:43.105" status="PASS" starttime="20190121 15:30:43.099"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:43.123" level="INFO">${temp1} = 1E105494000A000BEE06FFF6000001445A31</msg>
<status endtime="20190121 15:30:43.124" status="PASS" starttime="20190121 15:30:43.117"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:43.133" level="INFO">${temp2} = EE06FFF600</msg>
<status endtime="20190121 15:30:43.134" status="PASS" starttime="20190121 15:30:43.127"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:43.142" status="PASS" starttime="20190121 15:30:43.137"></status>
</kw>
<status endtime="20190121 15:30:43.144" status="PASS" starttime="20190121 15:30:43.107"></status>
</kw>
<status endtime="20190121 15:30:43.146" status="PASS" starttime="20190121 15:30:41.283"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_DIAG_CODING}</arg>
<arg>${EEPROM_DIAG_CODING_LEN}</arg>
<arg>${EEPROM_DIAG_CODING_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:43.168" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F6 00 0C 11 15 05 15 01 FF 00 01 7C FF 00 CC</msg>
<status endtime="20190121 15:30:43.169" status="PASS" starttime="20190121 15:30:43.158"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:43.186" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F6', '00', '0C', '11', '15', '05', '15', '01', 'FF', '00', '01', '7C', 'FF', '00', 'CC']</msg>
<status endtime="20190121 15:30:43.187" status="PASS" starttime="20190121 15:30:43.181"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:43.194" level="INFO">Length is 26</msg>
<msg timestamp="20190121 15:30:43.196" level="INFO">${length} = 26</msg>
<status endtime="20190121 15:30:43.197" status="PASS" starttime="20190121 15:30:43.190"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:43.209" status="PASS" starttime="20190121 15:30:43.200"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:43.217" level="INFO">${value} = 20</msg>
<status endtime="20190121 15:30:43.218" status="PASS" starttime="20190121 15:30:43.212"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:43.227" level="INFO">${res} = 14</msg>
<status endtime="20190121 15:30:43.228" status="PASS" starttime="20190121 15:30:43.221"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:43.235" status="PASS" starttime="20190121 15:30:43.230"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:43.245" level="INFO">${res} = 1E54109400140000EE05FFF6000C1115051501FF00017CFF00CC</msg>
<status endtime="20190121 15:30:43.245" status="PASS" starttime="20190121 15:30:43.238"></status>
</kw>
<msg timestamp="20190121 15:30:43.249" level="INFO">${ISI_MSG_NORM} = 1E54109400140000EE05FFF6000C1115051501FF00017CFF00CC</msg>
<status endtime="20190121 15:30:43.250" status="PASS" starttime="20190121 15:30:43.171"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:43.258" status="PASS" starttime="20190121 15:30:43.253"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:43.609" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F6 00 00 01 45 5A 30</msg>
<status endtime="20190121 15:30:43.610" status="PASS" starttime="20190121 15:30:43.261"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:43.619" status="PASS" starttime="20190121 15:30:43.613"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:43.637" level="INFO">${temp1} = 1E105494000A000BEE06FFF6000001455A30</msg>
<status endtime="20190121 15:30:43.638" status="PASS" starttime="20190121 15:30:43.631"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:43.648" level="INFO">${temp2} = EE06FFF600</msg>
<status endtime="20190121 15:30:43.649" status="PASS" starttime="20190121 15:30:43.641"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:43.657" status="PASS" starttime="20190121 15:30:43.651"></status>
</kw>
<status endtime="20190121 15:30:43.659" status="PASS" starttime="20190121 15:30:43.621"></status>
</kw>
<status endtime="20190121 15:30:43.661" status="PASS" starttime="20190121 15:30:43.148"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:43.719" status="PASS" starttime="20190121 15:30:43.669"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:43.773" status="PASS" starttime="20190121 15:30:43.722"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:30:45.780" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:30:45.783" status="PASS" starttime="20190121 15:30:43.776"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:45.832" status="PASS" starttime="20190121 15:30:45.786"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:45.882" status="PASS" starttime="20190121 15:30:45.835"></status>
</kw>
<status endtime="20190121 15:30:45.884" status="PASS" starttime="20190121 15:30:43.663"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_DIAG_CODING}</arg>
<arg>${EEPROM_DIAG_CODING_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:45.902" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F6 00 0C</msg>
<status endtime="20190121 15:30:45.903" status="PASS" starttime="20190121 15:30:45.896"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:45.912" status="PASS" starttime="20190121 15:30:45.906"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:46.237" level="INFO">${resp} = 1E 10 54 94 00 17 00 0B EE 04 FF F6 00 0C 00 11 15 05 15 01 FF 00 01 7C FF 00 CC 01 43 00 D5 0E</msg>
<status endtime="20190121 15:30:46.238" status="PASS" starttime="20190121 15:30:45.915"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:46.246" status="PASS" starttime="20190121 15:30:46.241"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:46.265" level="INFO">${temp1} = 1E1054940017000BEE04FFF6000C001115051501FF00017CFF00CC014300D50E</msg>
<status endtime="20190121 15:30:46.266" status="PASS" starttime="20190121 15:30:46.259"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:46.274" level="INFO">${temp2} = EE04FFF6000C00</msg>
<status endtime="20190121 15:30:46.275" status="PASS" starttime="20190121 15:30:46.269"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:46.283" status="PASS" starttime="20190121 15:30:46.278"></status>
</kw>
<status endtime="20190121 15:30:46.286" status="PASS" starttime="20190121 15:30:46.248"></status>
</kw>
<msg timestamp="20190121 15:30:46.289" level="INFO">${RESP} = 1E 10 54 94 00 17 00 0B EE 04 FF F6 00 0C 00 11 15 05 15 01 FF 00 01 7C FF 00 CC 01 43 00 D5 0E</msg>
<status endtime="20190121 15:30:46.290" status="PASS" starttime="20190121 15:30:45.887"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_DIAG_CODING_LEN} ${EEPROM_APP_OK} ${EEPROM_DIAG_CODING_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:46.308" level="INFO">${temp1} = 1E1054940017000BEE04FFF6000C001115051501FF00017CFF00CC014300D50E</msg>
<status endtime="20190121 15:30:46.309" status="PASS" starttime="20190121 15:30:46.302"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:46.318" level="INFO">${temp2} = 000C001115051501FF00017CFF00CC</msg>
<status endtime="20190121 15:30:46.318" status="PASS" starttime="20190121 15:30:46.312"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:46.331" status="PASS" starttime="20190121 15:30:46.321"></status>
</kw>
<status endtime="20190121 15:30:46.334" status="PASS" starttime="20190121 15:30:46.292"></status>
</kw>
<status endtime="20190121 15:30:46.336" status="PASS" starttime="20190121 15:30:41.269"></status>
</kw>
<kw name="TEST_RESET_BUFFER">
<doc>Write and read the EEPROM_RESET_BUFFER</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Write and read the EEPROM_RESET_BUFFER</arg>
</arguments>
<status endtime="20190121 15:30:46.349" status="PASS" starttime="20190121 15:30:46.344"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_RESET_BUFFER}</arg>
<arg>${EEPROM_RESET_BUFFER_LEN}</arg>
<arg>${EEPROM_RESET_BUFFER_DEFDATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:46.384" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F5 00 42 00000000 00000000 00000000 000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status endtime="20190121 15:30:46.385" status="PASS" starttime="20190121 15:30:46.376"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:46.401" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F5', '00', '42', '00000000', '00000000', '00000000', '000000000000000000000000060000000000000600000000000006000000000000060000000000...</msg>
<status endtime="20190121 15:30:46.402" status="PASS" starttime="20190121 15:30:46.396"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:46.409" level="INFO">Length is 18</msg>
<msg timestamp="20190121 15:30:46.411" level="INFO">${length} = 18</msg>
<status endtime="20190121 15:30:46.412" status="PASS" starttime="20190121 15:30:46.405"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:46.420" status="PASS" starttime="20190121 15:30:46.414"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:46.428" level="INFO">${value} = 12</msg>
<status endtime="20190121 15:30:46.429" status="PASS" starttime="20190121 15:30:46.423"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:46.438" level="INFO">${res} = 0C</msg>
<status endtime="20190121 15:30:46.439" status="PASS" starttime="20190121 15:30:46.432"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:46.447" status="PASS" starttime="20190121 15:30:46.442"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:46.456" level="INFO">${res} = 1E541094000C0000EE05FFF50042000000000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status endtime="20190121 15:30:46.457" status="PASS" starttime="20190121 15:30:46.450"></status>
</kw>
<msg timestamp="20190121 15:30:46.461" level="INFO">${ISI_MSG_NORM} = 1E541094000C0000EE05FFF50042000000000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status endtime="20190121 15:30:46.462" status="PASS" starttime="20190121 15:30:46.388"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:46.470" status="PASS" starttime="20190121 15:30:46.464"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:48.090" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F5 00 00 01 44 5A 32</msg>
<status endtime="20190121 15:30:48.091" status="PASS" starttime="20190121 15:30:46.473"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:48.105" status="PASS" starttime="20190121 15:30:48.099"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:48.124" level="INFO">${temp1} = 1E105494000A000BEE06FFF5000001445A32</msg>
<status endtime="20190121 15:30:48.125" status="PASS" starttime="20190121 15:30:48.118"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:48.134" level="INFO">${temp2} = EE06FFF500</msg>
<status endtime="20190121 15:30:48.134" status="PASS" starttime="20190121 15:30:48.128"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:48.143" status="PASS" starttime="20190121 15:30:48.137"></status>
</kw>
<status endtime="20190121 15:30:48.145" status="PASS" starttime="20190121 15:30:48.107"></status>
</kw>
<status endtime="20190121 15:30:48.147" status="PASS" starttime="20190121 15:30:46.358"></status>
</kw>
<kw name="WRITE_EEPROM_VALUE">
<doc>WRITE EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_RESET_BUFFER}</arg>
<arg>${EEPROM_RESET_BUFFER_LEN}</arg>
<arg>${EEPROM_RESET_BUFFER_DATA}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_WRITE_REQ} ${OTP_ENTRY} ${ENTRY_LEN} ${DATA}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:48.166" level="INFO">${ISI_MSG} = 1E 54 10 94 00 16 00 00 EE 05 FF F5 00 42 AABB0000 00000000 00000000 000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status endtime="20190121 15:30:48.167" status="PASS" starttime="20190121 15:30:48.159"></status>
</kw>
<kw name="NORMALIZE_LENGTH_FIELD">
<doc>Normalize length field in the isi message for max length of 255 bytes</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${ISI_MSG_NORM}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${ISI_MSG}</arg>
</arguments>
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190121 15:30:48.182" level="INFO">${list} = ['1E', '54', '10', '94', '00', '16', '00', '00', 'EE', '05', 'FF', 'F5', '00', '42', 'AABB0000', '00000000', '00000000', '000000000000000000000000060000000000000600000000000006000000000000060000000000...</msg>
<status endtime="20190121 15:30:48.183" status="PASS" starttime="20190121 15:30:48.177"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${list}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20190121 15:30:48.189" level="INFO">Length is 18</msg>
<msg timestamp="20190121 15:30:48.191" level="INFO">${length} = 18</msg>
<status endtime="20190121 15:30:48.192" status="PASS" starttime="20190121 15:30:48.185"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${length} &gt; 7</arg>
</arguments>
<status endtime="20190121 15:30:48.204" status="PASS" starttime="20190121 15:30:48.195"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${length} - 6</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:30:48.214" level="INFO">${value} = 12</msg>
<status endtime="20190121 15:30:48.215" status="PASS" starttime="20190121 15:30:48.208"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>("%02X" % ${value})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:48.223" level="INFO">${res} = 0C</msg>
<status endtime="20190121 15:30:48.224" status="PASS" starttime="20190121 15:30:48.218"></status>
</kw>
<kw name="Set List Value" library="Collections">
<doc>Sets the value of ``list`` specified by ``index`` to the given ``value``.</doc>
<arguments>
<arg>${list}</arg>
<arg>5</arg>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:30:48.232" status="PASS" starttime="20190121 15:30:48.227"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"".join(${list})</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:30:48.242" level="INFO">${res} = 1E541094000C0000EE05FFF50042AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status endtime="20190121 15:30:48.242" status="PASS" starttime="20190121 15:30:48.235"></status>
</kw>
<msg timestamp="20190121 15:30:48.246" level="INFO">${ISI_MSG_NORM} = 1E541094000C0000EE05FFF50042AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status endtime="20190121 15:30:48.247" status="PASS" starttime="20190121 15:30:48.169"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG_NORM}</arg>
</arguments>
<status endtime="20190121 15:30:48.256" status="PASS" starttime="20190121 15:30:48.250"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG_NORM}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:48.594" level="INFO">${resp} = 1E 10 54 94 00 0A 00 0B EE 06 FF F5 00 00 01 45 5A 33</msg>
<status endtime="20190121 15:30:48.594" status="PASS" starttime="20190121 15:30:48.259"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:48.606" status="PASS" starttime="20190121 15:30:48.601"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${WRITE_RESP} ${OTP_ENTRY} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:48.626" level="INFO">${temp1} = 1E105494000A000BEE06FFF5000001455A33</msg>
<status endtime="20190121 15:30:48.627" status="PASS" starttime="20190121 15:30:48.620"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:48.638" level="INFO">${temp2} = EE06FFF500</msg>
<status endtime="20190121 15:30:48.639" status="PASS" starttime="20190121 15:30:48.632"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:48.647" status="PASS" starttime="20190121 15:30:48.641"></status>
</kw>
<status endtime="20190121 15:30:48.649" status="PASS" starttime="20190121 15:30:48.609"></status>
</kw>
<status endtime="20190121 15:30:48.651" status="PASS" starttime="20190121 15:30:48.149"></status>
</kw>
<kw name="power_cycle">
<doc>Switch power off and on</doc>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:48.707" status="PASS" starttime="20190121 15:30:48.660"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:48.758" status="PASS" starttime="20190121 15:30:48.710"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:30:50.766" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:30:50.768" status="PASS" starttime="20190121 15:30:48.761"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:50.817" status="PASS" starttime="20190121 15:30:50.771"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:50.867" status="PASS" starttime="20190121 15:30:50.820"></status>
</kw>
<status endtime="20190121 15:30:50.870" status="PASS" starttime="20190121 15:30:48.653"></status>
</kw>
<kw name="READ_EEPROM_VALUE">
<doc>READ EEPROM VALUES and check response</doc>
<arguments>
<arg>${EEPROM_RESET_BUFFER}</arg>
<arg>${EEPROM_RESET_BUFFER_LEN}</arg>
</arguments>
<assign>
<var>${RESP}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EEPROM_APP_READ_REQ} ${OTP_ENTRY} ${EXPECTED_LEN}</arg>
</arguments>
<assign>
<var>${ISI_MSG}</var>
</assign>
<msg timestamp="20190121 15:30:50.887" level="INFO">${ISI_MSG} = 1E 54 10 94 00 08 00 00 EE 03 FF F5 00 42</msg>
<status endtime="20190121 15:30:50.888" status="PASS" starttime="20190121 15:30:50.881"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Send ISI msg: ${ISI_MSG}</arg>
</arguments>
<status endtime="20190121 15:30:50.897" status="PASS" starttime="20190121 15:30:50.891"></status>
</kw>
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${ISI_MSG}</arg>
<arg>${ACK_FLAG}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:30:51.224" level="INFO">${resp} = 1E 10 54 94 00 4D 00 0B EE 04 FF F5 00 42 00 AA BB 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00...</msg>
<status endtime="20190121 15:30:51.225" status="PASS" starttime="20190121 15:30:50.900"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${resp}</arg>
</arguments>
<status endtime="20190121 15:30:51.234" status="PASS" starttime="20190121 15:30:51.229"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${resp}</arg>
<arg>${TRANSACTION_ID} ${READ_RESP} ${OTP_ENTRY} ${EXPECTED_LEN} ${EEPROM_APP_OK}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:51.253" level="INFO">${temp1} = 1E105494004D000BEE04FFF5004200AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000014300A5DC</msg>
<status endtime="20190121 15:30:51.255" status="PASS" starttime="20190121 15:30:51.247"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:51.263" level="INFO">${temp2} = EE04FFF5004200</msg>
<status endtime="20190121 15:30:51.264" status="PASS" starttime="20190121 15:30:51.258"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:51.273" status="PASS" starttime="20190121 15:30:51.267"></status>
</kw>
<status endtime="20190121 15:30:51.275" status="PASS" starttime="20190121 15:30:51.236"></status>
</kw>
<msg timestamp="20190121 15:30:51.279" level="INFO">${RESP} = 1E 10 54 94 00 4D 00 0B EE 04 FF F5 00 42 00 AA BB 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00 06 00 00 00 00 00 00...</msg>
<status endtime="20190121 15:30:51.279" status="PASS" starttime="20190121 15:30:50.872"></status>
</kw>
<kw name="SHOULD_CONTAIN_SUBSTRING">
<doc>should contain substring without paying attention to empty spaces</doc>
<arguments>
<arg>${RESP}</arg>
<arg>${EEPROM_RESET_BUFFER_LEN} ${EEPROM_APP_OK} ${EEPROM_RESET_BUFFER_DATA}</arg>
</arguments>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${value}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp1}</var>
</assign>
<msg timestamp="20190121 15:30:51.297" level="INFO">${temp1} = 1E105494004D000BEE04FFF5004200AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000014300A5DC</msg>
<status endtime="20190121 15:30:51.299" status="PASS" starttime="20190121 15:30:51.291"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>"${muster}".replace(" ","")</arg>
</arguments>
<assign>
<var>${temp2}</var>
</assign>
<msg timestamp="20190121 15:30:51.307" level="INFO">${temp2} = 004200AABB00000000000000000000000000000000000000000000060000000000000600000000000006000000000000060000000000000600000000000006000000000000</msg>
<status endtime="20190121 15:30:51.308" status="PASS" starttime="20190121 15:30:51.301"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${temp1}</arg>
<arg>${temp2}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:30:51.321" status="PASS" starttime="20190121 15:30:51.311"></status>
</kw>
<status endtime="20190121 15:30:51.323" status="PASS" starttime="20190121 15:30:51.282"></status>
</kw>
<status endtime="20190121 15:30:51.325" status="PASS" starttime="20190121 15:30:46.338"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<doc>Teardown, Switch power off and close the Serial port, Switch off the CanController</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Teardown call</arg>
</arguments>
<status endtime="20190121 15:30:51.340" status="PASS" starttime="20190121 15:30:51.336"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:51.409" status="PASS" starttime="20190121 15:30:51.343"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:51.461" status="PASS" starttime="20190121 15:30:51.412"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:30:51.509" status="PASS" starttime="20190121 15:30:51.464"></status>
</kw>
<status endtime="20190121 15:30:51.511" status="PASS" starttime="20190121 15:30:51.329"></status>
</kw>
<doc>Implements Test Task SKTB-41553</doc>
<tags>
<tag>EEPROM</tag>
</tags>
<status critical="yes" endtime="20190121 15:30:51.513" status="PASS" starttime="20190121 15:30:17.270"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:30:53.057" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:30:53.112" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:30:53.113" status="PASS" starttime="20190121 15:30:51.571"></status>
</kw>
<status endtime="20190121 15:30:53.123" status="PASS" starttime="20190121 15:30:51.531"></status>
</kw>
<status endtime="20190121 15:30:53.126" status="PASS" starttime="20190121 15:30:51.523"></status>
</kw>
<doc>EEPROM write read test</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:30:53.130" status="PASS" starttime="20190121 15:30:14.131"></status>
</suite>
<suite id="s1-s14" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-56663.robot" name="SKTB-56663">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:30:53.691" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:30:53.713" status="PASS" starttime="20190121 15:30:53.686"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:30:53.728" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:30:53.730" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:30:56.020" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:30:56.021" status="PASS" starttime="20190121 15:30:53.716"></status>
</kw>
<status endtime="20190121 15:30:56.031" status="PASS" starttime="20190121 15:30:53.670"></status>
</kw>
<test id="s1-s14-t1" name="SKTB-56663">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:56.229" status="PASS" starttime="20190121 15:30:56.096"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:56.342" status="PASS" starttime="20190121 15:30:56.231"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:30:56.442" status="PASS" starttime="20190121 15:30:56.345"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:30:58.458" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:30:58.460" status="PASS" starttime="20190121 15:30:56.445"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:58.509" status="PASS" starttime="20190121 15:30:58.463"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:30:58.558" status="PASS" starttime="20190121 15:30:58.512"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:30:58.607" status="PASS" starttime="20190121 15:30:58.563"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:30:58.657" status="PASS" starttime="20190121 15:30:58.611"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:30:58.707" status="PASS" starttime="20190121 15:30:58.661"></status>
</kw>
<kw name="Fbus Set State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${10000}</arg>
</arguments>
<status endtime="20190121 15:30:58.785" status="PASS" starttime="20190121 15:30:58.710"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:00.797" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:00.799" status="PASS" starttime="20190121 15:30:58.788"></status>
</kw>
<status endtime="20190121 15:31:00.801" status="PASS" starttime="20190121 15:30:56.070"></status>
</kw>
<kw name="Step_1">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_GET_REQ} ${SCA_VOLTAGE_CARBAT}</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:31:01.014" level="INFO">${resp} = 1E 14 54 8E 00 0A 00 0D 01 02 00 01 2F 7D 01 43 65 A0</msg>
<status endtime="20190121 15:31:01.015" status="PASS" starttime="20190121 15:31:00.810"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:31:01.023" level="INFO">1E 14 54 8E 00 0A 00 0D 01 02 00 01 2F 7D 01 43 65 A0</msg>
<status endtime="20190121 15:31:01.026" status="PASS" starttime="20190121 15:31:01.019"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_VOLTAGE_GET_RESP} ${SCA_RESULT_OK} ${SCA_VOLTAGE_CARBAT}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:31:01.036" status="PASS" starttime="20190121 15:31:01.029"></status>
</kw>
<status endtime="20190121 15:31:01.039" status="PASS" starttime="20190121 15:31:00.804"></status>
</kw>
<kw name="Step_2">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_GET_REQ} 00</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${resp}</var>
</assign>
<msg timestamp="20190121 15:31:01.267" level="INFO">${resp} = 1E 14 54 8E 00 0A 00 0D 01 02 01 00 FF FF 01 44 B4 24</msg>
<status endtime="20190121 15:31:01.268" status="PASS" starttime="20190121 15:31:01.047"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${resp}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:31:01.276" level="INFO">1E 14 54 8E 00 0A 00 0D 01 02 01 00 FF FF 01 44 B4 24</msg>
<status endtime="20190121 15:31:01.278" status="PASS" starttime="20190121 15:31:01.271"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${resp}</arg>
<arg>${SCA_VOLTAGE_GET_RESP} ${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:31:01.291" status="PASS" starttime="20190121 15:31:01.281"></status>
</kw>
<status endtime="20190121 15:31:01.293" status="PASS" starttime="20190121 15:31:01.041"></status>
</kw>
<kw name="Step_3">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_REQ} ${SCA_VOLTAGE_CARBAT} ${SCA_THRESHOLD_FALL_BELOW} ${THRESHOLD} ${HYSTERESIS}</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:31:01.555" level="INFO">${info} = 1E 14 54 8E 00 08 00 0D 01 04 00 01 01 45 4A DF</msg>
<status endtime="20190121 15:31:01.556" status="PASS" starttime="20190121 15:31:01.302"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:31:01.563" level="INFO">1E 14 54 8E 00 08 00 0D 01 04 00 01 01 45 4A DF</msg>
<status endtime="20190121 15:31:01.566" status="PASS" starttime="20190121 15:31:01.559"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_RESP} ${SCA_RESULT_OK} ${SCA_VOLTAGE_CARBAT}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:31:01.576" status="PASS" starttime="20190121 15:31:01.569"></status>
</kw>
<status endtime="20190121 15:31:01.579" status="PASS" starttime="20190121 15:31:01.295"></status>
</kw>
<kw name="Step_4">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_REQ} ${SCA_VOLTAGE_CARBAT} ${SCA_THRESHOLD_EXCEED} ${THRESHOLD} ${HYSTERESIS}</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:31:01.814" level="INFO">${info} = 1E 14 54 8E 00 08 00 0D 01 04 00 01 01 40 4A DA</msg>
<status endtime="20190121 15:31:01.815" status="PASS" starttime="20190121 15:31:01.587"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:31:01.826" level="INFO">1E 14 54 8E 00 08 00 0D 01 04 00 01 01 40 4A DA</msg>
<status endtime="20190121 15:31:01.828" status="PASS" starttime="20190121 15:31:01.818"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_RESP} ${SCA_RESULT_OK} ${SCA_VOLTAGE_CARBAT}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:31:01.839" status="PASS" starttime="20190121 15:31:01.831"></status>
</kw>
<status endtime="20190121 15:31:01.841" status="PASS" starttime="20190121 15:31:01.580"></status>
</kw>
<kw name="Step_5">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_REQ} ${SCA_VOLTAGE_CARBAT} ${SCA_THRESHOLD_INVALID} ${THRESHOLD} ${HYSTERESIS}</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:31:02.083" level="INFO">${info} = 1E 14 54 8E 00 08 00 0D 01 04 01 01 01 41 4B DB</msg>
<status endtime="20190121 15:31:02.084" status="PASS" starttime="20190121 15:31:01.849"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:31:02.092" level="INFO">1E 14 54 8E 00 08 00 0D 01 04 01 01 01 41 4B DB</msg>
<status endtime="20190121 15:31:02.094" status="PASS" starttime="20190121 15:31:02.087"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_RESP} ${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:31:02.104" status="PASS" starttime="20190121 15:31:02.097"></status>
</kw>
<status endtime="20190121 15:31:02.106" status="PASS" starttime="20190121 15:31:01.843"></status>
</kw>
<kw name="Step_6">
<kw name="Fbus Send Message" library="robot_framework_tnt.Client">
<arguments>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_REQ} 00 ${SCA_THRESHOLD_FALL_BELOW} ${THRESHOLD} ${HYSTERESIS}</arg>
<arg>${ACK}</arg>
</arguments>
<assign>
<var>${info}</var>
</assign>
<msg timestamp="20190121 15:31:02.352" level="INFO">${info} = 1E 14 54 8E 00 08 00 0D 01 04 01 00 01 42 4B D9</msg>
<status endtime="20190121 15:31:02.354" status="PASS" starttime="20190121 15:31:02.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${info}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:31:02.361" level="INFO">1E 14 54 8E 00 08 00 0D 01 04 01 00 01 42 4B D9</msg>
<status endtime="20190121 15:31:02.364" status="PASS" starttime="20190121 15:31:02.357"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${info}</arg>
<arg>${SCA_VOLTAGE_THRESHOLD_SET_RESP} ${SCA_RESULT_FAIL}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:31:02.374" status="PASS" starttime="20190121 15:31:02.367"></status>
</kw>
<status endtime="20190121 15:31:02.376" status="PASS" starttime="20190121 15:31:02.108"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:02.457" status="PASS" starttime="20190121 15:31:02.386"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:02.506" status="PASS" starttime="20190121 15:31:02.460"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:02.555" status="PASS" starttime="20190121 15:31:02.509"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:04.572" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:04.574" status="PASS" starttime="20190121 15:31:02.559"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:31:04.623" status="PASS" starttime="20190121 15:31:04.577"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:31:04.671" status="PASS" starttime="20190121 15:31:04.627"></status>
</kw>
<status endtime="20190121 15:31:04.674" status="PASS" starttime="20190121 15:31:02.379"></status>
</kw>
<doc>Implements SW Test Case SKTB-56663</doc>
<tags>
<tag>FBUS</tag>
</tags>
<status critical="yes" endtime="20190121 15:31:04.675" status="PASS" starttime="20190121 15:30:56.033"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:31:06.179" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:31:06.215" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:31:06.232" status="PASS" starttime="20190121 15:31:04.717"></status>
</kw>
<status endtime="20190121 15:31:06.236" status="PASS" starttime="20190121 15:31:04.691"></status>
</kw>
<status endtime="20190121 15:31:06.238" status="PASS" starttime="20190121 15:31:04.685"></status>
</kw>
<doc>Chorus Fbus Testing</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:31:06.239" status="PASS" starttime="20190121 15:30:53.231"></status>
</suite>
<suite id="s1-s15" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-56067.robot" name="SKTB-56067">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:31:06.867" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:31:06.884" status="PASS" starttime="20190121 15:31:06.855"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:31:06.923" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:31:06.925" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:31:09.217" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:31:09.219" status="PASS" starttime="20190121 15:31:06.887"></status>
</kw>
<status endtime="20190121 15:31:09.221" status="PASS" starttime="20190121 15:31:06.849"></status>
</kw>
<test id="s1-s15-t1" name="SKTB-SKTB-56067">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:09.427" status="PASS" starttime="20190121 15:31:09.277"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:09.559" status="PASS" starttime="20190121 15:31:09.437"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:09.729" status="PASS" starttime="20190121 15:31:09.574"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:11.749" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:11.751" status="PASS" starttime="20190121 15:31:09.732"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:31:11.800" status="PASS" starttime="20190121 15:31:11.754"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:12.808" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:12.810" status="PASS" starttime="20190121 15:31:11.804"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:31:12.859" status="PASS" starttime="20190121 15:31:12.813"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:14.868" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:14.870" status="PASS" starttime="20190121 15:31:12.863"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:31:14.918" status="PASS" starttime="20190121 15:31:14.873"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:31:14.967" status="PASS" starttime="20190121 15:31:14.921"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:31:15.024" status="PASS" starttime="20190121 15:31:14.970"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:31:15.086" status="PASS" starttime="20190121 15:31:15.028"></status>
</kw>
<status endtime="20190121 15:31:15.089" status="PASS" starttime="20190121 15:31:09.265"></status>
</kw>
<kw name="TEST_SERIAL_COMMUNICATION">
<doc>Test serial communication and change baudrate</doc>
<kw name="Step_alive">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:15.210" level="INFO">${res_dict} = {'result': '4153', 'request': '41', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:31:15.211" status="PASS" starttime="20190121 15:31:15.117"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:15.247" level="INFO">${value} = True</msg>
<status endtime="20190121 15:31:15.248" status="PASS" starttime="20190121 15:31:15.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${value}== ${FALSE}</arg>
<arg>change_baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:31:15.257" status="PASS" starttime="20190121 15:31:15.251"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:16.265" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:16.267" status="PASS" starttime="20190121 15:31:15.260"></status>
</kw>
<status endtime="20190121 15:31:16.270" status="PASS" starttime="20190121 15:31:15.101"></status>
</kw>
<kw name="Step_alive_retry">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:16.345" level="INFO">${res_dict} = {'result': '4153', 'request': '41', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:31:16.346" status="PASS" starttime="20190121 15:31:16.278"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:16.371" level="INFO">${value} = True</msg>
<status endtime="20190121 15:31:16.371" status="PASS" starttime="20190121 15:31:16.349"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:31:16.379" status="PASS" starttime="20190121 15:31:16.374"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:17.386" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:17.389" status="PASS" starttime="20190121 15:31:16.382"></status>
</kw>
<status endtime="20190121 15:31:17.391" status="PASS" starttime="20190121 15:31:16.272"></status>
</kw>
<status endtime="20190121 15:31:17.393" status="PASS" starttime="20190121 15:31:15.094"></status>
</kw>
<kw name="POWER_ON_NAD">
<doc>Test the POWER_ON_NAD functionality</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test the POWER_ON_NAD</arg>
<arg>functionality</arg>
</arguments>
<status endtime="20190121 15:31:17.406" status="PASS" starttime="20190121 15:31:17.401"></status>
</kw>
<kw name="POWERCYCLE">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:17.472" status="PASS" starttime="20190121 15:31:17.414"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:17.582" status="PASS" starttime="20190121 15:31:17.475"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:17.660" status="PASS" starttime="20190121 15:31:17.585"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:19.667" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:19.669" status="PASS" starttime="20190121 15:31:17.663"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:31:19.718" status="PASS" starttime="20190121 15:31:19.672"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:20.727" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:20.729" status="PASS" starttime="20190121 15:31:19.722"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:31:20.779" status="PASS" starttime="20190121 15:31:20.732"></status>
</kw>
<status endtime="20190121 15:31:20.782" status="PASS" starttime="20190121 15:31:17.408"></status>
</kw>
<kw name="LOAD_AND_INIT_THE_TESTROUTINE">
<doc>Load the powertestroutine and init it</doc>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${POWER_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg timestamp="20190121 15:31:20.807" level="INFO">Starting process:
find /home/debian/chorus_version/TestRoutinePower_OLU_*.bin</msg>
<msg timestamp="20190121 15:31:20.836" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:31:20.851" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:31:20.854" level="INFO">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:31:20.855" status="PASS" starttime="20190121 15:31:20.802"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg timestamp="20190121 15:31:20.864" level="INFO">${stdout_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status endtime="20190121 15:31:20.865" status="PASS" starttime="20190121 15:31:20.859"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:31:20.872" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:31:20.874" level="INFO">${temp} = ['/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin']</msg>
<status endtime="20190121 15:31:20.875" status="PASS" starttime="20190121 15:31:20.868"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20190121 15:31:20.883" level="INFO">${path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status endtime="20190121 15:31:20.884" status="PASS" starttime="20190121 15:31:20.878"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status endtime="20190121 15:31:20.892" status="PASS" starttime="20190121 15:31:20.886"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" timestamp="20190121 15:31:20.901" level="INFO">File '&lt;a href="file:///home/debian/chorus_version/TestRoutinePower_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status endtime="20190121 15:31:20.902" status="PASS" starttime="20190121 15:31:20.895"></status>
</kw>
<msg timestamp="20190121 15:31:20.906" level="INFO">${matched_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status endtime="20190121 15:31:20.907" status="PASS" starttime="20190121 15:31:20.795"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:21.080" level="INFO">${res_dict} = {'request': '', 'status': True, 'data': '2002e7cf', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:31:21.090" status="PASS" starttime="20190121 15:31:20.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:31:21.097" level="INFO">{'request': '', 'status': True, 'data': '2002e7cf', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:31:21.099" status="PASS" starttime="20190121 15:31:21.093"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:23.107" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:23.109" status="PASS" starttime="20190121 15:31:21.102"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:23.161" level="INFO">${value} = 5453</msg>
<status endtime="20190121 15:31:23.162" status="PASS" starttime="20190121 15:31:23.112"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:31:23.171" status="PASS" starttime="20190121 15:31:23.165"></status>
</kw>
<status endtime="20190121 15:31:23.174" status="PASS" starttime="20190121 15:31:20.789"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:23.246" level="INFO">${res_dict} = {'result': '4953', 'request': '49', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:31:23.247" status="PASS" starttime="20190121 15:31:23.182"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:23.271" level="INFO">${value} = True</msg>
<status endtime="20190121 15:31:23.272" status="PASS" starttime="20190121 15:31:23.250"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:31:23.279" status="PASS" starttime="20190121 15:31:23.275"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:24.287" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:24.289" status="PASS" starttime="20190121 15:31:23.282"></status>
</kw>
<status endtime="20190121 15:31:24.291" status="PASS" starttime="20190121 15:31:23.176"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:24.366" level="INFO">${res_dict} = {'result': '475653', 'request': '4756', 'status': True, 'data': '0100'}</msg>
<status endtime="20190121 15:31:24.366" status="PASS" starttime="20190121 15:31:24.300"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nVersion: ${res_dict}</arg>
</arguments>
<status endtime="20190121 15:31:24.375" status="PASS" starttime="20190121 15:31:24.369"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:25.383" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:25.385" status="PASS" starttime="20190121 15:31:24.378"></status>
</kw>
<status endtime="20190121 15:31:25.387" status="PASS" starttime="20190121 15:31:24.293"></status>
</kw>
<status endtime="20190121 15:31:25.390" status="PASS" starttime="20190121 15:31:20.784"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${PWR_POWERONNAD}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:25.466" level="INFO">${res_dict} = {'result': '520153', 'request': '5201', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:31:25.467" status="PASS" starttime="20190121 15:31:25.399"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:31:25.476" status="PASS" starttime="20190121 15:31:25.470"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:25.502" level="INFO">${value} = True</msg>
<status endtime="20190121 15:31:25.503" status="PASS" starttime="20190121 15:31:25.479"></status>
</kw>
<msg timestamp="20190121 15:31:25.506" level="INFO">${value} = True</msg>
<status endtime="20190121 15:31:25.507" status="PASS" starttime="20190121 15:31:25.392"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:31:25.514" status="PASS" starttime="20190121 15:31:25.510"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
</arguments>
<msg timestamp="20190121 15:31:35.521" level="INFO">Slept 10 seconds</msg>
<status endtime="20190121 15:31:35.523" status="PASS" starttime="20190121 15:31:25.517"></status>
</kw>
<kw name="Measure_Current_kl30">
<assign>
<var>${TIMENOW}</var>
<var>${CURR_VCARBAT}</var>
<var>${CURR_KL30}</var>
</assign>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<assign>
<var>${KLEMME30}</var>
</assign>
<msg timestamp="20190121 15:31:35.582" level="INFO">${KLEMME30} = [[12200, 128], [12175, 136]]</msg>
<status endtime="20190121 15:31:35.583" status="PASS" starttime="20190121 15:31:35.531"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[0][1])</arg>
</arguments>
<assign>
<var>${CURR_VCARBAT}</var>
</assign>
<msg timestamp="20190121 15:31:35.608" level="INFO">${CURR_VCARBAT} = 128</msg>
<status endtime="20190121 15:31:35.609" status="PASS" starttime="20190121 15:31:35.586"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[1][1])</arg>
</arguments>
<assign>
<var>${CURR_KL30}</var>
</assign>
<msg timestamp="20190121 15:31:35.635" level="INFO">${CURR_KL30} = 136</msg>
<status endtime="20190121 15:31:35.636" status="PASS" starttime="20190121 15:31:35.612"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>epoch</arg>
</arguments>
<assign>
<var>${TIMENOW}</var>
</assign>
<msg timestamp="20190121 15:31:35.643" level="INFO">${TIMENOW} = 1548084695</msg>
<status endtime="20190121 15:31:35.644" status="PASS" starttime="20190121 15:31:35.639"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nTime: ${TIMENOW}, Vcarbat current: ${CURR_VCARBAT} ma, Kl30 current: ${CURR_KL30} ma.</arg>
</arguments>
<status endtime="20190121 15:31:35.654" status="PASS" starttime="20190121 15:31:35.647"></status>
</kw>
<msg timestamp="20190121 15:31:35.659" level="INFO">${TIMENOW} = 1548084695</msg>
<msg timestamp="20190121 15:31:35.660" level="INFO">${CURR_VCARBAT} = 128</msg>
<msg timestamp="20190121 15:31:35.661" level="INFO">${CURR_KL30} = 136</msg>
<status endtime="20190121 15:31:35.662" status="PASS" starttime="20190121 15:31:35.525"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should be true</arg>
<arg>${CURR_VCARBAT} &gt; 50</arg>
</arguments>
<assign>
<var>${fbus_resp}</var>
</assign>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${CURR_VCARBAT} &gt; 50</arg>
</arguments>
<status endtime="20190121 15:31:35.676" status="PASS" starttime="20190121 15:31:35.670"></status>
</kw>
<msg timestamp="20190121 15:31:35.678" level="INFO">${fbus_resp} = None</msg>
<status endtime="20190121 15:31:35.679" status="PASS" starttime="20190121 15:31:35.665"></status>
</kw>
<status endtime="20190121 15:31:35.681" status="PASS" starttime="20190121 15:31:17.395"></status>
</kw>
<kw name="SHUTDOWNSYSTEM">
<doc>Test the shutdownsystem functionality</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test the shutdownsystem functionality</arg>
</arguments>
<status endtime="20190121 15:31:35.694" status="PASS" starttime="20190121 15:31:35.689"></status>
</kw>
<kw name="POWERCYCLE">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:35.749" status="PASS" starttime="20190121 15:31:35.701"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:35.807" status="PASS" starttime="20190121 15:31:35.752"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:35.889" status="PASS" starttime="20190121 15:31:35.814"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:37.896" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:37.899" status="PASS" starttime="20190121 15:31:35.892"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:31:37.948" status="PASS" starttime="20190121 15:31:37.901"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:38.956" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:38.958" status="PASS" starttime="20190121 15:31:37.951"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:31:39.012" status="PASS" starttime="20190121 15:31:38.961"></status>
</kw>
<status endtime="20190121 15:31:39.015" status="PASS" starttime="20190121 15:31:35.696"></status>
</kw>
<kw name="LOAD_AND_INIT_THE_TESTROUTINE">
<doc>Load the powertestroutine and init it</doc>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${POWER_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg timestamp="20190121 15:31:39.040" level="INFO">Starting process:
find /home/debian/chorus_version/TestRoutinePower_OLU_*.bin</msg>
<msg timestamp="20190121 15:31:39.069" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:31:39.084" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:31:39.087" level="INFO">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:31:39.088" status="PASS" starttime="20190121 15:31:39.034"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg timestamp="20190121 15:31:39.098" level="INFO">${stdout_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status endtime="20190121 15:31:39.099" status="PASS" starttime="20190121 15:31:39.092"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:31:39.106" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:31:39.108" level="INFO">${temp} = ['/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin']</msg>
<status endtime="20190121 15:31:39.109" status="PASS" starttime="20190121 15:31:39.102"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20190121 15:31:39.117" level="INFO">${path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status endtime="20190121 15:31:39.118" status="PASS" starttime="20190121 15:31:39.112"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status endtime="20190121 15:31:39.126" status="PASS" starttime="20190121 15:31:39.121"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" timestamp="20190121 15:31:39.134" level="INFO">File '&lt;a href="file:///home/debian/chorus_version/TestRoutinePower_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status endtime="20190121 15:31:39.135" status="PASS" starttime="20190121 15:31:39.129"></status>
</kw>
<msg timestamp="20190121 15:31:39.140" level="INFO">${matched_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status endtime="20190121 15:31:39.140" status="PASS" starttime="20190121 15:31:39.027"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:39.308" level="INFO">${res_dict} = {'request': '', 'status': True, 'data': '2002e7cf', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:31:39.312" status="PASS" starttime="20190121 15:31:39.143"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:31:39.335" level="INFO">{'request': '', 'status': True, 'data': '2002e7cf', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:31:39.337" status="PASS" starttime="20190121 15:31:39.320"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:41.345" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:41.347" status="PASS" starttime="20190121 15:31:39.340"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:41.375" level="INFO">${value} = 5453</msg>
<status endtime="20190121 15:31:41.376" status="PASS" starttime="20190121 15:31:41.350"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:31:41.384" status="PASS" starttime="20190121 15:31:41.379"></status>
</kw>
<status endtime="20190121 15:31:41.387" status="PASS" starttime="20190121 15:31:39.022"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:41.455" level="INFO">${res_dict} = {'result': '4953', 'request': '49', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:31:41.456" status="PASS" starttime="20190121 15:31:41.395"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:41.481" level="INFO">${value} = True</msg>
<status endtime="20190121 15:31:41.482" status="PASS" starttime="20190121 15:31:41.459"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:31:41.489" status="PASS" starttime="20190121 15:31:41.484"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:42.496" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:42.498" status="PASS" starttime="20190121 15:31:41.491"></status>
</kw>
<status endtime="20190121 15:31:42.500" status="PASS" starttime="20190121 15:31:41.389"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:42.572" level="INFO">${res_dict} = {'result': '475653', 'request': '4756', 'status': True, 'data': '0100'}</msg>
<status endtime="20190121 15:31:42.573" status="PASS" starttime="20190121 15:31:42.508"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nVersion: ${res_dict}</arg>
</arguments>
<status endtime="20190121 15:31:42.582" status="PASS" starttime="20190121 15:31:42.576"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:43.589" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:43.592" status="PASS" starttime="20190121 15:31:42.585"></status>
</kw>
<status endtime="20190121 15:31:43.595" status="PASS" starttime="20190121 15:31:42.502"></status>
</kw>
<status endtime="20190121 15:31:43.597" status="PASS" starttime="20190121 15:31:39.017"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${PWR_SHUTDOWNSYSTEM}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:43.682" level="INFO">${res_dict} = {'result': '520246', 'request': '5202', 'status': False, 'data': ''}</msg>
<status endtime="20190121 15:31:43.682" status="PASS" starttime="20190121 15:31:43.609"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:31:43.693" status="PASS" starttime="20190121 15:31:43.685"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:43.720" level="INFO">${value} = False</msg>
<status endtime="20190121 15:31:43.722" status="PASS" starttime="20190121 15:31:43.695"></status>
</kw>
<msg timestamp="20190121 15:31:43.725" level="INFO">${value} = False</msg>
<status endtime="20190121 15:31:43.726" status="PASS" starttime="20190121 15:31:43.601"></status>
</kw>
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:31:43.733" status="PASS" starttime="20190121 15:31:43.729"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190121 15:31:48.740" level="INFO">Slept 5 seconds</msg>
<status endtime="20190121 15:31:48.742" status="PASS" starttime="20190121 15:31:43.736"></status>
</kw>
<kw name="Measure_Current_kl30">
<assign>
<var>${TIMENOW}</var>
<var>${CURR_VCARBAT}</var>
<var>${CURR_KL30}</var>
</assign>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<assign>
<var>${KLEMME30}</var>
</assign>
<msg timestamp="20190121 15:31:48.800" level="INFO">${KLEMME30} = [[12225, 78], [12200, 84]]</msg>
<status endtime="20190121 15:31:48.801" status="PASS" starttime="20190121 15:31:48.750"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[0][1])</arg>
</arguments>
<assign>
<var>${CURR_VCARBAT}</var>
</assign>
<msg timestamp="20190121 15:31:48.826" level="INFO">${CURR_VCARBAT} = 78</msg>
<status endtime="20190121 15:31:48.827" status="PASS" starttime="20190121 15:31:48.804"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[1][1])</arg>
</arguments>
<assign>
<var>${CURR_KL30}</var>
</assign>
<msg timestamp="20190121 15:31:48.853" level="INFO">${CURR_KL30} = 84</msg>
<status endtime="20190121 15:31:48.853" status="PASS" starttime="20190121 15:31:48.831"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>epoch</arg>
</arguments>
<assign>
<var>${TIMENOW}</var>
</assign>
<msg timestamp="20190121 15:31:48.861" level="INFO">${TIMENOW} = 1548084708</msg>
<status endtime="20190121 15:31:48.862" status="PASS" starttime="20190121 15:31:48.856"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nTime: ${TIMENOW}, Vcarbat current: ${CURR_VCARBAT} ma, Kl30 current: ${CURR_KL30} ma.</arg>
</arguments>
<status endtime="20190121 15:31:48.871" status="PASS" starttime="20190121 15:31:48.865"></status>
</kw>
<msg timestamp="20190121 15:31:48.877" level="INFO">${TIMENOW} = 1548084708</msg>
<msg timestamp="20190121 15:31:48.878" level="INFO">${CURR_VCARBAT} = 78</msg>
<msg timestamp="20190121 15:31:48.880" level="INFO">${CURR_KL30} = 84</msg>
<status endtime="20190121 15:31:48.881" status="PASS" starttime="20190121 15:31:48.744"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should be true</arg>
<arg>${CURR_VCARBAT} &lt; 5</arg>
</arguments>
<assign>
<var>${fbus_resp}</var>
</assign>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${CURR_VCARBAT} &lt; 5</arg>
</arguments>
<msg timestamp="20190121 15:31:48.896" level="FAIL">'78 &lt; 5' should be true.</msg>
<status endtime="20190121 15:31:48.897" status="FAIL" starttime="20190121 15:31:48.889"></status>
</kw>
<msg timestamp="20190121 15:31:48.899" level="INFO">${fbus_resp} = None</msg>
<status endtime="20190121 15:31:48.900" status="FAIL" starttime="20190121 15:31:48.884"></status>
</kw>
<status endtime="20190121 15:31:48.903" status="FAIL" starttime="20190121 15:31:35.683"></status>
</kw>
<kw name="MCUSTANDBY">
<doc>Test the mcu stanby functionality</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test the mcu stanby functionality</arg>
</arguments>
<status endtime="20190121 15:31:48.916" status="PASS" starttime="20190121 15:31:48.911"></status>
</kw>
<kw name="POWERCYCLE">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:48.971" status="PASS" starttime="20190121 15:31:48.924"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:49.033" status="PASS" starttime="20190121 15:31:48.975"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:31:49.097" status="PASS" starttime="20190121 15:31:49.041"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:51.105" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:51.107" status="PASS" starttime="20190121 15:31:49.100"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:31:51.156" status="PASS" starttime="20190121 15:31:51.109"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:52.164" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:52.166" status="PASS" starttime="20190121 15:31:51.159"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:31:52.217" status="PASS" starttime="20190121 15:31:52.169"></status>
</kw>
<status endtime="20190121 15:31:52.220" status="PASS" starttime="20190121 15:31:48.918"></status>
</kw>
<kw name="LOAD_AND_INIT_THE_TESTROUTINE">
<doc>Load the powertestroutine and init it</doc>
<kw name="Step_load">
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${POWER_TR_PATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg timestamp="20190121 15:31:52.247" level="INFO">Starting process:
find /home/debian/chorus_version/TestRoutinePower_OLU_*.bin</msg>
<msg timestamp="20190121 15:31:52.279" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:31:52.294" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:31:52.297" level="INFO">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:31:52.298" status="PASS" starttime="20190121 15:31:52.241"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg timestamp="20190121 15:31:52.307" level="INFO">${stdout_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status endtime="20190121 15:31:52.308" status="PASS" starttime="20190121 15:31:52.301"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:31:52.315" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:31:52.317" level="INFO">${temp} = ['/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin']</msg>
<status endtime="20190121 15:31:52.318" status="PASS" starttime="20190121 15:31:52.311"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20190121 15:31:52.326" level="INFO">${path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status endtime="20190121 15:31:52.327" status="PASS" starttime="20190121 15:31:52.321"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status endtime="20190121 15:31:52.335" status="PASS" starttime="20190121 15:31:52.330"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" timestamp="20190121 15:31:52.343" level="INFO">File '&lt;a href="file:///home/debian/chorus_version/TestRoutinePower_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutinePower_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status endtime="20190121 15:31:52.345" status="PASS" starttime="20190121 15:31:52.338"></status>
</kw>
<msg timestamp="20190121 15:31:52.348" level="INFO">${matched_path} = /home/debian/chorus_version/TestRoutinePower_OLU_C2.bin</msg>
<status endtime="20190121 15:31:52.349" status="PASS" starttime="20190121 15:31:52.233"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:52.515" level="INFO">${res_dict} = {'request': '', 'status': True, 'data': '2002e7cf', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:31:52.516" status="PASS" starttime="20190121 15:31:52.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:31:52.537" level="INFO">{'request': '', 'status': True, 'data': '2002e7cf', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:31:52.540" status="PASS" starttime="20190121 15:31:52.532"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:31:54.547" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:31:54.550" status="PASS" starttime="20190121 15:31:52.543"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:54.575" level="INFO">${value} = 5453</msg>
<status endtime="20190121 15:31:54.576" status="PASS" starttime="20190121 15:31:54.553"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:31:54.586" status="PASS" starttime="20190121 15:31:54.580"></status>
</kw>
<status endtime="20190121 15:31:54.588" status="PASS" starttime="20190121 15:31:52.228"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:54.659" level="INFO">${res_dict} = {'result': '4953', 'request': '49', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:31:54.660" status="PASS" starttime="20190121 15:31:54.596"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:54.684" level="INFO">${value} = True</msg>
<status endtime="20190121 15:31:54.685" status="PASS" starttime="20190121 15:31:54.663"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:31:54.692" status="PASS" starttime="20190121 15:31:54.688"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:55.699" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:55.702" status="PASS" starttime="20190121 15:31:54.695"></status>
</kw>
<status endtime="20190121 15:31:55.704" status="PASS" starttime="20190121 15:31:54.590"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:55.776" level="INFO">${res_dict} = {'result': '475653', 'request': '4756', 'status': True, 'data': '0100'}</msg>
<status endtime="20190121 15:31:55.777" status="PASS" starttime="20190121 15:31:55.712"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nVersion: ${res_dict}</arg>
</arguments>
<status endtime="20190121 15:31:55.786" status="PASS" starttime="20190121 15:31:55.780"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:31:56.793" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:31:56.795" status="PASS" starttime="20190121 15:31:55.789"></status>
</kw>
<status endtime="20190121 15:31:56.798" status="PASS" starttime="20190121 15:31:55.706"></status>
</kw>
<status endtime="20190121 15:31:56.800" status="PASS" starttime="20190121 15:31:52.223"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${PWR_MCUSTANDBY}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:31:56.893" level="INFO">${res_dict} = {'result': '520346', 'request': '5203', 'status': False, 'data': ''}</msg>
<status endtime="20190121 15:31:56.894" status="PASS" starttime="20190121 15:31:56.809"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:31:56.902" status="PASS" starttime="20190121 15:31:56.897"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:31:56.927" level="INFO">${value} = False</msg>
<status endtime="20190121 15:31:56.928" status="PASS" starttime="20190121 15:31:56.905"></status>
</kw>
<msg timestamp="20190121 15:31:56.931" level="INFO">${value} = False</msg>
<status endtime="20190121 15:31:56.932" status="PASS" starttime="20190121 15:31:56.802"></status>
</kw>
<kw name="Should Not Be True" library="BuiltIn">
<doc>Fails if the given condition is true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:31:56.939" status="PASS" starttime="20190121 15:31:56.935"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5s</arg>
</arguments>
<msg timestamp="20190121 15:32:01.946" level="INFO">Slept 5 seconds</msg>
<status endtime="20190121 15:32:01.948" status="PASS" starttime="20190121 15:31:56.942"></status>
</kw>
<kw name="Measure_Current_kl30">
<assign>
<var>${TIMENOW}</var>
<var>${CURR_VCARBAT}</var>
<var>${CURR_KL30}</var>
</assign>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<assign>
<var>${KLEMME30}</var>
</assign>
<msg timestamp="20190121 15:32:02.010" level="INFO">${KLEMME30} = [[12225, 87], [12175, 87]]</msg>
<status endtime="20190121 15:32:02.011" status="PASS" starttime="20190121 15:32:01.957"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[0][1])</arg>
</arguments>
<assign>
<var>${CURR_VCARBAT}</var>
</assign>
<msg timestamp="20190121 15:32:02.036" level="INFO">${CURR_VCARBAT} = 87</msg>
<status endtime="20190121 15:32:02.037" status="PASS" starttime="20190121 15:32:02.014"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>int($KLEMME30[1][1])</arg>
</arguments>
<assign>
<var>${CURR_KL30}</var>
</assign>
<msg timestamp="20190121 15:32:02.062" level="INFO">${CURR_KL30} = 87</msg>
<status endtime="20190121 15:32:02.063" status="PASS" starttime="20190121 15:32:02.040"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>epoch</arg>
</arguments>
<assign>
<var>${TIMENOW}</var>
</assign>
<msg timestamp="20190121 15:32:02.070" level="INFO">${TIMENOW} = 1548084722</msg>
<status endtime="20190121 15:32:02.071" status="PASS" starttime="20190121 15:32:02.066"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nTime: ${TIMENOW}, Vcarbat current: ${CURR_VCARBAT} ma, Kl30 current: ${CURR_KL30} ma.</arg>
</arguments>
<status endtime="20190121 15:32:02.081" status="PASS" starttime="20190121 15:32:02.074"></status>
</kw>
<msg timestamp="20190121 15:32:02.086" level="INFO">${TIMENOW} = 1548084722</msg>
<msg timestamp="20190121 15:32:02.087" level="INFO">${CURR_VCARBAT} = 87</msg>
<msg timestamp="20190121 15:32:02.088" level="INFO">${CURR_KL30} = 87</msg>
<status endtime="20190121 15:32:02.089" status="PASS" starttime="20190121 15:32:01.951"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>Should be true</arg>
<arg>${CURR_VCARBAT} &lt; 5</arg>
</arguments>
<assign>
<var>${fbus_resp}</var>
</assign>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${CURR_VCARBAT} &lt; 5</arg>
</arguments>
<msg timestamp="20190121 15:32:02.104" level="FAIL">'87 &lt; 5' should be true.</msg>
<status endtime="20190121 15:32:02.106" status="FAIL" starttime="20190121 15:32:02.098"></status>
</kw>
<msg timestamp="20190121 15:32:02.107" level="INFO">${fbus_resp} = None</msg>
<status endtime="20190121 15:32:02.108" status="FAIL" starttime="20190121 15:32:02.092"></status>
</kw>
<status endtime="20190121 15:32:02.111" status="FAIL" starttime="20190121 15:31:48.906"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:32:02.173" status="PASS" starttime="20190121 15:32:02.127"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:32:02.230" status="PASS" starttime="20190121 15:32:02.176"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:32:02.298" status="PASS" starttime="20190121 15:32:02.237"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:32:03.306" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:32:03.308" status="PASS" starttime="20190121 15:32:02.302"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:32:03.358" status="PASS" starttime="20190121 15:32:03.313"></status>
</kw>
<status endtime="20190121 15:32:03.361" status="PASS" starttime="20190121 15:32:02.117"></status>
</kw>
<doc>Implements Test Task SKTB-SKTB-56067 Power testroutine</doc>
<tags>
<tag>Power testroutine</tag>
</tags>
<status critical="yes" endtime="20190121 15:32:03.362" status="FAIL" starttime="20190121 15:31:09.223">Several failures occurred:

1) '78 &lt; 5' should be true.

2) '87 &lt; 5' should be true.</status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:32:04.892" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:32:04.950" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:32:04.952" status="PASS" starttime="20190121 15:32:03.402"></status>
</kw>
<status endtime="20190121 15:32:04.953" status="PASS" starttime="20190121 15:32:03.379"></status>
</kw>
<status endtime="20190121 15:32:04.955" status="PASS" starttime="20190121 15:32:03.373"></status>
</kw>
<doc>Power testroutine testcase</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:32:04.974" status="FAIL" starttime="20190121 15:31:06.359"></status>
</suite>
<suite id="s1-s16" source="/usr/share/robot-framework-scripts/robot-framework-chorus/SKTB-56094.robot" name="SKTB-56094">
<kw name="Setup Actions" library="chorus_resource" type="setup">
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Connecting to tnt-server ${TARGET}...</arg>
<arg>console=yes</arg>
</arguments>
<msg timestamp="20190121 15:32:05.525" level="INFO">Connecting to tnt-server localhost...</msg>
<status endtime="20190121 15:32:05.543" status="PASS" starttime="20190121 15:32:05.513"></status>
</kw>
<kw name="Connect To Server" library="robot_framework_tnt.Client">
<arguments>
<arg>${TARGET}</arg>
<arg>session_id=${SESSION}</arg>
</arguments>
<msg timestamp="20190121 15:32:05.551" level="INFO">Using robot-framework-tnt-client v1.3.1</msg>
<msg timestamp="20190121 15:32:05.563" level="INFO">Connecting to server localhost:5554</msg>
<msg timestamp="20190121 15:32:07.770" level="INFO">Reloaded library robot_framework_tnt.Client with 38 keywords.</msg>
<status endtime="20190121 15:32:07.772" status="PASS" starttime="20190121 15:32:05.546"></status>
</kw>
<status endtime="20190121 15:32:07.778" status="PASS" starttime="20190121 15:32:05.507"></status>
</kw>
<test id="s1-s16-t1" name="SKTB-SKTB-56094">
<kw name="Test_precondition" type="setup">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:32:07.934" status="PASS" starttime="20190121 15:32:07.827"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:32:08.060" status="PASS" starttime="20190121 15:32:07.941"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:32:08.189" status="PASS" starttime="20190121 15:32:08.063"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:32:10.208" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:32:10.211" status="PASS" starttime="20190121 15:32:08.192"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:32:10.260" status="PASS" starttime="20190121 15:32:10.213"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:32:11.267" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:32:11.270" status="PASS" starttime="20190121 15:32:10.263"></status>
</kw>
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${1}</arg>
</arguments>
<status endtime="20190121 15:32:11.319" status="PASS" starttime="20190121 15:32:11.273"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:32:13.329" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:32:13.331" status="PASS" starttime="20190121 15:32:11.323"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:32:13.378" status="PASS" starttime="20190121 15:32:13.334"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>baudrate</arg>
<arg>${921600}</arg>
</arguments>
<status endtime="20190121 15:32:13.427" status="PASS" starttime="20190121 15:32:13.381"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>timeout</arg>
<arg>${100}</arg>
</arguments>
<status endtime="20190121 15:32:13.476" status="PASS" starttime="20190121 15:32:13.430"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>open</arg>
</arguments>
<status endtime="20190121 15:32:13.531" status="PASS" starttime="20190121 15:32:13.479"></status>
</kw>
<status endtime="20190121 15:32:13.534" status="PASS" starttime="20190121 15:32:07.811"></status>
</kw>
<kw name="TEST_SERIAL_COMMUNICATION">
<doc>Test serial communication and change baudrate if necessary</doc>
<kw name="Step_alive">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:13.633" level="INFO">${res_dict} = {'result': '4153', 'request': '41', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:32:13.634" status="PASS" starttime="20190121 15:32:13.551"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:32:13.689" level="INFO">${value} = True</msg>
<status endtime="20190121 15:32:13.690" status="PASS" starttime="20190121 15:32:13.637"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${value}== ${FALSE}</arg>
<arg>change_baudrate</arg>
<arg>${115200}</arg>
</arguments>
<status endtime="20190121 15:32:13.707" status="PASS" starttime="20190121 15:32:13.700"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:32:14.715" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:32:14.717" status="PASS" starttime="20190121 15:32:13.710"></status>
</kw>
<status endtime="20190121 15:32:14.719" status="PASS" starttime="20190121 15:32:13.545"></status>
</kw>
<kw name="Step_alive_retry">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>alive</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:14.788" level="INFO">${res_dict} = {'result': '4153', 'request': '41', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:32:14.789" status="PASS" starttime="20190121 15:32:14.728"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:32:14.816" level="INFO">${value} = True</msg>
<status endtime="20190121 15:32:14.817" status="PASS" starttime="20190121 15:32:14.792"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:32:14.824" status="PASS" starttime="20190121 15:32:14.819"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:32:15.831" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:32:15.834" status="PASS" starttime="20190121 15:32:14.827"></status>
</kw>
<status endtime="20190121 15:32:15.836" status="PASS" starttime="20190121 15:32:14.721"></status>
</kw>
<status endtime="20190121 15:32:15.838" status="PASS" starttime="20190121 15:32:13.538"></status>
</kw>
<kw name="LOAD_AND_INIT_THE_TESTROUTINE">
<doc>Load the rtestroutine and init it</doc>
<kw name="Step_load">
<arguments>
<arg>${VEHICLE_TR_PATH}</arg>
</arguments>
<kw name="find_file" library="chorus_resource">
<doc>Find file the path can be given as an exact path or as a glob pattern</doc>
<arguments>
<arg>${TESTROUTINE_FILEPATH}</arg>
</arguments>
<assign>
<var>${matched_path}</var>
</assign>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>find ${FILEPATH}</arg>
<arg>shell=True</arg>
<arg>alias=FINDFILE</arg>
</arguments>
<assign>
<var>${PROCCESS_ID}</var>
</assign>
<msg timestamp="20190121 15:32:15.868" level="INFO">Starting process:
find /home/debian/chorus_version/TestRoutineVehicleBuses_OLU_*.bin</msg>
<msg timestamp="20190121 15:32:15.898" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:15.913" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:15.915" level="INFO">${PROCCESS_ID} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:32:15.917" status="PASS" starttime="20190121 15:32:15.863"></status>
</kw>
<kw name="Get Process Result" library="Process">
<doc>Returns the specified `result object` or some of its attributes.</doc>
<arguments>
<arg>FINDFILE</arg>
<arg>stdout=true</arg>
</arguments>
<assign>
<var>${stdout_path}</var>
</assign>
<msg timestamp="20190121 15:32:15.926" level="INFO">${stdout_path} = /home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin</msg>
<status endtime="20190121 15:32:15.927" status="PASS" starttime="20190121 15:32:15.920"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${stdout_path}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:32:15.934" level="INFO">1 lines returned</msg>
<msg timestamp="20190121 15:32:15.936" level="INFO">${temp} = ['/home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin']</msg>
<status endtime="20190121 15:32:15.937" status="PASS" starttime="20190121 15:32:15.930"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${temp}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${path}</var>
</assign>
<msg timestamp="20190121 15:32:15.945" level="INFO">${path} = /home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin</msg>
<status endtime="20190121 15:32:15.946" status="PASS" starttime="20190121 15:32:15.940"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<status endtime="20190121 15:32:15.954" status="PASS" starttime="20190121 15:32:15.948"></status>
</kw>
<kw name="File Should Exist" library="OperatingSystem">
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<arguments>
<arg>${path}</arg>
</arguments>
<msg html="yes" timestamp="20190121 15:32:15.961" level="INFO">File '&lt;a href="file:///home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin"&gt;/home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin&lt;/a&gt;' exists.</msg>
<status endtime="20190121 15:32:15.963" status="PASS" starttime="20190121 15:32:15.957"></status>
</kw>
<msg timestamp="20190121 15:32:15.967" level="INFO">${matched_path} = /home/debian/chorus_version/TestRoutineVehicleBuses_OLU_C2.bin</msg>
<status endtime="20190121 15:32:15.968" status="PASS" starttime="20190121 15:32:15.852"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>load</arg>
<arg>${matched_path}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:16.779" level="INFO">${res_dict} = {'request': '', 'status': True, 'data': 'd8dd0dd1', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:32:16.779" status="PASS" starttime="20190121 15:32:15.971"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${res_dict}</arg>
<arg>console=True</arg>
</arguments>
<msg timestamp="20190121 15:32:16.813" level="INFO">{'request': '', 'status': True, 'data': 'd8dd0dd1', 'result': '5453', 'response': 'TS', 'flowctrl': ''}</msg>
<status endtime="20190121 15:32:16.824" status="PASS" starttime="20190121 15:32:16.792"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${2}</arg>
</arguments>
<msg timestamp="20190121 15:32:18.842" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:32:18.844" status="PASS" starttime="20190121 15:32:16.827"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("result")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:32:18.873" level="INFO">${value} = 5453</msg>
<status endtime="20190121 15:32:18.873" status="PASS" starttime="20190121 15:32:18.847"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${value}</arg>
<arg>${TRANSFER_SUCCESSFULLY}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:32:18.882" status="PASS" starttime="20190121 15:32:18.876"></status>
</kw>
<status endtime="20190121 15:32:18.885" status="PASS" starttime="20190121 15:32:15.845"></status>
</kw>
<kw name="Step_init">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>init</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:18.953" level="INFO">${res_dict} = {'result': '4953', 'request': '49', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:32:18.954" status="PASS" starttime="20190121 15:32:18.893"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:32:19.003" level="INFO">${value} = True</msg>
<status endtime="20190121 15:32:19.004" status="PASS" starttime="20190121 15:32:18.957"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<status endtime="20190121 15:32:19.013" status="PASS" starttime="20190121 15:32:19.008"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:32:20.020" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:32:20.022" status="PASS" starttime="20190121 15:32:19.015"></status>
</kw>
<status endtime="20190121 15:32:20.024" status="PASS" starttime="20190121 15:32:18.886"></status>
</kw>
<kw name="Step_getversion">
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>version</arg>
<arg>Noparam</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:20.096" level="INFO">${res_dict} = {'result': '475653', 'request': '4756', 'status': True, 'data': '0101'}</msg>
<status endtime="20190121 15:32:20.097" status="PASS" starttime="20190121 15:32:20.032"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>\nVersion: ${res_dict}</arg>
</arguments>
<status endtime="20190121 15:32:20.106" status="PASS" starttime="20190121 15:32:20.100"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:32:21.113" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:32:21.115" status="PASS" starttime="20190121 15:32:20.109"></status>
</kw>
<status endtime="20190121 15:32:21.118" status="PASS" starttime="20190121 15:32:20.026"></status>
</kw>
<status endtime="20190121 15:32:21.120" status="PASS" starttime="20190121 15:32:15.840"></status>
</kw>
<kw name="CAN_SENDDATA_CAN1_TEST">
<doc>Test can send and receive data can 1</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test can send and receive data can 1</arg>
</arguments>
<status endtime="20190121 15:32:21.133" status="PASS" starttime="20190121 15:32:21.128"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_0}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:32:21.152" status="PASS" starttime="20190121 15:32:21.145"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:32:21.161" level="INFO">Starting process:
sudo ip link set can0 down</msg>
<msg timestamp="20190121 15:32:21.189" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:21.260" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:21.263" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:32:21.264" status="PASS" starttime="20190121 15:32:21.155"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:32:21.277" status="PASS" starttime="20190121 15:32:21.268"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:32:21.287" level="INFO">Starting process:
sudo ip link set can0 type can bitrate 250000</msg>
<msg timestamp="20190121 15:32:21.316" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:21.372" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:21.375" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:32:21.376" status="PASS" starttime="20190121 15:32:21.280"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:32:21.388" status="PASS" starttime="20190121 15:32:21.380"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:32:21.398" level="INFO">Starting process:
sudo ip link set can0 up</msg>
<msg timestamp="20190121 15:32:21.427" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:21.509" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:21.512" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:32:21.517" status="PASS" starttime="20190121 15:32:21.391"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:32:21.543" status="PASS" starttime="20190121 15:32:21.525"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:32:21.546" status="PASS" starttime="20190121 15:32:21.135"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_0},${CAN_MSG_ID_RX}:${MASK},${CAN_MSG_ID_TX}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:32:21.561" level="INFO">Starting process:
candump -t a can0,767:7FF,768:7FF</msg>
<msg timestamp="20190121 15:32:21.613" level="INFO">${candump_ID} = 209</msg>
<status endtime="20190121 15:32:21.614" status="PASS" starttime="20190121 15:32:21.549"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>cangen ${${CAN_0}} -g ${CYCLE_TIME} -I ${CAN_MSG_ID_TX} -L ${DLC} -D ${CAN_MESSAGE} -n ${MSG_NUMBER}</arg>
<arg>shell=True</arg>
<arg>alias=CANGEN</arg>
</arguments>
<assign>
<var>${cangen_ID}</var>
</assign>
<msg timestamp="20190121 15:32:21.638" level="INFO">Starting process:
cangen can0 -g 500 -I 768 -L 8 -D AABBCCDD11223344 -n 3</msg>
<msg timestamp="20190121 15:32:21.679" level="INFO">${cangen_ID} = 210</msg>
<status endtime="20190121 15:32:21.685" status="PASS" starttime="20190121 15:32:21.624"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${CAN_SENDDATA_CAN1}</arg>
<arg>${CAN_MESSAGE}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${data}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setbuffer</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:21.791" level="INFO">${res_dict} = {'result': '534253', 'request': '53420008aabbccdd11223344', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:32:21.792" status="PASS" starttime="20190121 15:32:21.715"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:32:21.802" status="PASS" starttime="20190121 15:32:21.796"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:32:21.831" level="INFO">${value} = True</msg>
<status endtime="20190121 15:32:21.832" status="PASS" starttime="20190121 15:32:21.804"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status setbuffer: ${value}</arg>
</arguments>
<status endtime="20190121 15:32:21.840" status="PASS" starttime="20190121 15:32:21.835"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${FUNC}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:21.905" level="INFO">${res_dict} = {'result': '520153', 'request': '5201', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:32:21.906" status="PASS" starttime="20190121 15:32:21.843"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:32:21.914" status="PASS" starttime="20190121 15:32:21.909"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:32:21.942" level="INFO">${value} = True</msg>
<status endtime="20190121 15:32:21.943" status="PASS" starttime="20190121 15:32:21.917"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status exec: ${value}</arg>
</arguments>
<status endtime="20190121 15:32:21.951" status="PASS" starttime="20190121 15:32:21.945"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>getbuffer</arg>
<arg>some</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:22.042" level="INFO">${res_dict} = {'result': '474253', 'request': '4742', 'status': True, 'data': 'aabbccdd11223344'}</msg>
<status endtime="20190121 15:32:22.043" status="PASS" starttime="20190121 15:32:21.954"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:32:22.056" status="PASS" starttime="20190121 15:32:22.046"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20190121 15:32:22.099" level="INFO">${status} = True</msg>
<status endtime="20190121 15:32:22.100" status="PASS" starttime="20190121 15:32:22.059"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status getbuffer: ${value}</arg>
</arguments>
<status endtime="20190121 15:32:22.108" status="PASS" starttime="20190121 15:32:22.103"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("data")</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190121 15:32:22.137" level="INFO">${data} = aabbccdd11223344</msg>
<status endtime="20190121 15:32:22.138" status="PASS" starttime="20190121 15:32:22.111"></status>
</kw>
<msg timestamp="20190121 15:32:22.142" level="INFO">${status} = True</msg>
<msg timestamp="20190121 15:32:22.143" level="INFO">${data} = aabbccdd11223344</msg>
<status endtime="20190121 15:32:22.144" status="PASS" starttime="20190121 15:32:21.696"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<status endtime="20190121 15:32:22.151" status="PASS" starttime="20190121 15:32:22.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data}</arg>
<arg>${CAN_MESSAGE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:32:22.160" status="PASS" starttime="20190121 15:32:22.154"></status>
</kw>
<kw name="Check_test_result">
<arguments>
<arg>${CAN_MESSAGE}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=0.5 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:32:22.174" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:22.678" level="INFO">Process did not complete in 500 milliseconds.</msg>
<msg timestamp="20190121 15:32:22.679" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:32:22.683" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:22.685" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:32:22.686" status="PASS" starttime="20190121 15:32:22.170"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:32:22.694" level="INFO">3 lines returned</msg>
<msg timestamp="20190121 15:32:22.697" level="INFO">${temp} = [' (1548084741.703377)  can0  768   [8]  AA BB CC DD 11 22 33 44', ' (1548084741.874530)  can0  767   [8]  AA BB CC DD 11 22 33 44', ' (1548084742.203581)  can0  768   [8]  AA BB CC DD 11 22 33 44']</msg>
<status endtime="20190121 15:32:22.698" status="PASS" starttime="20190121 15:32:22.689"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>withoutfilter</arg>
</arguments>
<assign>
<var>${FILTER}</var>
</assign>
<msg timestamp="20190121 15:32:22.705" level="INFO">${FILTER} = ['withoutfilter']</msg>
<status endtime="20190121 15:32:22.706" status="PASS" starttime="20190121 15:32:22.701"></status>
</kw>
<kw name="Set Canid Status And Filter" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>Set  pass and stop ID filter for</doc>
<arguments>
<arg>status</arg>
<arg>${FILTER}</arg>
</arguments>
<status endtime="20190121 15:32:22.713" status="PASS" starttime="20190121 15:32:22.709"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:32:22.721" level="INFO">(1548084741.703377)  can0  768   [8]  AA BB CC DD 11 22 33 44
 (1548084741.874530)  can0  767   [8]  AA BB CC DD 11 22 33 44
 (1548084742.203581)  can0  768   [8]  AA BB CC DD 11 22 33 44</msg>
<msg timestamp="20190121 15:32:22.723" level="INFO">${ret_list} = [{'id': '768', 'timestamp': '1548084741.703377', 'payload': 'AABBCCDD11223344', 'channel': 'can0'}, {'id': '767', 'timestamp': '1548084741.874530', 'payload': 'AABBCCDD11223344', 'channel': 'can0'}, {...</msg>
<status endtime="20190121 15:32:22.723" status="PASS" starttime="20190121 15:32:22.716"></status>
</kw>
<kw name="CHECK_EXISTENS_OF_CAN_MESSAGES_WITH_CANID">
<doc>This keyword Check CAN_Messages if payload with canID exist and return TRUE if exist</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${CAN_MSG_ID_RX}</arg>
<arg>${can_msg}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20190121 15:32:22.743" level="INFO">${RESULT} = False</msg>
<status endtime="20190121 15:32:22.744" status="PASS" starttime="20190121 15:32:22.738"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:32:22.755" level="INFO">Length is 3</msg>
<msg timestamp="20190121 15:32:22.757" level="INFO">${count} = 3</msg>
<status endtime="20190121 15:32:22.757" status="PASS" starttime="20190121 15:32:22.747"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:32:22.768" status="PASS" starttime="20190121 15:32:22.762"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:32:22.776" level="INFO">${msgcount} = 0</msg>
<status endtime="20190121 15:32:22.777" status="PASS" starttime="20190121 15:32:22.771"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'id': '768', 'timestamp': '1548084741.703377', 'payload': 'AABBCCDD11223344', 'channel': 'can0'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:32:22.789" level="INFO">${payload} = AABBCCDD11223344</msg>
<status endtime="20190121 15:32:22.790" status="PASS" starttime="20190121 15:32:22.784"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${can_id}</var>
</assign>
<msg timestamp="20190121 15:32:22.798" level="INFO">${can_id} = 768</msg>
<status endtime="20190121 15:32:22.799" status="PASS" starttime="20190121 15:32:22.793"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_msg}</var>
</assign>
<msg timestamp="20190121 15:32:22.809" level="INFO">${count_msg} = 1</msg>
<status endtime="20190121 15:32:22.810" status="PASS" starttime="20190121 15:32:22.801"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${can_id}' == '${expected_canid}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_id}</var>
</assign>
<msg timestamp="20190121 15:32:22.820" level="INFO">${count_id} = 0</msg>
<status endtime="20190121 15:32:22.821" status="PASS" starttime="20190121 15:32:22.813"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${count_msg} + ${count_id}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:32:22.830" level="INFO">${msgcount} = 1</msg>
<status endtime="20190121 15:32:22.830" status="PASS" starttime="20190121 15:32:22.823"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20190121 15:32:22.841" level="INFO">${RESULT} = False</msg>
<status endtime="20190121 15:32:22.842" status="PASS" starttime="20190121 15:32:22.833"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
</arguments>
<status endtime="20190121 15:32:22.851" status="PASS" starttime="20190121 15:32:22.845"></status>
</kw>
<status endtime="20190121 15:32:22.852" status="PASS" starttime="20190121 15:32:22.781"></status>
</kw>
<kw name="${item_dict} = {'id': '767', 'timestamp': '1548084741.874530', 'payload': 'AABBCCDD11223344', 'channel': 'can0'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:32:22.861" level="INFO">${payload} = AABBCCDD11223344</msg>
<status endtime="20190121 15:32:22.862" status="PASS" starttime="20190121 15:32:22.857"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${can_id}</var>
</assign>
<msg timestamp="20190121 15:32:22.870" level="INFO">${can_id} = 767</msg>
<status endtime="20190121 15:32:22.871" status="PASS" starttime="20190121 15:32:22.865"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_msg}</var>
</assign>
<msg timestamp="20190121 15:32:22.881" level="INFO">${count_msg} = 1</msg>
<status endtime="20190121 15:32:22.882" status="PASS" starttime="20190121 15:32:22.874"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${can_id}' == '${expected_canid}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_id}</var>
</assign>
<msg timestamp="20190121 15:32:22.892" level="INFO">${count_id} = 1</msg>
<status endtime="20190121 15:32:22.893" status="PASS" starttime="20190121 15:32:22.885"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${count_msg} + ${count_id}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:32:22.902" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:32:22.903" status="PASS" starttime="20190121 15:32:22.895"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20190121 15:32:22.913" level="INFO">${RESULT} = True</msg>
<status endtime="20190121 15:32:22.914" status="PASS" starttime="20190121 15:32:22.906"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
</arguments>
<msg timestamp="20190121 15:32:22.922" level="INFO">Exiting for loop altogether.</msg>
<status endtime="20190121 15:32:22.924" status="PASS" starttime="20190121 15:32:22.916"></status>
</kw>
<status endtime="20190121 15:32:22.925" status="PASS" starttime="20190121 15:32:22.854"></status>
</kw>
<status endtime="20190121 15:32:22.926" status="PASS" starttime="20190121 15:32:22.778"></status>
</kw>
<msg timestamp="20190121 15:32:22.929" level="INFO">${res} = True</msg>
<status endtime="20190121 15:32:22.930" status="PASS" starttime="20190121 15:32:22.726"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Liste: ${ret_list}</arg>
</arguments>
<status endtime="20190121 15:32:22.939" status="PASS" starttime="20190121 15:32:22.933"></status>
</kw>
<msg timestamp="20190121 15:32:22.942" level="INFO">${res} = True</msg>
<status endtime="20190121 15:32:22.943" status="PASS" starttime="20190121 15:32:22.162"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:32:22.950" status="PASS" starttime="20190121 15:32:22.946"></status>
</kw>
<status endtime="20190121 15:32:22.954" status="PASS" starttime="20190121 15:32:21.122"></status>
</kw>
<kw name="CAN_SENDDATA_CAN3_TEST">
<doc>Test can send and receive data can 2</doc>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Test can send and receive data can 2</arg>
</arguments>
<status endtime="20190121 15:32:22.968" status="PASS" starttime="20190121 15:32:22.962"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2 seconds</arg>
</arguments>
<msg timestamp="20190121 15:32:24.975" level="INFO">Slept 2 seconds</msg>
<status endtime="20190121 15:32:24.977" status="PASS" starttime="20190121 15:32:22.970"></status>
</kw>
<kw name="set_can_channel" library="chorus_resource">
<doc>Set bitrate for specified can channel</doc>
<arguments>
<arg>${CAN_2}</arg>
<arg>${250000}</arg>
</arguments>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Set bitrate for CAN: ${CAN}, bitrate: ${bitrate}</arg>
</arguments>
<status endtime="20190121 15:32:24.996" status="PASS" starttime="20190121 15:32:24.989"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} down</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:32:25.005" level="INFO">Starting process:
sudo ip link set can2 down</msg>
<msg timestamp="20190121 15:32:25.035" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:25.113" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:25.116" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:32:25.117" status="PASS" starttime="20190121 15:32:24.999"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:32:25.129" status="PASS" starttime="20190121 15:32:25.120"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} type can bitrate ${bitrate}</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:32:25.139" level="INFO">Starting process:
sudo ip link set can2 type can bitrate 250000</msg>
<msg timestamp="20190121 15:32:25.169" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:25.225" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:25.227" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:32:25.229" status="PASS" starttime="20190121 15:32:25.132"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:32:25.240" status="PASS" starttime="20190121 15:32:25.232"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>sudo ip link set ${CAN} up</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190121 15:32:25.250" level="INFO">Starting process:
sudo ip link set can2 up</msg>
<msg timestamp="20190121 15:32:25.279" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:25.373" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:25.376" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status endtime="20190121 15:32:25.381" status="PASS" starttime="20190121 15:32:25.243"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res.stderr}</arg>
</arguments>
<status endtime="20190121 15:32:25.405" status="PASS" starttime="20190121 15:32:25.389"></status>
</kw>
<timeout value="15 seconds"></timeout>
<status endtime="20190121 15:32:25.408" status="PASS" starttime="20190121 15:32:24.979"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>candump -t a ${CAN_2},${CAN_MSG_ID_RX}:${MASK},${CAN_MSG_ID_TX}:${MASK}</arg>
<arg>shell=True</arg>
<arg>alias=CANDUMP</arg>
</arguments>
<assign>
<var>${candump_ID}</var>
</assign>
<msg timestamp="20190121 15:32:25.419" level="INFO">Starting process:
candump -t a can2,767:7FF,768:7FF</msg>
<msg timestamp="20190121 15:32:25.456" level="INFO">${candump_ID} = 214</msg>
<status endtime="20190121 15:32:25.460" status="PASS" starttime="20190121 15:32:25.411"></status>
</kw>
<kw name="Start Process" library="Process">
<doc>Starts a new process on background.</doc>
<arguments>
<arg>cangen ${${CAN_2}} -g ${CYCLE_TIME} -I ${CAN_MSG_ID_TX} -L ${DLC} -D ${CAN_MESSAGE} -n ${MSG_NUMBER}</arg>
<arg>shell=True</arg>
<arg>alias=CANGEN</arg>
</arguments>
<assign>
<var>${cangen_ID}</var>
</assign>
<msg timestamp="20190121 15:32:25.478" level="INFO">Starting process:
cangen can2 -g 500 -I 768 -L 8 -D AABBCCDD11223344 -n 3</msg>
<msg timestamp="20190121 15:32:25.509" level="INFO">${cangen_ID} = 215</msg>
<status endtime="20190121 15:32:25.510" status="PASS" starttime="20190121 15:32:25.464"></status>
</kw>
<kw name="EXECUTE_ROUTINE">
<arguments>
<arg>${CAN_SENDDATA_CAN3}</arg>
<arg>${CAN_MESSAGE}</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${data}</var>
</assign>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>setbuffer</arg>
<arg>${PARAM}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:25.622" level="INFO">${res_dict} = {'result': '1efd54', 'request': '53420008aabbccdd11223344', 'status': False, 'data': ''}</msg>
<status endtime="20190121 15:32:25.623" status="PASS" starttime="20190121 15:32:25.531"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:32:25.640" status="PASS" starttime="20190121 15:32:25.630"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:32:25.681" level="INFO">${value} = False</msg>
<status endtime="20190121 15:32:25.682" status="PASS" starttime="20190121 15:32:25.643"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status setbuffer: ${value}</arg>
</arguments>
<status endtime="20190121 15:32:25.690" status="PASS" starttime="20190121 15:32:25.685"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>exec</arg>
<arg>${FUNC}</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:25.754" level="INFO">${res_dict} = {'result': '520353', 'request': '5203', 'status': True, 'data': ''}</msg>
<status endtime="20190121 15:32:25.755" status="PASS" starttime="20190121 15:32:25.693"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:32:25.767" status="PASS" starttime="20190121 15:32:25.759"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190121 15:32:25.797" level="INFO">${value} = True</msg>
<status endtime="20190121 15:32:25.798" status="PASS" starttime="20190121 15:32:25.770"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status exec: ${value}</arg>
</arguments>
<status endtime="20190121 15:32:25.806" status="PASS" starttime="20190121 15:32:25.801"></status>
</kw>
<kw name="Call Trstate" library="robot_framework_tnt.Client">
<arguments>
<arg>getbuffer</arg>
<arg>some</arg>
</arguments>
<assign>
<var>${res_dict}</var>
</assign>
<msg timestamp="20190121 15:32:25.898" level="INFO">${res_dict} = {'result': '474253', 'request': '4742', 'status': True, 'data': 'aabbccdd11223344'}</msg>
<status endtime="20190121 15:32:25.898" status="PASS" starttime="20190121 15:32:25.811"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>${res_dict}</arg>
</arguments>
<status endtime="20190121 15:32:25.910" status="PASS" starttime="20190121 15:32:25.904"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("status")</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20190121 15:32:25.938" level="INFO">${status} = True</msg>
<status endtime="20190121 15:32:25.939" status="PASS" starttime="20190121 15:32:25.913"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Status getbuffer: ${value}</arg>
</arguments>
<status endtime="20190121 15:32:25.947" status="PASS" starttime="20190121 15:32:25.942"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>$res_dict.get("data")</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20190121 15:32:25.975" level="INFO">${data} = aabbccdd11223344</msg>
<status endtime="20190121 15:32:25.976" status="PASS" starttime="20190121 15:32:25.950"></status>
</kw>
<msg timestamp="20190121 15:32:25.980" level="INFO">${status} = True</msg>
<msg timestamp="20190121 15:32:25.981" level="INFO">${data} = aabbccdd11223344</msg>
<status endtime="20190121 15:32:25.982" status="PASS" starttime="20190121 15:32:25.521"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${status}</arg>
</arguments>
<status endtime="20190121 15:32:25.989" status="PASS" starttime="20190121 15:32:25.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${data}</arg>
<arg>${CAN_MESSAGE}</arg>
<arg>ignore_case=True</arg>
</arguments>
<status endtime="20190121 15:32:26.003" status="PASS" starttime="20190121 15:32:25.994"></status>
</kw>
<kw name="Check_test_result">
<arguments>
<arg>${CAN_MESSAGE}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<arguments>
<arg>CANDUMP</arg>
<arg>timeout=0.5 secs</arg>
<arg>on_timeout=terminate</arg>
</arguments>
<assign>
<var>${candump}</var>
</assign>
<msg timestamp="20190121 15:32:26.017" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:26.521" level="INFO">Process did not complete in 500 milliseconds.</msg>
<msg timestamp="20190121 15:32:26.522" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20190121 15:32:26.527" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:26.529" level="INFO">${candump} = &lt;result object with rc -15&gt;</msg>
<status endtime="20190121 15:32:26.530" status="PASS" starttime="20190121 15:32:26.013"></status>
</kw>
<kw name="Split To Lines" library="String">
<doc>Splits the given string to lines.</doc>
<arguments>
<arg>${candump.stdout}</arg>
</arguments>
<assign>
<var>${temp}</var>
</assign>
<msg timestamp="20190121 15:32:26.538" level="INFO">3 lines returned</msg>
<msg timestamp="20190121 15:32:26.540" level="INFO">${temp} = [' (1548084745.519305)  can2  768   [8]  AA BB CC DD 11 22 33 44', ' (1548084745.724893)  can2  767   [8]  AA BB CC DD 11 22 33 44', ' (1548084746.025125)  can2  768   [8]  AA BB CC DD 11 22 33 44']</msg>
<status endtime="20190121 15:32:26.541" status="PASS" starttime="20190121 15:32:26.533"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>withoutfilter</arg>
</arguments>
<assign>
<var>${FILTER}</var>
</assign>
<msg timestamp="20190121 15:32:26.548" level="INFO">${FILTER} = ['withoutfilter']</msg>
<status endtime="20190121 15:32:26.549" status="PASS" starttime="20190121 15:32:26.544"></status>
</kw>
<kw name="Set Canid Status And Filter" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>Set  pass and stop ID filter for</doc>
<arguments>
<arg>status</arg>
<arg>${FILTER}</arg>
</arguments>
<status endtime="20190121 15:32:26.556" status="PASS" starttime="20190121 15:32:26.551"></status>
</kw>
<kw name="Convert Candump Liste" library="lairdcvs.cariflibrary.CarIfLibrary">
<doc>convert_candump_liste</doc>
<arguments>
<arg>${temp}</arg>
</arguments>
<assign>
<var>${ret_list}</var>
</assign>
<msg timestamp="20190121 15:32:26.564" level="INFO">(1548084745.519305)  can2  768   [8]  AA BB CC DD 11 22 33 44
 (1548084745.724893)  can2  767   [8]  AA BB CC DD 11 22 33 44
 (1548084746.025125)  can2  768   [8]  AA BB CC DD 11 22 33 44</msg>
<msg timestamp="20190121 15:32:26.566" level="INFO">${ret_list} = [{'id': '768', 'timestamp': '1548084745.519305', 'payload': 'AABBCCDD11223344', 'channel': 'can2'}, {'id': '767', 'timestamp': '1548084745.724893', 'payload': 'AABBCCDD11223344', 'channel': 'can2'}, {...</msg>
<status endtime="20190121 15:32:26.567" status="PASS" starttime="20190121 15:32:26.559"></status>
</kw>
<kw name="CHECK_EXISTENS_OF_CAN_MESSAGES_WITH_CANID">
<doc>This keyword Check CAN_Messages if payload with canID exist and return TRUE if exist</doc>
<arguments>
<arg>${ret_list}</arg>
<arg>${CAN_MSG_ID_RX}</arg>
<arg>${can_msg}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20190121 15:32:26.583" level="INFO">${RESULT} = False</msg>
<status endtime="20190121 15:32:26.584" status="PASS" starttime="20190121 15:32:26.578"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${responses_list}</arg>
</arguments>
<assign>
<var>${count}</var>
</assign>
<msg timestamp="20190121 15:32:26.594" level="INFO">Length is 3</msg>
<msg timestamp="20190121 15:32:26.596" level="INFO">${count} = 3</msg>
<status endtime="20190121 15:32:26.597" status="PASS" starttime="20190121 15:32:26.587"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${count} &gt; 0</arg>
</arguments>
<status endtime="20190121 15:32:26.605" status="PASS" starttime="20190121 15:32:26.600"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${0}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:32:26.613" level="INFO">${msgcount} = 0</msg>
<status endtime="20190121 15:32:26.614" status="PASS" starttime="20190121 15:32:26.608"></status>
</kw>
<kw name="${item_dict} IN [ @{responses_list} ]" type="for">
<kw name="${item_dict} = {'id': '768', 'timestamp': '1548084745.519305', 'payload': 'AABBCCDD11223344', 'channel': 'can2'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:32:26.626" level="INFO">${payload} = AABBCCDD11223344</msg>
<status endtime="20190121 15:32:26.627" status="PASS" starttime="20190121 15:32:26.621"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${can_id}</var>
</assign>
<msg timestamp="20190121 15:32:26.636" level="INFO">${can_id} = 768</msg>
<status endtime="20190121 15:32:26.637" status="PASS" starttime="20190121 15:32:26.630"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_msg}</var>
</assign>
<msg timestamp="20190121 15:32:26.647" level="INFO">${count_msg} = 1</msg>
<status endtime="20190121 15:32:26.648" status="PASS" starttime="20190121 15:32:26.640"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${can_id}' == '${expected_canid}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_id}</var>
</assign>
<msg timestamp="20190121 15:32:26.658" level="INFO">${count_id} = 0</msg>
<status endtime="20190121 15:32:26.659" status="PASS" starttime="20190121 15:32:26.651"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${count_msg} + ${count_id}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:32:26.668" level="INFO">${msgcount} = 1</msg>
<status endtime="20190121 15:32:26.669" status="PASS" starttime="20190121 15:32:26.662"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20190121 15:32:26.679" level="INFO">${RESULT} = False</msg>
<status endtime="20190121 15:32:26.680" status="PASS" starttime="20190121 15:32:26.672"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
</arguments>
<status endtime="20190121 15:32:26.690" status="PASS" starttime="20190121 15:32:26.683"></status>
</kw>
<status endtime="20190121 15:32:26.691" status="PASS" starttime="20190121 15:32:26.618"></status>
</kw>
<kw name="${item_dict} = {'id': '767', 'timestamp': '1548084745.724893', 'payload': 'AABBCCDD11223344', 'channel': 'can2'}" type="foritem">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>payload</arg>
</arguments>
<assign>
<var>${payload}</var>
</assign>
<msg timestamp="20190121 15:32:26.700" level="INFO">${payload} = AABBCCDD11223344</msg>
<status endtime="20190121 15:32:26.701" status="PASS" starttime="20190121 15:32:26.695"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${item_dict}</arg>
<arg>id</arg>
</arguments>
<assign>
<var>${can_id}</var>
</assign>
<msg timestamp="20190121 15:32:26.709" level="INFO">${can_id} = 767</msg>
<status endtime="20190121 15:32:26.710" status="PASS" starttime="20190121 15:32:26.704"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${payload}' == '${expected_canmsg}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_msg}</var>
</assign>
<msg timestamp="20190121 15:32:26.720" level="INFO">${count_msg} = 1</msg>
<status endtime="20190121 15:32:26.721" status="PASS" starttime="20190121 15:32:26.713"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${can_id}' == '${expected_canid}'</arg>
<arg>${1}</arg>
<arg>${0}</arg>
</arguments>
<assign>
<var>${count_id}</var>
</assign>
<msg timestamp="20190121 15:32:26.731" level="INFO">${count_id} = 1</msg>
<status endtime="20190121 15:32:26.732" status="PASS" starttime="20190121 15:32:26.724"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${count_msg} + ${count_id}</arg>
</arguments>
<assign>
<var>${msgcount}</var>
</assign>
<msg timestamp="20190121 15:32:26.741" level="INFO">${msgcount} = 2</msg>
<status endtime="20190121 15:32:26.742" status="PASS" starttime="20190121 15:32:26.735"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
<arg>${TRUE}</arg>
<arg>${FALSE}</arg>
</arguments>
<assign>
<var>${RESULT}</var>
</assign>
<msg timestamp="20190121 15:32:26.752" level="INFO">${RESULT} = True</msg>
<status endtime="20190121 15:32:26.753" status="PASS" starttime="20190121 15:32:26.745"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${msgcount} == ${2}</arg>
</arguments>
<msg timestamp="20190121 15:32:26.761" level="INFO">Exiting for loop altogether.</msg>
<status endtime="20190121 15:32:26.763" status="PASS" starttime="20190121 15:32:26.755"></status>
</kw>
<status endtime="20190121 15:32:26.764" status="PASS" starttime="20190121 15:32:26.692"></status>
</kw>
<status endtime="20190121 15:32:26.765" status="PASS" starttime="20190121 15:32:26.615"></status>
</kw>
<msg timestamp="20190121 15:32:26.769" level="INFO">${res} = True</msg>
<status endtime="20190121 15:32:26.769" status="PASS" starttime="20190121 15:32:26.569"></status>
</kw>
<kw name="Log To Console" library="BuiltIn">
<doc>Logs the given message to the console.</doc>
<arguments>
<arg>Liste: ${ret_list}</arg>
</arguments>
<status endtime="20190121 15:32:26.778" status="PASS" starttime="20190121 15:32:26.772"></status>
</kw>
<msg timestamp="20190121 15:32:26.782" level="INFO">${res} = True</msg>
<status endtime="20190121 15:32:26.782" status="PASS" starttime="20190121 15:32:26.005"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${res}</arg>
</arguments>
<status endtime="20190121 15:32:26.789" status="PASS" starttime="20190121 15:32:26.785"></status>
</kw>
<status endtime="20190121 15:32:26.792" status="PASS" starttime="20190121 15:32:22.956"></status>
</kw>
<kw name="Test_Teardown_Action" type="teardown">
<kw name="Kl 30" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:32:26.849" status="PASS" starttime="20190121 15:32:26.802"></status>
</kw>
<kw name="Kl 15" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:32:26.898" status="PASS" starttime="20190121 15:32:26.852"></status>
</kw>
<kw name="Production Mode" library="robot_framework_tnt.Client">
<arguments>
<arg>${0}</arg>
</arguments>
<status endtime="20190121 15:32:26.948" status="PASS" starttime="20190121 15:32:26.902"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${1}</arg>
</arguments>
<msg timestamp="20190121 15:32:27.967" level="INFO">Slept 1 second</msg>
<status endtime="20190121 15:32:27.969" status="PASS" starttime="20190121 15:32:26.952"></status>
</kw>
<kw name="Set Serial State" library="robot_framework_tnt.Client">
<arguments>
<arg>close</arg>
</arguments>
<status endtime="20190121 15:32:28.049" status="PASS" starttime="20190121 15:32:27.972"></status>
</kw>
<kw name="Run Process" library="Process">
<doc>Runs a process and waits for it to complete.</doc>
<arguments>
<arg>pkill candump</arg>
<arg>shell=True</arg>
</arguments>
<assign>
<var>${rm_res}</var>
</assign>
<msg timestamp="20190121 15:32:28.068" level="INFO">Starting process:
pkill candump</msg>
<msg timestamp="20190121 15:32:28.097" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20190121 15:32:28.131" level="INFO">Process completed.</msg>
<msg timestamp="20190121 15:32:28.135" level="INFO">${rm_res} = &lt;result object with rc 1&gt;</msg>
<status endtime="20190121 15:32:28.136" status="PASS" starttime="20190121 15:32:28.053"></status>
</kw>
<status endtime="20190121 15:32:28.138" status="PASS" starttime="20190121 15:32:26.795"></status>
</kw>
<doc>Implements Test Task SKTB-56094 Vehicle buses testroutine</doc>
<tags>
<tag>Vehicle buses testroutine</tag>
</tags>
<status critical="yes" endtime="20190121 15:32:28.140" status="PASS" starttime="20190121 15:32:07.780"></status>
</test>
<kw name="Teardown Actions" library="chorus_resource" type="teardown">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>$SESSION != ${None}</arg>
<arg>close connection</arg>
<arg>keep_session=${True}</arg>
<arg>ELSE</arg>
<arg>close connection</arg>
</arguments>
<kw name="Close Connection" library="robot_framework_tnt.Client">
<msg timestamp="20190121 15:32:29.655" level="INFO">Disconnecting from server, keeping session: False</msg>
<msg timestamp="20190121 15:32:29.711" level="INFO">Reloaded library robot_framework_tnt.Client with 2 keywords.</msg>
<status endtime="20190121 15:32:29.739" status="PASS" starttime="20190121 15:32:28.184"></status>
</kw>
<status endtime="20190121 15:32:29.744" status="PASS" starttime="20190121 15:32:28.157"></status>
</kw>
<status endtime="20190121 15:32:29.760" status="PASS" starttime="20190121 15:32:28.151"></status>
</kw>
<doc>Vehicle buses testroutine</doc>
<metadata>
<item name="Version">'1.0'</item>
</metadata>
<status endtime="20190121 15:32:29.761" status="PASS" starttime="20190121 15:32:05.065"></status>
</suite>
<status endtime="20190121 15:32:29.985" status="FAIL" starttime="20190121 15:22:51.468"></status>
</suite>
<statistics>
<total>
<stat pass="12" fail="4">Critical Tests</stat>
<stat pass="12" fail="4">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">CAN 1 diagnose test</stat>
<stat pass="1" fail="0">CAN 3 test</stat>
<stat pass="1" fail="0">CAN 3 test TX</stat>
<stat pass="1" fail="0">EEPROM</stat>
<stat pass="4" fail="0">FBUS</stat>
<stat pass="1" fail="0">Flashing</stat>
<stat pass="0" fail="2">GpioAdc testroutine</stat>
<stat pass="2" fail="1">GPIO Test</stat>
<stat pass="0" fail="1">Power testroutine</stat>
<stat pass="1" fail="0">Vehicle buses testroutine</stat>
</tag>
<suite>
<stat pass="12" id="s1" name="Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094" fail="4">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094</stat>
<stat pass="1" id="s1-s1" name="Update-Nad" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.Update-Nad</stat>
<stat pass="1" id="s1-s2" name="CI update chorus" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.CI update chorus</stat>
<stat pass="0" id="s1-s3" name="SKTB-31405" fail="1">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-31405</stat>
<stat pass="0" id="s1-s4" name="SKTB-33244" fail="1">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-33244</stat>
<stat pass="1" id="s1-s5" name="SKTB-13351" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-13351</stat>
<stat pass="1" id="s1-s6" name="SKTB-34994" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-34994</stat>
<stat pass="1" id="s1-s7" name="SKTB-41635" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-41635</stat>
<stat pass="1" id="s1-s8" name="SKTB-46886" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-46886</stat>
<stat pass="1" id="s1-s9" name="SKTB-47669" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-47669</stat>
<stat pass="1" id="s1-s10" name="SKTB-48413" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-48413</stat>
<stat pass="0" id="s1-s11" name="SKTB-49038" fail="1">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-49038</stat>
<stat pass="1" id="s1-s12" name="SKTB-49357" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-49357</stat>
<stat pass="1" id="s1-s13" name="SKTB-41553" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-41553</stat>
<stat pass="1" id="s1-s14" name="SKTB-56663" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-56663</stat>
<stat pass="0" id="s1-s15" name="SKTB-56067" fail="1">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-56067</stat>
<stat pass="1" id="s1-s16" name="SKTB-56094" fail="0">Update-Nad &amp; CI update chorus &amp; SKTB-31405 &amp; SKTB-33244 &amp; SKTB-13351 &amp; SKTB-34994 &amp; SKTB-41635 &amp; SKTB-46886 &amp; SKTB-47669 &amp; SKTB-48413 &amp; SKTB-49038 &amp; SKTB-49357 &amp; SKTB-41553 &amp; SKTB-56663 &amp; SKTB-56067 &amp; SKTB-56094.SKTB-56094</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
